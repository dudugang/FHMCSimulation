.TH "/Users/nam4/Desktop/omcs/src/system.cpp" 3 "Mon Aug 10 2015" "Version v0.0.1" "Multicomponent  Monte Carlo Simulation" \" -*- nroff -*-
.ad l
.nh
.SH NAME
/Users/nam4/Desktop/omcs/src/system.cpp \- 
.SH SYNOPSIS
.br
.PP
\fC#include 'system\&.h'\fP
.br

.SS "Functions"

.in +1c
.ti -1c
.RI "const double \fBcalculateBias\fP (\fBsimSystem\fP &sys, const int nTotFinal, const double p_u)"
.br
.RI "\fICalculate the bias based on a systems current state and the next state being proposed\&. \fP"
.in -1c
.SH "Function Documentation"
.PP 
.SS "const double calculateBias (\fBsimSystem\fP & sys, const int nTotFinal, const double p_u)"

.PP
Calculate the bias based on a systems current state and the next state being proposed\&. 
.PP
\fBParameters:\fP
.RS 4
\fIsys\fP System object containing the current state of the system\&. 
.br
\fInTotFinal\fP Total atoms in the proposed final state\&. 
.br
\fIp_u\fP Ratio of the system's partition in the final and initial state (e\&.g\&. unbiased p_acc = min(1, p_u))\&.
.RE
.PP
\fBReturns:\fP
.RS 4
rel_bias The value of the relative bias to apply in the metropolis criteria during sampling 
.RE
.PP

.PP
Definition at line 759 of file system\&.cpp\&.
.PP
References __BIAS_INT_TYPE__, tmmc::getAddress(), wala::getAddress(), tmmc::getBias(), wala::getBias(), simSystem::getTotN(), simSystem::tmmcBias, tmmc::updateC(), simSystem::useTMMC, simSystem::useWALA, and simSystem::wlBias\&.
.PP
Referenced by deleteParticle::make(), translateParticle::make(), swapParticles::make(), and insertParticle::make()\&.
.PP
.nf
759                                                                                    {
760                 double rel_bias = 1\&.0;
761                 
762                 if (sys\&.useTMMC && !sys\&.useWALA) {
763                                 // TMMC biasing
764                                 const __BIAS_INT_TYPE__ address1 = sys\&.tmmcBias->getAddress(sys\&.getTotN()), address2 = sys\&.tmmcBias->getAddress(nTotFinal);
765                                 const double b1 = sys\&.tmmcBias->getBias (address1), b2 = sys\&.tmmcBias->getBias (address2);
766                                 rel_bias = exp(b2-b1);
767                                 sys\&.tmmcBias->updateC (sys\&.getTotN(), nTotFinal, std::min(1\&.0, p_u)); 
768     } else if (!sys\&.useTMMC && sys\&.useWALA) {
769                 // Wang-Landau Biasing
770                 const __BIAS_INT_TYPE__ address1 = sys\&.wlBias->getAddress(sys\&.getTotN()), address2 = sys\&.wlBias->getAddress(nTotFinal);                
771                 const double b1 = sys\&.wlBias->getBias (address1), b2 = sys\&.wlBias->getBias (address2);
772                 rel_bias = exp(b2-b1);
773     } else if (sys\&.useTMMC && sys\&.useWALA) {
774                 // Crossover phase where we use WL but update TMMC collection matrix
775                 const int address1 = sys\&.wlBias->getAddress(sys\&.getTotN()), address2 = sys\&.wlBias->getAddress(nTotFinal);
776                 const double b1 = sys\&.wlBias->getBias (address1), b2 = sys\&.wlBias->getBias (address2);
777                 rel_bias = exp(b2-b1);
778                 sys\&.tmmcBias->updateC (sys\&.getTotN(), nTotFinal, std::min(1\&.0, p_u)); 
779     } else {
780                 // No biasing
781                 rel_bias = 1\&.0;
782     }
783                 
784                 return rel_bias;
785 }
.fi
.SH "Author"
.PP 
Generated automatically by Doxygen for Multicomponent Monte Carlo Simulation from the source code\&.
