.TH "simSystem" 3 "Fri Dec 23 2016" "Version v0.1.0" "Flat-Histogram Monte Carlo Simulation" \" -*- nroff -*-
.ad l
.nh
.SH NAME
simSystem \- 
.PP
System information for the simulation\&.  

.SH SYNOPSIS
.br
.PP
.PP
\fC#include <system\&.h>\fP
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBsimSystem\fP ()"
.br
.ti -1c
.RI "\fBsimSystem\fP (const unsigned int \fBnSpecies\fP, const double \fBbeta\fP, const std::vector< double > \fBbox\fP, const std::vector< double > \fBmu\fP, const std::vector< int > \fBmaxSpecies\fP, const std::vector< int > \fBminSpecies\fP, const int Mtot, const double energyHistDelta=10\&.0, const int max_order=2)"
.br
.RI "\fIInitialize the system\&. \fP"
.ti -1c
.RI "\fB~simSystem\fP ()"
.br
.ti -1c
.RI "bool \fBaddKECorrection\fP ()"
.br
.ti -1c
.RI "void \fBtoggleKE\fP ()"
.br
.RI "\fIToggle KE adjustment to energy setting\&. \fP"
.ti -1c
.RI "void \fBincrementEnergy\fP (const double dU)"
.br
.RI "\fIIncrement the system's energy\&. \fP"
.ti -1c
.RI "void \fBaddPotential\fP (const int spec1, const int spec2, const std::string ppot_name, const std::vector< double > &params, const bool useCellList=false)"
.br
.RI "\fIAdd a pair potential to the system which governs the pair (spec1, spec2)\&. \fP"
.ti -1c
.RI "void \fBprintSnapshot\fP (std::string filename, std::string comment, bool overwrite=true)"
.br
.RI "\fIPrint an XYZ file of the instantaneous system configuration\&. \fP"
.ti -1c
.RI "void \fBinsertAtom\fP (const int typeIndex, \fBatom\fP *newAtom, bool override=false)"
.br
.RI "\fIInsert an atom into the system\&. \fP"
.ti -1c
.RI "void \fBdeleteAtom\fP (const int typeIndex, const int atomIndex, bool override=false)"
.br
.RI "\fIDelete an atom from the system\&. \fP"
.ti -1c
.RI "void \fBtranslateAtom\fP (const int typeIndex, const int atomIndex, std::vector< double > oldPos)"
.br
.RI "\fITranslate an atom in the system\&. \fP"
.ti -1c
.RI "void \fBreadConfig\fP (std::string filename)"
.br
.RI "\fIRead an XYZ file as the system's initial configuration\&. \fP"
.ti -1c
.RI "void \fBsetEUB\fP (const std::vector< double > eub)"
.br
.RI "\fIAssign energy upper bound from restart\&. \fP"
.ti -1c
.RI "void \fBsetELB\fP (const std::vector< double > elb)"
.br
.RI "\fIAssign energy lower bound from restart\&. \fP"
.ti -1c
.RI "void \fBcheckEnergyHistogramBounds\fP ()"
.br
.RI "\fIMonitor the energy histogram bounds at each Ntot\&. \fP"
.ti -1c
.RI "void \fBrefineEnergyHistogramBounds\fP ()"
.br
.RI "\fICheck the histogram entries and trim off zero-valued entries and bounds\&. \fP"
.ti -1c
.RI "void \fBrecordEnergyHistogram\fP ()"
.br
.RI "\fIRecord the energy histogram for the system at a given Ntot\&. \fP"
.ti -1c
.RI "void \fBreInitializeEnergyHistogram\fP ()"
.br
.RI "\fIRe-initialize the energy histogram with internal estimates of bounds\&. \fP"
.ti -1c
.RI "void \fBprintEnergyHistogram\fP (const std::string fileName, const bool normalize=true)"
.br
.RI "\fIPrint the (normalized by default) energy histogram for each Ntot\&. \fP"
.ti -1c
.RI "void \fBrestartEnergyHistogram\fP (const std::string prefix)"
.br
.RI "\fIRestart the energy histogram for each Ntot from unnormalized checkpoint\&. \fP"
.ti -1c
.RI "void \fBrefinePkHistogramBounds\fP ()"
.br
.RI "\fICheck the histogram entries and trim off zero-valued entries and bounds\&. \fP"
.ti -1c
.RI "void \fBrecordPkHistogram\fP ()"
.br
.RI "\fIRecord the particle number histogram for the system at a given Ntot\&. \fP"
.ti -1c
.RI "void \fBprintPkHistogram\fP (const std::string fileName, const bool normalize=true)"
.br
.RI "\fIPrint the (normalized by default) particle number histogram for each Ntot\&. \fP"
.ti -1c
.RI "void \fBrestartPkHistogram\fP (const std::string prefix)"
.br
.RI "\fIRestart the particle histogram for each Ntot from unnormalized checkpoint\&. \fP"
.ti -1c
.RI "void \fBrecordExtMoments\fP ()"
.br
.RI "\fIRecord the extensive moment at a given Ntot\&. \fP"
.ti -1c
.RI "void \fBprintExtMoments\fP (const std::string fileName, const bool normalize=true)"
.br
.RI "\fIPrint the (normalized by default) extensive energy histogram for each Ntot\&. \fP"
.ti -1c
.RI "void \fBrestartExtMoments\fP (const std::string prefix, const std::vector< double > &ctr)"
.br
.RI "\fIRestart the extensive energy histogram for each Ntot from unnormalized checkpoint\&. \fP"
.ti -1c
.RI "void \fBstartWALA\fP (const double lnF, const double g, const double s, const int Mtot)"
.br
.RI "\fIStart using Wang-Landau and instantiate the bias object\&. \fP"
.ti -1c
.RI "void \fBstopWALA\fP ()"
.br
.RI "\fIStop using Wang-Landau and free the bias object\&. \fP"
.ti -1c
.RI "void \fBstartTMMC\fP (const long long int \fBtmmcSweepSize\fP, const int Mtot)"
.br
.RI "\fIStart using TMMC and instantiate the bias object\&. \fP"
.ti -1c
.RI "void \fBstopTMMC\fP ()"
.br
.RI "\fIStop using TMMC and free the bias object\&. \fP"
.ti -1c
.RI "void \fBsetTotNBounds\fP (const std::vector< int > &bounds)"
.br
.RI "\fISet the bounds on the total number of particles in a system\&. \fP"
.ti -1c
.RI "void \fBincrementMState\fP ()"
.br
.RI "\fIIncrease the expanded ensemble state of the system by 1\&. \fP"
.ti -1c
.RI "void \fBdecrementMState\fP ()"
.br
.RI "\fIDecrease the expanded ensemble state of the system by 1\&. \fP"
.ti -1c
.RI "bool \fBpotentialIsSet\fP (const int spec1, const int spec2)"
.br
.RI "\fIBoolean which returns whether or not a pair has had its potential specified by the user yet\&. \fP"
.ti -1c
.RI "const int \fBnSpecies\fP ()"
.br
.RI "\fIReturn the number of different species in the system\&. \fP"
.ti -1c
.RI "const int \fBmaxSpecies\fP (const int index)"
.br
.RI "\fIReturns the absolute maximum number of a given species type allowed in the system\&. \fP"
.ti -1c
.RI "const int \fBminSpecies\fP (const int index)"
.br
.RI "\fIReturns the absolute minimum number of a given species type allowed in the system\&. \fP"
.ti -1c
.RI "const int \fBtotNMax\fP ()"
.br
.RI "\fIReturn upper bound on the total number of atoms in the system\&. \fP"
.ti -1c
.RI "const int \fBtotNMin\fP ()"
.br
.RI "\fIReturn lower bound on the total number of atoms in the system\&. \fP"
.ti -1c
.RI "const int \fBgetTotN\fP ()"
.br
.RI "\fIReturn a sum of the total number of atoms currently in the system\&. \fP"
.ti -1c
.RI "const int \fBgetMaxOrder\fP ()"
.br
.RI "\fIReturn the max order the extensive moments are being stored out to\&. \fP"
.ti -1c
.RI "const int \fBgetCurrentM\fP ()"
.br
.RI "\fIReturn the system's current expanded ensemble fractional state\&. \fP"
.ti -1c
.RI "const int \fBgetTotalM\fP ()"
.br
.RI "\fIReturn the total number of fractional states available to species in the expanded ensemble\&. \fP"
.ti -1c
.RI "const int \fBgetFractionalAtomType\fP ()"
.br
.RI "\fIReturn the atom type of the fractional atom\&. \fP"
.ti -1c
.RI "const double \fBenergy\fP ()"
.br
.RI "\fIReturn the system's instantaneous energy\&. \fP"
.ti -1c
.RI "const double \fBscratchEnergy\fP ()"
.br
.RI "\fIRecalculate the energy of the system from scratch\&. \fP"
.ti -1c
.RI "const double \fBbeta\fP ()"
.br
.RI "\fIReturn 1/kT\&. \fP"
.ti -1c
.RI "const double \fBmu\fP (const int index)"
.br
.RI "\fIReturn the chemical potential for a given species' index\&. \fP"
.ti -1c
.RI "const double \fBmass\fP (const int index)"
.br
.RI "\fIReturn the mass of a given species' index\&. \fP"
.ti -1c
.RI "const std::vector< double > \fBextMomCounter\fP ()"
.br
.RI "\fIGet counter for extensive moments needed for restarting system from a checkpoint\&. \fP"
.ti -1c
.RI "const std::vector< double > \fBbox\fP ()"
.br
.RI "\fIReturn the system box dimensions\&. \fP"
.ti -1c
.RI "std::vector< double > \fBgetELB\fP ()"
.br
.RI "\fIReturns current tally of energy min at each Ntot for checkpointing\&. \fP"
.ti -1c
.RI "std::vector< double > \fBgetEUB\fP ()"
.br
.RI "\fIReturns current tally of energy max at each Ntot for checkpointing\&. \fP"
.ti -1c
.RI "std::vector< \fBatom\fP * > \fBgetNeighborAtoms\fP (const unsigned int typeIndexA, const unsigned int typeIndexB, \fBatom\fP *_atom)"
.br
.RI "\fIReturn the list of neighbors of type A, around a particle of type B which is passed\&. \fP"
.ti -1c
.RI "\fBtmmc\fP * \fBgetTMMCBias\fP ()"
.br
.RI "\fIReturn pointer to the TMMC bias\&. \fP"
.ti -1c
.RI "\fBwala\fP * \fBgetWALABias\fP ()"
.br
.RI "\fIReturn pointer to the Wang-Landau bias\&. \fP"
.ti -1c
.RI "\fBatom\fP * \fBgetFractionalAtom\fP ()"
.br
.RI "\fIReturns a pointer the atom in the system that is currently only fractionally inserted/deleted\&. \fP"
.in -1c
.SS "Data Fields"

.in +1c
.ti -1c
.RI "bool \fBuseTMMC\fP"
.br
.RI "\fILogical stating whether or not to use TMMC biasing\&. \fP"
.ti -1c
.RI "bool \fBuseWALA\fP"
.br
.RI "\fILogical stating whether or not to use Wang-Landau biasing\&. \fP"
.ti -1c
.RI "bool \fBrestartFromWALA\fP"
.br
.ti -1c
.RI "bool \fBrestartFromTMMC\fP"
.br
.RI "\fIFlags to restart from WALA or TMMC initially\&. \fP"
.ti -1c
.RI "long long int \fBtmmcSweepSize\fP"
.br
.RI "\fISize of a sweep in TMMC\&. \fP"
.ti -1c
.RI "long long int \fBtotalTMMCSweeps\fP"
.br
.RI "\fITotal number of sweeps to perform during TMMC\&. \fP"
.ti -1c
.RI "long long int \fBwlSweepSize\fP"
.br
.RI "\fISize of Wang-Landau sweep\&. \fP"
.ti -1c
.RI "long long int \fBnCrossoverVisits\fP"
.br
.RI "\fINumber of crossovers that must occur before switching from WALA to TMMC\&. \fP"
.ti -1c
.RI "double \fBlnF_start\fP"
.br
.ti -1c
.RI "double \fBlnF_end\fP"
.br
.RI "\fIStarting and ending lnF for Wang-Landau\&. \fP"
.ti -1c
.RI "double \fBwala_g\fP"
.br
.ti -1c
.RI "double \fBwala_s\fP"
.br
.RI "\fIWang-Landau g and s factors\&. \fP"
.ti -1c
.RI "\fBtmmc\fP * \fBtmmcBias\fP"
.br
.RI "\fITMMC biasing function\&. \fP"
.ti -1c
.RI "\fBwala\fP * \fBwlBias\fP"
.br
.RI "\fIWL biasing function\&. \fP"
.ti -1c
.RI "std::string \fBrestartFromWALAFile\fP"
.br
.ti -1c
.RI "std::string \fBrestartFromTMMCFile\fP"
.br
.RI "\fIFiles to restart from WALA or TMMC initially\&. \fP"
.ti -1c
.RI "std::vector< int > \fBnumSpecies\fP"
.br
.RI "\fITotal number of each type of atom the system contains\&. \fP"
.ti -1c
.RI "std::vector< std::vector< \fBatom\fP > > \fBatoms\fP"
.br
.RI "\fIAtoms in a matrix by type, and particle index, respectively that a system CAN hold but not all are actually 'in' the system\&. \fP"
.ti -1c
.RI "std::vector< std::vector
.br
< std::shared_ptr
.br
< \fBpairPotential\fP > > > \fBppot\fP"
.br
.RI "\fIMatrix of pair potentials for atom types i, j\&. \fP"
.ti -1c
.RI "std::vector< \fBcompositeBarrier\fP > \fBspeciesBarriers\fP"
.br
.RI "\fIBarriers, if any, for each species\&. \fP"
.in -1c
.SH "Detailed Description"
.PP 
System information for the simulation\&. 
.PP
Definition at line 26 of file system\&.h\&.
.SH "Constructor & Destructor Documentation"
.PP 
.SS "simSystem::simSystem ()\fC [inline]\fP"

.PP
Definition at line 28 of file system\&.h\&.
.PP
.nf
28 {;}
.fi
.SS "simSystem::simSystem (const unsigned intnSpecies, const doublebeta, const std::vector< double >box, const std::vector< double >mu, const std::vector< int >maxSpecies, const std::vector< int >minSpecies, const intMtot, const doubleenergyHistDelta = \fC10\&.0\fP, const intmax_order = \fC2\fP)"

.PP
Initialize the system\&. Sets the use of both WL and TMMC biasing to false\&.
.PP
\fBParameters:\fP
.RS 4
\fInSpecies\fP Number of unqiue species types to allow in the system 
.br
\fIbeta\fP Inverse temperature (1/kT) 
.br
\fIbox\fP Box dimensions [x, y, z] 
.br
\fImu\fP Chemical potential of each species 
.br
\fImaxSpecies\fP Maximum number of each species to allow in the system 
.br
\fIMtot\fP Total number of expanded ensemble states 
.br
\fIenergyHistDelta\fP Bin width of energy histogram at each Ntot (optional, default = 10\&.0) 
.br
\fImax_order\fP Maximum order to record correlations to (default = 2) 
.RE
.PP

.PP
Definition at line 428 of file system\&.cpp\&.
.PP
References atoms, beta(), box(), lnF_end, lnF_start, maxSpecies(), minSpecies(), mu(), nCrossoverVisits, nSpecies(), numSpecies, ppot, restartFromTMMC, restartFromTMMCFile, restartFromWALA, restartFromWALAFile, speciesBarriers, SYS_FAILURE, totalTMMCSweeps, useTMMC, useWALA, wala_g, wala_s, and wlSweepSize\&.
.PP
.nf
428                                                                                                                                                                                                                                                                               {
429     if ((box\&.size() != 3) || (nSpecies != mu\&.size()) || (maxSpecies\&.size() != nSpecies)) {
430         throw customException ("Invalid system initialization parameters");
431         exit(SYS_FAILURE);
432     } else {
433         nSpecies_ = nSpecies;
434         maxSpecies_ = maxSpecies;
435         minSpecies_ = minSpecies;
436         box_ = box;
437         mu_ = mu;
438         beta_ = beta;
439     }
440 
441     lnF_start = 1\&.0; // default for lnF_start
442     lnF_end = 2\&.0e-18; // default for lnF_end
443     toggleKE_ = false; //default, do NOT adjust energy by kinetic contribution of 3/2kT per atom (just record PE)
444     totalTMMCSweeps = 0;
445     wlSweepSize = 0;
446     wala_g = 0\&.5;
447     wala_s = 0\&.8;
448     nCrossoverVisits = 5;
449 
450     if (max_order < 1){
451         throw customException ("max_order must be >= 1");
452     }
453     max_order_ = max_order;
454 
455     if (energyHistDelta <= 0) {
456         throw customException ("energyHistDelta must be > 0");
457     }
458     energyHistDelta_ = energyHistDelta;
459 
460     for (unsigned int i = 0; i < 3; ++i) {
461         if (box_[i] <= 0) {
462             throw customException ("Box dimensions must be > 0");
463         }
464     }
465 
466     if (Mtot < 1) {
467         throw customException ("Total fractional states for expanded ensemble must be >= 1");
468     }
469     Mtot_ = Mtot;
470     Mcurrent_ = 0; // always start from fully inserted state
471 
472     try {
473         ppot\&.resize(nSpecies);
474     } catch (std::exception &e) {
475         throw customException (e\&.what());
476     }
477     for (unsigned int i = 0; i < nSpecies; ++i) {
478         try {
479             ppot[i]\&.resize(nSpecies);
480         } catch (std::exception &e) {
481             throw customException (e\&.what());
482         }
483     }
484 
485     try {
486         mass_\&.resize(nSpecies, 1\&.0);
487     } catch (std::exception &e) {
488         throw customException (e\&.what());
489     }
490 
491     try {
492         ppotSet_\&.resize(nSpecies);
493     } catch (std::exception &e) {
494         throw customException (e\&.what());
495     }
496     for (unsigned int i = 0; i < nSpecies; ++i) {
497         try {
498             ppotSet_[i]\&.resize(nSpecies, false);
499         } catch (std::exception &e) {
500             throw customException (e\&.what());
501         }
502     }
503 
504     // Wall potentials for each species, if there are any?
505     try {
506         speciesBarriers\&.resize(nSpecies);
507     } catch (std::exception &e) {
508         throw customException (e\&.what());
509     }
510 
511     // Prepare vectors and matrices for cell lists\&.
512     // It is crucial to reserve the correct number of cellLists in advance
513     // since cellListsByPairType uses the addresses of cellLists\&. Otherwise,
514     // if dynamic memory reallocation takes place, the pointers do not
515     // correspond to initial values anymore, causing the simulation to crash\&.
516     cellLists_\&.reserve(nSpecies_*nSpecies_);
517 
518     try {
519         useCellList_\&.resize(nSpecies);
520         cellListsByPairType_\&.resize(nSpecies);
521     } catch (std::exception &e) {
522         throw customException (e\&.what());
523     }
524     for (unsigned int i = 0; i < nSpecies; ++i) {
525         try {
526             useCellList_[i]\&.resize(nSpecies);
527             cellListsByPairType_[i]\&.assign(nSpecies, NULL);
528         } catch (std::exception &e) {
529             throw customException (e\&.what());
530         }
531     }
532 
533     totN_ = 0;
534         try {
535         numSpecies\&.resize(nSpecies, 0);
536     } catch (std::exception &e) {
537         throw customException (e\&.what());
538     }
539 
540     try {
541         atoms\&.resize(nSpecies);
542     } catch (std::exception &e) {
543         throw customException (e\&.what());
544     }
545     for (unsigned int i = 0; i < nSpecies; ++i) {
546         if (minSpecies_[i] < 0) {
547             throw customException ("Min species < 0");
548         }
549         if (maxSpecies_[i] < minSpecies_[i]) {
550             throw customException ("Max species < Min species");
551         }
552         try {
553             atoms[i]\&.resize(maxSpecies_[i]);
554         } catch (std::exception &e) {
555             throw customException (e\&.what());
556         }
557     }
558 
559     energy_ = 0\&.0;
560 
561     useTMMC = false;
562     useWALA = false;
563 
564     totNBounds_\&.resize(2, 0);
565     for (unsigned int i = 0; i < nSpecies_; ++i) {
566         totNBounds_[0] += minSpecies_[i];
567         totNBounds_[1] += maxSpecies_[i];
568     }
569 
570     // allocate space for average U storage matrix - Shen and Errington method implies this size is always the same for
571     // both single and multicomponent mixtures
572     long long int size = totNBounds_[1] - totNBounds_[0] + 1;
573     energyHistogram_lb_\&.resize(size, -5\&.0);
574     energyHistogram_ub_\&.resize(size, 5\&.0);
575     for (unsigned int i = 0; i < size; ++i) {
576         energyHistogram_lb_[i] = -5\&.0;
577         energyHistogram_ub_[i] = 5\&.0;
578         try {
579             dynamic_one_dim_histogram dummyHist (energyHistogram_lb_[i], energyHistogram_ub_[i], energyHistDelta_);
580             energyHistogram_\&.resize(i+1, dummyHist);
581         } catch (std::bad_alloc &ba) {
582             throw customException ("Out of memory for energy histogram for each Ntot");
583         }
584     }
585     pkHistogram_\&.resize(0);
586     dynamic_one_dim_histogram dummyPkHist (0\&.0, totNBounds_[1], 1\&.0);
587     try {
588         std::vector < dynamic_one_dim_histogram > tmp (totNBounds_[1]-totNBounds_[0]+1, dummyPkHist);
589         pkHistogram_\&.resize(nSpecies_, tmp);
590     } catch (std::bad_alloc &ba) {
591         throw customException ("Out of memory for particle histogram for each Ntot");
592     }
593 
594     // initialize moments
595     std::vector < double > lbn (6,0), ubn(6,0);
596     std::vector < long long unsigned int > nbn (6,0);
597     ubn[0] = nSpecies_-1;
598     ubn[1] = max_order_;
599     ubn[2] = nSpecies_-1;
600     ubn[3] = max_order_;
601     ubn[4] = max_order_;
602     ubn[5] = totNBounds_[1]-totNBounds_[0];
603 
604     nbn[0] = nSpecies_;
605     nbn[1] = max_order_+1;
606     nbn[2] = nSpecies_;
607     nbn[3] = max_order_+1;
608     nbn[4] = max_order_+1;
609     nbn[5] = size;
610 
611     histogram hnn (lbn, ubn, nbn);
612     extensive_moments_ = hnn;
613 
614     restartFromWALA = false;
615     restartFromTMMC = false;
616     restartFromWALAFile = "";
617     restartFromTMMCFile = "";
618 }
.fi
.SS "simSystem::~simSystem ()"

.PP
Definition at line 407 of file system\&.cpp\&.
.PP
References tmmcBias, useTMMC, useWALA, and wlBias\&.
.PP
.nf
407                        {
408     if (useTMMC) {
409         delete tmmcBias;
410     }
411     if (useWALA) {
412         delete wlBias;
413     }
414 }
.fi
.SH "Member Function Documentation"
.PP 
.SS "bool simSystem::addKECorrection ()\fC [inline]\fP"

.PP
Definition at line 32 of file system\&.h\&.
.PP
Referenced by initialize(), deleteParticle::make(), insertParticle::make(), and setup()\&.
.PP
.nf
32 { return toggleKE_; }
.fi
.SS "void simSystem::addPotential (const intspec1, const intspec2, const std::stringppot_name, const std::vector< double > &params, const booluseCellList = \fCfalse\fP)"

.PP
Add a pair potential to the system which governs the pair (spec1, spec2)\&. However, it only stores the pointer so the object must be fixed in memory somewhere else throughout the simulation\&.
.PP
\fBParameters:\fP
.RS 4
\fIspec1\fP Species index 1 (>= 0) 
.br
\fIspec2\fP Species index 2 (>= 0) 
.br
\fIppot_name\fP Name of pair potential 
.br
\fIparams\fP Vector of parameters which define pair potential 
.br
\fIbool\fP Optional argument of whether or not to build and maintain a cell list for this pair (spec1, spec2) 
.RE
.PP

.PP
Definition at line 1205 of file system\&.cpp\&.
.PP
References ppot, SYS_FAILURE, and customException::what()\&.
.PP
Referenced by setPairPotentials()\&.
.PP
.nf
1205                                                                                                                                                      {
1206     if (spec1 >= nSpecies_) {
1207         throw customException ("Trying to define pair potential for species (1) that does not exist yet");
1208     }
1209     if (spec2 >= nSpecies_) {
1210         throw customException ("Trying to define pair potential for species (2) that does not exist yet");
1211     }
1212 
1213     if (ppot_name == "square_well") {
1214         try {
1215             auto pp1 = std::make_shared < squareWell > ();
1216             pp1->setParameters(params);
1217             ppot[spec1][spec2] = pp1;
1218             auto pp2 = std::make_shared < squareWell > ();
1219             pp2->setParameters(params);
1220             ppot[spec2][spec1] = pp2;
1221         } catch (customException &ce) {
1222             std::cerr << ce\&.what() << std::endl;
1223             exit(SYS_FAILURE);
1224         }
1225     } else if (ppot_name == "lennard_jones") {
1226         try {
1227             auto pp1 = std::make_shared < lennardJones > ();
1228             pp1->setParameters(params);
1229             ppot[spec1][spec2] = pp1;
1230             auto pp2 = std::make_shared < lennardJones > ();
1231             pp2->setParameters(params);
1232             ppot[spec2][spec1] = pp2;
1233         } catch (customException &ce) {
1234             std::cerr << ce\&.what() << std::endl;
1235             exit(SYS_FAILURE);
1236         }
1237     } else if (ppot_name == "fs_lennard_jones") {
1238         try {
1239             auto pp1 = std::make_shared < fsLennardJones > ();
1240             pp1->setParameters(params);
1241             ppot[spec1][spec2] = pp1;
1242             auto pp2 = std::make_shared < fsLennardJones > ();
1243             pp2->setParameters(params);
1244             ppot[spec2][spec1] = pp2;
1245         } catch (customException &ce) {
1246             std::cerr << ce\&.what() << std::endl;
1247             exit(SYS_FAILURE);
1248         }
1249     } else if (ppot_name == "hard_sphere") {
1250         try {
1251             auto pp1 = std::make_shared < hardCore > ();
1252             pp1->setParameters(params);
1253             ppot[spec1][spec2] = pp1;
1254             auto pp2 = std::make_shared < hardCore > ();
1255             pp2->setParameters(params);
1256             ppot[spec2][spec1] = pp2;
1257         } catch (customException &ce) {
1258             std::cerr << ce\&.what() << std::endl;
1259             exit(SYS_FAILURE);
1260         }
1261     } else if (ppot_name == "tabulated") {
1262         try {
1263             auto pp1 = std::make_shared < tabulated > ();
1264             pp1->setParameters(params);
1265             ppot[spec1][spec2] = pp1;
1266             auto pp2 = std::make_shared < tabulated > ();
1267             pp2->setParameters(params);
1268             ppot[spec2][spec1] = pp2;
1269         } catch (customException &ce) {
1270             std::cerr << ce\&.what() << std::endl;
1271             exit(SYS_FAILURE);
1272         }
1273     } else {
1274         std::cerr << "Unrecognized pair potential name for species " << spec1 << ", " << spec2 << std::endl;
1275         exit(SYS_FAILURE);
1276     }
1277 
1278     ppotSet_[spec1][spec2] = true;
1279     ppotSet_[spec2][spec1] = true;
1280 
1281     if (useCellList) {
1282         std::cout << "Setting up cell list for interactions between type " << spec1 << " and " << spec2 << std::endl;
1283         // add creation of cell lists
1284         if ((ppot[spec1][spec2]->rcut() > box_[0]/3\&.0) || (ppot[spec1][spec2]->rcut() > box_[1]/3\&.0) || (ppot[spec1][spec2] ->rcut() > box_[2]/3\&.0)) {
1285             std::cerr << "Cutoff (" << ppot[spec1][spec2]->rcut() << ") larger than 1\&.0/3\&.0 boxsize, disabling cell lists for this interaction\&." << std::endl;
1286             useCellList_[spec1][spec2] = false;
1287             useCellList_[spec2][spec1] = false;
1288         } else {
1289             std::cout << "Creating Cell list with rcut = " << ppot[spec1][spec2]->rcut() << std::endl;
1290             useCellList_[spec1][spec2] = true;
1291             useCellList_[spec2][spec1] = true;
1292 
1293             std::vector <atom*> dummyList(0);
1294 
1295             if (cellListsByPairType_[spec1][spec2] == NULL) {
1296                 cellLists_\&.push_back(cellList(box_, ppot[spec1][spec2]->rcut(), dummyList));
1297                 cellListsByPairType_[spec1][spec2] = &cellLists_[cellLists_\&.size()-1];
1298             }
1299             if (cellListsByPairType_[spec2][spec1] == NULL) {
1300                 cellLists_\&.push_back(cellList(box_, ppot[spec2][spec1]->rcut(), dummyList));
1301                 cellListsByPairType_[spec2][spec1] = &cellLists_[cellLists_\&.size()-1];
1302             }
1303         }
1304     } else {
1305         useCellList_[spec1][spec2] = false;
1306         useCellList_[spec2][spec1] = false;
1307     }
1308 }
.fi
.SS "const double simSystem::beta ()\fC [inline]\fP"

.PP
Return 1/kT\&. 
.PP
Definition at line 87 of file system\&.h\&.
.PP
Referenced by aggVolBias3::make(), deleteParticle::make(), translateParticle::make(), swapParticles::make(), insertParticle::make(), and simSystem()\&.
.SS "const std::vector< double > simSystem::box ()\fC [inline]\fP"

.PP
Return the system box dimensions\&. 
.PP
Definition at line 104 of file system\&.h\&.
.PP
Referenced by checkBounds(), initialize(), aggVolBias3::make(), translateParticle::make(), deleteParticle::make(), swapParticles::make(), insertParticle::make(), setup(), and simSystem()\&.
.SS "void simSystem::checkEnergyHistogramBounds ()"

.PP
Monitor the energy histogram bounds at each Ntot\&. 
.PP
Definition at line 847 of file system\&.cpp\&.
.PP
Referenced by performCrossover(), and performWALA()\&.
.PP
.nf
847                                             {
848     if (totN_ >= totNBounds_[0] && totN_ <= totNBounds_[1]) {
849         const int address = totN_-totNBounds_[0];
850         energyHistogram_lb_[address] = std::min(energyHistogram_lb_[address], energy_);
851         energyHistogram_ub_[address] = std::max(energyHistogram_ub_[address], energy_);
852     }
853 }
.fi
.SS "void simSystem::decrementMState ()"

.PP
Decrease the expanded ensemble state of the system by 1\&. Accounts for the periodicity of [0, M) 
.PP
Definition at line 16 of file system\&.cpp\&.
.PP
.nf
16                                  {
17     Mcurrent_--;
18     if (Mcurrent_ < 0) {
19         Mcurrent_ += Mtot_;
20     }
21 }
.fi
.SS "void simSystem::deleteAtom (const inttypeIndex, const intatomIndex, booloverride = \fCfalse\fP)"

.PP
Delete an atom from the system\&. Does all the bookkeepping behind the scenes\&.
.PP
\fBParameters:\fP
.RS 4
\fItypeIndex\fP What type the atom is (>= 0) 
.br
\fIatomIndex\fP Which atom \fIindex\fP of type typeIndex to destroy (>= 0) 
.br
\fIOptional\fP override command which allows the system to delete a particle even it goes below the minimum allowed\&. E\&.g\&. during a swap move\&. 
.RE
.PP

.PP
Definition at line 238 of file system\&.cpp\&.
.PP
References atoms, atom::mState, numSpecies, and cellList::swapAndDeleteParticle()\&.
.PP
Referenced by deleteParticle::make(), swapParticles::make(), and readConfig()\&.
.PP
.nf
238                                                                                    {
239     if (typeIndex < nSpecies_ && typeIndex >= 0) {
240         if ((numSpecies[typeIndex] > minSpecies_[typeIndex]) || ((numSpecies[typeIndex] == minSpecies_[typeIndex]) && (Mcurrent_ > 0)) || override) {
241             if (override) {
242                 // doing a swap move
243                 if (Mtot_ > 1) {
244                     // expanded ensemble and not necessarily deleting the partial atom
245 
246                     int end = numSpecies[typeIndex] - 1;
247                     if (fractionalAtomType_ == typeIndex && Mcurrent_ > 0) {
248                         // we are deleting a particle which has to watch out for the partial atom
249                         end++;
250                     }
251 
252                     if (atoms[typeIndex][atomIndex]\&.mState == 0) {
253                         // if we are removing a "full" particle, have to decrement Ntot, else not
254                         numSpecies[typeIndex]--;
255                         totN_--;
256                     } else {
257                         // but if removing the partial particle, M is affected
258                         Mcurrent_ = 0; // regardless of how M was originally, the partial particle is now "entirely" gone
259                     }
260 
261                     bool replace = false;
262                     if (&atoms[typeIndex][end] == fractionalAtom_) {
263                         // then the fractional atom is about to be used to replace a "full" one
264                         replace = true;
265                     }
266 
267                     // have to entirely remove the particle
268                     for (unsigned int i = 0; i < nSpecies_; ++i) {
269                         if (useCellList_[typeIndex][i]) {
270                             cellList* cl = cellListsByPairType_[typeIndex][i];
271                             cl->swapAndDeleteParticle(&atoms[typeIndex][atomIndex], &atoms[typeIndex][end]);
272                         }
273                     }
274 
275                     atoms[typeIndex][atomIndex] = atoms[typeIndex][end];    // "replacement" operation
276 
277                     if (replace) {
278                         fractionalAtom_ = &atoms[typeIndex][atomIndex]; // update the pointer if necessary
279                     }
280                 } else {
281                     // no expanded ensemble, just delete particle from appropriate cell list
282                     for (unsigned int i = 0; i < nSpecies_; ++i) {
283                         if (useCellList_[typeIndex][i]) {
284                             cellList* cl = cellListsByPairType_[typeIndex][i];
285                             cl->swapAndDeleteParticle(&atoms[typeIndex][atomIndex], &atoms[typeIndex][numSpecies[typeIndex] - 1]);
286                         }
287                     }
288 
289                     atoms[typeIndex][atomIndex] = atoms[typeIndex][numSpecies[typeIndex] - 1];    // "replacement" operation
290                     numSpecies[typeIndex]--;
291                     totN_--;
292                 }
293             } else {
294                 // not doing a swap move, just a "regular" deletion
295                 if (Mtot_ > 1) {
296                     // expanded ensemble
297                     if (Mcurrent_ == 1) {
298                         // when we delete this atom, it is entirely gone
299 
300                         // first ensure the system pointer is correct if currently a partially inserted atom
301                         if (fractionalAtom_ != &atoms[typeIndex][atomIndex] || typeIndex != fractionalAtomType_) {
302                             throw customException ("Fractional atom pointer does not point to atom belived to be inserted");
303                         }
304 
305                         // decrement expanded state
306                         fractionalAtom_->mState = 0;
307                         Mcurrent_ = 0;
308 
309                         // since deleting partial particle, do not update Ntot, etc\&.
310                         // however, do have to remove from cellLists
311                         int end = numSpecies[typeIndex]; // includes space for the partially inserted one currently in cellList
312                         for (unsigned int i = 0; i < nSpecies_; ++i) {
313                             if (useCellList_[typeIndex][i]) {
314                                 cellList* cl = cellListsByPairType_[typeIndex][i];
315                                 cl->swapAndDeleteParticle(&atoms[typeIndex][atomIndex], &atoms[typeIndex][end]);
316                             }
317                         }
318 
319                         atoms[typeIndex][atomIndex] = atoms[typeIndex][end];    // "replacement" operation
320 
321                     } else if (Mcurrent_ == 0) {
322                         // have to decrement Ntot, but keep in cell lists
323                         numSpecies[typeIndex]--;
324                         totN_--;
325 
326                         // this is a new fractional atom
327                         fractionalAtom_ = &atoms[typeIndex][atomIndex];
328                         fractionalAtomType_ = typeIndex;
329 
330                         // decrement expanded state
331                         fractionalAtom_->mState = Mtot_-1;
332                         Mcurrent_ = Mtot_-1;
333                     } else {
334                         // further deleting an atom that already partially exists in the system, but remains in cell lists
335 
336                         // first ensure the system pointer is correct if currently a partially inserted atom
337                         if (fractionalAtom_ != &atoms[typeIndex][atomIndex] || typeIndex != fractionalAtomType_) {
338                             throw customException ("Fractional atom pointer does not point to atom belived to be inserted");
339                         }
340 
341                         // decrement expanded state
342                         fractionalAtom_->mState -= 1;
343                         Mcurrent_ -= 1;
344                     }
345                 } else {
346                     // no expanded ensemble, just delete particle from appropriate cell list
347                     for (unsigned int i = 0; i < nSpecies_; ++i) {
348                         if (useCellList_[typeIndex][i]) {
349                             cellList* cl = cellListsByPairType_[typeIndex][i];
350                             cl->swapAndDeleteParticle(&atoms[typeIndex][atomIndex], &atoms[typeIndex][numSpecies[typeIndex] - 1]);
351                         }
352                     }
353 
354                     atoms[typeIndex][atomIndex] = atoms[typeIndex][numSpecies[typeIndex] - 1];    // "replacement" operation
355                     numSpecies[typeIndex]--;
356                     totN_--;
357                 }
358             }
359         } else {
360             throw customException ("System going below minimum allowable number of atoms, cannot delete an atom of type index "+std::to_string(typeIndex));
361         }
362     } else {
363         throw customException ("That species index does not exist, cannot delete an atom");
364     }
365 }
.fi
.SS "const double simSystem::energy ()\fC [inline]\fP"

.PP
Return the system's instantaneous energy\&. 
.PP
Definition at line 84 of file system\&.h\&.
.PP
Referenced by sanityChecks()\&.
.SS "const std::vector< double > simSystem::extMomCounter ()\fC [inline]\fP"

.PP
Get counter for extensive moments needed for restarting system from a checkpoint\&. 
.PP
Definition at line 103 of file system\&.h\&.
.PP
References histogram::getCounter()\&.
.PP
Referenced by checkpoint::dump()\&.
.SS "const int simSystem::getCurrentM ()\fC [inline]\fP"

.PP
Return the system's current expanded ensemble fractional state\&. 
.PP
Definition at line 80 of file system\&.h\&.
.PP
Referenced by calculateBias(), aggVolBias3::make(), translateParticle::make(), deleteParticle::make(), insertParticle::make(), swapParticles::make(), moves::makeMove(), performCrossover(), performTMMC(), performWALA(), and sanityChecks()\&.
.SS "std::vector< double > simSystem::getELB ()\fC [inline]\fP"

.PP
Returns current tally of energy min at each Ntot for checkpointing\&. 
.PP
Definition at line 105 of file system\&.h\&.
.PP
Referenced by checkpoint::dump()\&.
.SS "std::vector< double > simSystem::getEUB ()\fC [inline]\fP"

.PP
Returns current tally of energy max at each Ntot for checkpointing\&. 
.PP
Definition at line 106 of file system\&.h\&.
.PP
Referenced by checkpoint::dump()\&.
.SS "\fBatom\fP* simSystem::getFractionalAtom ()\fC [inline]\fP"

.PP
Returns a pointer the atom in the system that is currently only fractionally inserted/deleted\&. 
.PP
Definition at line 110 of file system\&.h\&.
.PP
Referenced by deleteParticle::make(), translateParticle::make(), swapParticles::make(), insertParticle::make(), and sanityChecks()\&.
.SS "const int simSystem::getFractionalAtomType ()\fC [inline]\fP"

.PP
Return the atom type of the fractional atom\&. 
.PP
Definition at line 82 of file system\&.h\&.
.PP
Referenced by aggVolBias3::make(), translateParticle::make(), swapParticles::make(), moves::makeMove(), and sanityChecks()\&.
.SS "const int simSystem::getMaxOrder ()\fC [inline]\fP"

.PP
Return the max order the extensive moments are being stored out to\&. 
.PP
Definition at line 78 of file system\&.h\&.
.PP
Referenced by restartExtMoments()\&.
.SS "std::vector< \fBatom\fP * > simSystem::getNeighborAtoms (const unsigned inttypeIndexA, const unsigned inttypeIndexB, \fBatom\fP *_atom)"

.PP
Return the list of neighbors of type A, around a particle of type B which is passed\&. 
.PP
\fBParameters:\fP
.RS 4
\fItypeIndexA\fP Index of first atom type 
.br
\fItypeIndexB\fP Index of second atom type 
.br
\fIatom\fP Pointer to atom to find neighbors around
.RE
.PP
\fBReturns:\fP
.RS 4
neighbor_list 
.RE
.PP

.PP
Definition at line 1484 of file system\&.cpp\&.
.PP
References atoms, cellList::calcIndex(), cellList::cells, cellList::neighbours, numSpecies, and atom::pos\&.
.PP
Referenced by deleteParticle::make(), translateParticle::make(), swapParticles::make(), and insertParticle::make()\&.
.PP
.nf
1484                                                                                                                          {
1485     std::vector < atom* > neighbors;
1486 
1487     int end = numSpecies[typeIndexA];
1488     if (Mcurrent_ > 0 && typeIndexA == fractionalAtomType_) {
1489         // account for partial atom too
1490         end++;
1491     }
1492     neighbors\&.reserve(end);
1493 
1494     // if no cell lists are defined for this interaction, return all particles
1495     if (!useCellList_[typeIndexA][typeIndexB]) {
1496         for (unsigned int i = 0; i < end; ++i) {
1497             if (_atom != &atoms[typeIndexA][i]) { // watch out for self in case typeA = typeB
1498                 neighbors\&.push_back(&atoms[typeIndexA][i]);
1499             }
1500         }
1501     } else if (useCellList_[typeIndexA][typeIndexB]) {
1502         cellList* cl = cellListsByPairType_[typeIndexA][typeIndexB];
1503         const unsigned int cellIndex = cl->calcIndex(_atom->pos[0], _atom->pos[1], _atom->pos[2]);
1504 
1505         // loop over own cell
1506         for (unsigned int i = 0; i < cl->cells[cellIndex]\&.size(); ++i) {
1507             if (_atom != cl->cells[cellIndex][i]) {
1508                 neighbors\&.push_back(cl->cells[cellIndex][i]);
1509             }
1510         }
1511 
1512         // loop over neighboring cells
1513         for (unsigned int i = 0; i < cl->neighbours[cellIndex]\&.size(); ++i) {
1514             const unsigned int neighborCellIndex = cl->neighbours[cellIndex][i];
1515             for (unsigned int j = 0; j < cl->cells[neighborCellIndex]\&.size(); ++j) {
1516                 if (_atom != cl->cells[neighborCellIndex][j]) {
1517                     neighbors\&.push_back(cl->cells[neighborCellIndex][j]);
1518                 }
1519             }
1520         }
1521     }
1522 
1523     return neighbors;
1524 }
.fi
.SS "\fBtmmc\fP * simSystem::getTMMCBias ()"

.PP
Return pointer to the TMMC bias\&. Return a pointer to the TMMC biasing object, if using TMMC, else throws an exception\&.
.PP
\fBReturns:\fP
.RS 4
tmmc Pointer to TMMC biasing object being used\&. 
.RE
.PP

.PP
Definition at line 1674 of file system\&.cpp\&.
.PP
References tmmcBias, and useTMMC\&.
.PP
Referenced by checkpoint::dump(), checkpoint::load(), performCrossover(), and performTMMC()\&.
.PP
.nf
1674                               {
1675     if (useTMMC == true) {
1676         return tmmcBias;
1677     } else {
1678         throw customException ("Not using TMMC");
1679     }
1680 }
.fi
.SS "const int simSystem::getTotalM ()\fC [inline]\fP"

.PP
Return the total number of fractional states available to species in the expanded ensemble\&. 
.PP
Definition at line 81 of file system\&.h\&.
.PP
Referenced by initialize(), initializeSystemBarriers(), checkpoint::load(), deleteParticle::make(), insertParticle::make(), moves::makeMove(), performCrossover(), performTMMC(), performWALA(), sanityChecks(), and setup()\&.
.SS "const int simSystem::getTotN ()\fC [inline]\fP"

.PP
Return a sum of the total number of atoms currently in the system\&. 
.PP
Definition at line 77 of file system\&.h\&.
.PP
Referenced by calculateBias(), aggVolBias3::make(), deleteParticle::make(), translateParticle::make(), insertParticle::make(), swapParticles::make(), and sanityChecks()\&.
.SS "\fBwala\fP * simSystem::getWALABias ()"

.PP
Return pointer to the Wang-Landau bias\&. Return a pointer to the TMMC biasing object, if using TMMC, else throws an exception\&.
.PP
\fBReturns:\fP
.RS 4
wala Pointer to WALA biasing object being used\&. 
.RE
.PP

.PP
Definition at line 1687 of file system\&.cpp\&.
.PP
References useWALA, and wlBias\&.
.PP
Referenced by checkpoint::dump(), checkpoint::load(), aggVolBias3::make(), translateParticle::make(), deleteParticle::make(), swapParticles::make(), insertParticle::make(), performCrossover(), and performWALA()\&.
.PP
.nf
1687                               {
1688     if (useWALA == true) {
1689         return wlBias;
1690     } else {
1691         throw customException ("Not using WALA");
1692     }
1693 }
.fi
.SS "void simSystem::incrementEnergy (const doubledU)\fC [inline]\fP"

.PP
Increment the system's energy\&. 
.PP
Definition at line 34 of file system\&.h\&.
.PP
Referenced by aggVolBias3::make(), translateParticle::make(), deleteParticle::make(), insertParticle::make(), and swapParticles::make()\&.
.SS "void simSystem::incrementMState ()"

.PP
Increase the expanded ensemble state of the system by 1\&. Accounts for the periodicity of [0, M) 
.PP
Definition at line 6 of file system\&.cpp\&.
.PP
.nf
6                                  {
7     Mcurrent_++;
8     if (Mcurrent_ == Mtot_) {
9         Mcurrent_ = 0;
10     }
11 }
.fi
.SS "void simSystem::insertAtom (const inttypeIndex, \fBatom\fP *newAtom, booloverride = \fCfalse\fP)"

.PP
Insert an atom into the system\&. Does all the bookkeepping behind the scenes\&.
.PP
\fBParameters:\fP
.RS 4
\fItypeIndex\fP What type the atom is (>= 0) 
.br
\fInewAtom\fP Pointer to new atom\&. A copy is stored in the system so the original may be destroyed\&. 
.br
\fIoverride\fP Override command that prevents the expanded ensemble state from being changed\&. Used during swap moves where 'insertions' are temporary\&. 
.RE
.PP

.PP
Definition at line 137 of file system\&.cpp\&.
.PP
References atoms, cellList::insertParticle(), atom::mState, and numSpecies\&.
.PP
Referenced by insertParticle::make(), swapParticles::make(), and readConfig()\&.
.PP
.nf
137                                                                              {
138     if (typeIndex < nSpecies_ && typeIndex >= 0) {
139         if (numSpecies[typeIndex] < maxSpecies_[typeIndex]) {
140             if (Mtot_ > 1 && !override) {
141                 // expanded ensemble behavior, "normal" insertion and deletion
142                 if (Mcurrent_ > 0) { // further inserting an atom that already partially exists in the system
143                     // ensure the system pointer is correct if currently a partially inserted atom
144                     if (fractionalAtom_ != newAtom || typeIndex != fractionalAtomType_) {
145                         throw customException ("Fractional atom pointer does not point to atom believed to be inserted");
146                     }
147 
148                     // increment expanded state
149                     fractionalAtom_->mState++;
150                     Mcurrent_++;
151 
152                     // check if now fully inserted
153                     if (fractionalAtom_->mState == Mtot_) {
154                         fractionalAtom_->mState = 0;
155                         Mcurrent_ = 0;
156                         totN_++;
157                         numSpecies[typeIndex]++;
158                     }
159                 } else {
160                     // inserting a new atom for the first time
161                     atoms[typeIndex][numSpecies[typeIndex]] = (*newAtom);
162 
163                     // assign fractional atom
164                     fractionalAtom_ = &atoms[typeIndex][numSpecies[typeIndex]];
165                     fractionalAtomType_ = typeIndex;
166 
167                     // increment expanded state
168                     fractionalAtom_->mState = 1;
169                     Mcurrent_ = 1;
170 
171                     // add particle into appropriate cell lists
172                     for (unsigned int i = 0; i < nSpecies_; ++i) {
173                         if (useCellList_[typeIndex][i]) {
174                             cellList* cl = cellListsByPairType_[typeIndex][i];
175                             cl->insertParticle(&atoms[typeIndex][numSpecies[typeIndex]]); // numSpecies[typeIndex] is the number of fully inserted ones, this partially inserted one comes after that
176                         }
177                     }
178                 }
179             } else if (Mtot_ > 1 && override) {
180                 // expanded ensemble behavior, but now amidst a "swap move" rather than an actual insertion or deletion\&.
181                 // for this, insertions involve just putting the atom "back" into the system / cellLists after being artificially completely removed
182 
183                 // ensure we insert at the proper "end"
184                 int end = numSpecies[typeIndex];
185                 if (Mcurrent_ > 0 && typeIndex == fractionalAtomType_ && newAtom->mState == 0) {
186                     end++; // insert after the partially inserted one since newAtom is NOT the partial one
187                 }
188                 atoms[typeIndex][end] = (*newAtom);
189 
190                 // if we just added a partially inserted/deleted particle back to the system, need to update the pointer
191                 if (atoms[typeIndex][end]\&.mState != 0) {
192                     fractionalAtom_ = &atoms[typeIndex][end];
193                     fractionalAtomType_ = typeIndex;
194 
195                     // set the system's mState back to that of the atom just inserted, iff it was the partial one
196                     Mcurrent_ = atoms[typeIndex][end]\&.mState;
197                 } else {
198                     totN_++; // we just added a "full" atom
199                     numSpecies[typeIndex]++; // we just added a "full" atom
200                 }
201 
202                 // put newAtom into the cell lists whatever its state
203                 for (unsigned int i = 0; i < nSpecies_; ++i) {
204                     if (useCellList_[typeIndex][i]) {
205                         cellList* cl = cellListsByPairType_[typeIndex][i];
206                         cl->insertParticle(&atoms[typeIndex][end]);
207                     }
208                 }
209             } else {
210                 // direct insertion (no expanded ensemble)
211                 atoms[typeIndex][numSpecies[typeIndex]] = (*newAtom);
212                 numSpecies[typeIndex]++;
213                 totN_++;
214 
215                 // add particle into appropriate cell lists
216                 for (unsigned int i = 0; i < nSpecies_; ++i) {
217                     if (useCellList_[typeIndex][i]) {
218                         cellList* cl = cellListsByPairType_[typeIndex][i];
219                         cl->insertParticle(&atoms[typeIndex][numSpecies[typeIndex] - 1]);
220                     }
221                 }
222             }
223         } else {
224             throw customException ("Reached upper bound, cannot insert an atom of type index "+std::to_string(typeIndex));
225         }
226     } else {
227         throw customException ("That species index does not exist, cannot insert an atom");
228     }
229 }
.fi
.SS "const double simSystem::mass (const intindex)\fC [inline]\fP"

.PP
Return the mass of a given species' index\&. 
.PP
Definition at line 89 of file system\&.h\&.
.PP
Referenced by deleteParticle::make(), and insertParticle::make()\&.
.SS "const int simSystem::maxSpecies (const intindex)"

.PP
Returns the absolute maximum number of a given species type allowed in the system\&. 
.PP
\fBParameters:\fP
.RS 4
\fIindex\fP Species index to query
.RE
.PP
\fBReturns:\fP
.RS 4
maxSpecies Maximum number of them allowed 
.RE
.PP

.PP
Definition at line 1640 of file system\&.cpp\&.
.PP
Referenced by insertParticle::make(), and simSystem()\&.
.PP
.nf
1640                                                 {
1641     if (maxSpecies_\&.begin() == maxSpecies_\&.end()) {
1642             throw customException ("No species in the system, cannot report a maximum");
1643         }
1644         if (maxSpecies_\&.size() <= index) {
1645             throw customException ("System does not contain that species, cannot report a maximum");
1646         } else  {
1647             return maxSpecies_[index];
1648         }
1649 }
.fi
.SS "const int simSystem::minSpecies (const intindex)"

.PP
Returns the absolute minimum number of a given species type allowed in the system\&. 
.PP
\fBParameters:\fP
.RS 4
\fIindex\fP Species index to query
.RE
.PP
\fBReturns:\fP
.RS 4
minSpecies Minimum number of them allowed 
.RE
.PP

.PP
Definition at line 1658 of file system\&.cpp\&.
.PP
Referenced by deleteParticle::make(), and simSystem()\&.
.PP
.nf
1658                                                 {
1659     if (minSpecies_\&.begin() == minSpecies_\&.end()) {
1660             throw customException ("No species in the system, cannot report a minimum");
1661         }
1662         if (minSpecies_\&.size() <= index) {
1663             throw customException ("System does not contain that species, cannot report a minimum");
1664         } else  {
1665             return minSpecies_[index];
1666         }
1667 }
.fi
.SS "const double simSystem::mu (const intindex)\fC [inline]\fP"

.PP
Return the chemical potential for a given species' index\&. 
.PP
Definition at line 88 of file system\&.h\&.
.PP
Referenced by deleteParticle::make(), insertParticle::make(), and simSystem()\&.
.SS "const int simSystem::nSpecies ()\fC [inline]\fP"

.PP
Return the number of different species in the system\&. 
.PP
Definition at line 72 of file system\&.h\&.
.PP
Referenced by checkBounds(), initialize(), initializeSystemBarriers(), aggVolBias3::make(), deleteParticle::make(), translateParticle::make(), insertParticle::make(), swapParticles::make(), sanityChecks(), setPairPotentials(), setup(), and simSystem()\&.
.SS "bool simSystem::potentialIsSet (const intspec1, const intspec2)\fC [inline]\fP"

.PP
Boolean which returns whether or not a pair has had its potential specified by the user yet\&. 
.PP
Definition at line 70 of file system\&.h\&.
.PP
Referenced by checkBounds(), and readConfig()\&.
.SS "void simSystem::printEnergyHistogram (const std::stringfileName, const boolnormalize = \fCtrue\fP)"

.PP
Print the (normalized by default) energy histogram for each Ntot\&. 
.PP
\fBParameters:\fP
.RS 4
\fIfileName\fP Prefix of the filename to load from 
.br
\fInormalize\fP Whether or not to normalize the histogram (default=true) 
.RE
.PP

.PP
Definition at line 911 of file system\&.cpp\&.
.PP
Referenced by checkpoint::dump(), and performTMMC()\&.
.PP
.nf
911                                                                                     {
912     std::ofstream of;
913     std::string name = fileName+"\&.dat";
914     of\&.open(name\&.c_str(), std::ofstream::out);
915     of << "# <P(U)> as a function of N_tot\&." << std::endl;
916     of << "# number_of_species: " << nSpecies_ << std::endl;
917     of << "# species_total_upper_bound: " << totNBounds_[1] << std::endl;
918     of << "# species_total_lower_bound: " << totNBounds_[0] << std::endl;
919     double V = box_[0]*box_[1]*box_[2];
920     of << "# volume: " << std::setprecision(15) << V << std::endl;
921     of << "# Bin widths for each" << std::endl;
922     for (std::vector < dynamic_one_dim_histogram >::iterator it = energyHistogram_\&.begin(); it != energyHistogram_\&.end(); ++it) {
923         of << it->get_delta() << "\t";
924     }
925     of << std::endl;
926     of << "# Bin lower bound for each" << std::endl;
927     for (std::vector < dynamic_one_dim_histogram >::iterator it = energyHistogram_\&.begin(); it != energyHistogram_\&.end(); ++it) {
928         of << it->get_lb() << "\t";
929     }
930     of << std::endl;
931     of << "# Bin upper bound for each" << std::endl;
932     for (std::vector < dynamic_one_dim_histogram >::iterator it = energyHistogram_\&.begin(); it != energyHistogram_\&.end(); ++it) {
933         of << it->get_ub() << "\t";
934     }
935     of << std::endl;
936     if (normalize) {
937         of << "# Normalized histogram for each" << std::endl;
938         for (std::vector < dynamic_one_dim_histogram >::iterator it = energyHistogram_\&.begin(); it != energyHistogram_\&.end(); ++it) {
939             std::deque <double> h = it->get_hist();
940             double sum = 0\&.0;
941             for (std::deque <double>::iterator it2 = h\&.begin(); it2 != h\&.end(); ++it2) {
942                 sum += *it2;
943             }
944             for (std::deque <double>::iterator it2 = h\&.begin(); it2 != h\&.end(); ++it2) {
945                 of << std::setprecision(15) << *it2/sum << "\t";
946             }
947             of << std::endl;
948         }
949     } else {
950         of << "# Unnormalized histogram for each" << std::endl;
951         for (std::vector < dynamic_one_dim_histogram >::iterator it = energyHistogram_\&.begin(); it != energyHistogram_\&.end(); ++it) {
952             std::deque <double> h = it->get_hist();
953             for (std::deque <double>::iterator it2 = h\&.begin(); it2 != h\&.end(); ++it2) {
954                 of << std::setprecision(15) << *it2 << "\t";
955             }
956             of << std::endl;
957         }
958     }
959     of\&.close();
960 }
.fi
.SS "void simSystem::printExtMoments (const std::stringfileName, const boolnormalize = \fCtrue\fP)"

.PP
Print the (normalized by default) extensive energy histogram for each Ntot\&. 
.PP
\fBParameters:\fP
.RS 4
\fIfileName\fP Name of the file to print to 
.br
\fInormalize\fP Whether or not to normalize the histogram (default=true) 
.RE
.PP

.PP
Definition at line 655 of file system\&.cpp\&.
.PP
References histogram::getAddress(), histogram::getCounter(), and histogram::getRawHistogram()\&.
.PP
Referenced by checkpoint::dump(), and performTMMC()\&.
.PP
.nf
655                                                                                {
656     std::ofstream of;
657     std::string name = fileName+"\&.dat";
658     of\&.open(name\&.c_str(), std::ofstream::out);
659     of << "# <N_i^j*N_k^m*U^p> as a function of N_tot\&." << std::endl;
660     of << "# number_of_species: " << nSpecies_ << std::endl;
661     of << "# max_order: " << max_order_ << std::endl;
662     of << "# species_total_upper_bound: " << totNBounds_[1] << std::endl;
663     of << "# species_total_lower_bound: " << totNBounds_[0] << std::endl;
664     double V = box_[0]*box_[1]*box_[2];
665     of << "# volume: " << std::setprecision(15) << V << std::endl;
666     of << "#\tN_tot\t";
667     for (unsigned int i = 0; i < nSpecies_; ++i) {
668         for (unsigned int j = 0; j <= max_order_; ++j) {
669             for (unsigned int k = 0; k < nSpecies_; ++k) {
670                 for (unsigned int m = 0; m <= max_order_; ++m) {
671                     for (unsigned int p = 0; p <= max_order_; ++p) {
672                         of << "N_"+std::to_string(i+1)+"^"+std::to_string(j)+"*N_"+std::to_string(k+1)+"^"+std::to_string(m)+"*U^"+std::to_string(p)+"\t";
673                     }
674                 }
675             }
676         }
677     }
678     of << std::endl;
679     std::vector <double> h = extensive_moments_\&.getRawHistogram ();
680     std::vector <double> ctr = extensive_moments_\&.getCounter ();
681     std::vector <double> coords (6,0);
682     long unsigned int idx = 0;
683     if (normalize) {
684         for (unsigned int n = 0; n < totNBounds_[1]-totNBounds_[0]+1; ++n) {
685             of << n+totNBounds_[0] << "\t";
686             coords[5] = n;
687             for (unsigned int i = 0; i < nSpecies_; ++i) {
688                 coords[0] = i;
689                 for (unsigned int j = 0; j <= max_order_; ++j) {
690                     coords[1] = j;
691                     for (unsigned int k = 0; k < nSpecies_; ++k) {
692                         coords[2] = k;
693                         for (unsigned int m = 0; m <= max_order_; ++m) {
694                             coords[3] = m;
695                             for (unsigned int p = 0; p <= max_order_; ++p) {
696                                 coords[4] = p;
697                                 idx = extensive_moments_\&.getAddress(coords);
698                                 of << std::setprecision(15) << h[idx]/ctr[idx] << "\t";
699                             }
700                         }
701                     }
702                 }
703             }
704             of << std::endl;
705         }
706     } else {
707         for (unsigned int n = 0; n < totNBounds_[1]-totNBounds_[0]+1; ++n) {
708             of << n+totNBounds_[0] << "\t";
709             coords[5] = n;
710             for (unsigned int i = 0; i < nSpecies_; ++i) {
711                 coords[0] = i;
712                 for (unsigned int j = 0; j <= max_order_; ++j) {
713                     coords[1] = j;
714                     for (unsigned int k = 0; k < nSpecies_; ++k) {
715                         coords[2] = k;
716                         for (unsigned int m = 0; m <= max_order_; ++m) {
717                             coords[3] = m;
718                             for (unsigned int p = 0; p <= max_order_; ++p) {
719                                 coords[4] = p;
720                                 idx = extensive_moments_\&.getAddress(coords);
721                                 of << std::setprecision(15) << h[idx] << "\t";
722                             }
723                         }
724                     }
725                 }
726             }
727             of << std::endl;
728         }
729     }
730     of\&.close();
731 }
.fi
.SS "void simSystem::printPkHistogram (const std::stringfileName, const boolnormalize = \fCtrue\fP)"

.PP
Print the (normalized by default) particle number histogram for each Ntot\&. 
.PP
\fBParameters:\fP
.RS 4
\fIfileName\fP Prefix of filename to print to 
.br
\fInormalize\fP Whether or not to normalize the histogram (default=true) 
.RE
.PP

.PP
Definition at line 1064 of file system\&.cpp\&.
.PP
Referenced by checkpoint::dump(), and performTMMC()\&.
.PP
.nf
1064                                                                                 {
1065     for (unsigned int i = 0; i < nSpecies_; ++i) {
1066         std::ofstream of;
1067         std::string name = fileName+"_"+std::to_string(i+1)+"\&.dat";
1068         of\&.open(name\&.c_str(), std::ofstream::out);
1069         of << "# <P(N_" << i+1 << ")> as a function of N_tot\&." << std::endl;
1070         of << "# number_of_species: " << nSpecies_ << std::endl;
1071         of << "# species_total_upper_bound: " << totNBounds_[1] << std::endl;
1072         of << "# species_total_lower_bound: " << totNBounds_[0] << std::endl;
1073         double V = box_[0]*box_[1]*box_[2];
1074         of << "# volume: " << std::setprecision(15) << V << std::endl;
1075         of << "# Bin widths for each species index " << std::endl;
1076         for (std::vector < dynamic_one_dim_histogram >::iterator it = pkHistogram_[i]\&.begin(); it != pkHistogram_[i]\&.end(); ++it) {
1077             of << it->get_delta() << "\t";
1078         }
1079         of << std::endl;
1080         of << "# Bin lower bound for each species index " << std::endl;
1081         for (std::vector < dynamic_one_dim_histogram >::iterator it = pkHistogram_[i]\&.begin(); it != pkHistogram_[i]\&.end(); ++it) {
1082             of << it->get_lb() << "\t";
1083         }
1084         of << std::endl;
1085         of << "# Bin upper bound for each species index " << std::endl;
1086         for (std::vector < dynamic_one_dim_histogram >::iterator it = pkHistogram_[i]\&.begin(); it != pkHistogram_[i]\&.end(); ++it) {
1087             of << it->get_ub() << "\t";
1088         }
1089         of << std::endl;
1090         if (normalize) {
1091             of << "# Normalized histogram for each species index " << std::endl;
1092             for (std::vector < dynamic_one_dim_histogram >::iterator it = pkHistogram_[i]\&.begin(); it != pkHistogram_[i]\&.end(); ++it) {
1093                 std::deque <double> h = it->get_hist();
1094                 double sum = 0\&.0;
1095                 for (std::deque <double>::iterator it2 = h\&.begin(); it2 != h\&.end(); ++it2) {
1096                     sum += *it2;
1097                 }
1098                 for (std::deque <double>::iterator it2 = h\&.begin(); it2 != h\&.end(); ++it2) {
1099                     of << std::setprecision(15) << *it2/sum << "\t";
1100                 }
1101                 of << std::endl;
1102             }
1103         } else {
1104             of << "# Unnormalized histogram for each species index " << std::endl;
1105             for (std::vector < dynamic_one_dim_histogram >::iterator it = pkHistogram_[i]\&.begin(); it != pkHistogram_[i]\&.end(); ++it) {
1106                 std::deque <double> h = it->get_hist();
1107                 for (std::deque <double>::iterator it2 = h\&.begin(); it2 != h\&.end(); ++it2) {
1108                     of << std::setprecision(15) << *it2 << "\t";
1109                 }
1110                 of << std::endl;
1111             }
1112         }
1113         of\&.close();
1114     }
1115 }
.fi
.SS "void simSystem::printSnapshot (std::stringfilename, std::stringcomment, booloverwrite = \fCtrue\fP)"

.PP
Print an XYZ file of the instantaneous system configuration\&. This can be read in at a later time via estart() function\&.
.PP
\fBParameters:\fP
.RS 4
\fIfilename\fP File to store XYZ coordinates to 
.br
\fIcomment\fP Comment line for the file 
.br
\fIoverwrite\fP Flag to overwrite file if it already exists or to append (default = true, overwrite) 
.RE
.PP

.PP
Definition at line 1317 of file system\&.cpp\&.
.PP
References atoms, and numSpecies\&.
.PP
Referenced by checkpoint::dump(), performTMMC(), and setup()\&.
.PP
.nf
1317                                                                                     {
1318     if (overwrite) {
1319         std::ofstream outfile (filename\&.c_str(), std::ofstream::trunc);
1320         int tot = 0;
1321         for (unsigned int j = 0; j < nSpecies_; ++j) {
1322             tot += numSpecies[j]; // only count fully inserted species
1323         }
1324 
1325         outfile << tot << std::endl;
1326         outfile << comment << std::endl;
1327 
1328         for (unsigned int j = 0; j < nSpecies_; ++j) {
1329             long long int num = numSpecies[j];
1330             if (Mcurrent_ > 1 && fractionalAtomType_ == j) {
1331                 num += 1; // account for partially inserted atom
1332             }
1333             for (unsigned int i = 0; i < num; ++i) {
1334                 if (atoms[j][i]\&.mState == 0) { // only print fully inserted atoms
1335                     outfile << j << "\t" <<  std::setprecision(15) << atoms[j][i]\&.pos[0] << "\t" << std::setprecision(15) << atoms[j][i]\&.pos[1] << "\t" << std::setprecision(15) << atoms[j][i]\&.pos[2] << std::endl;
1336                 }
1337             }
1338         }
1339 
1340         outfile\&.close();
1341     } else {
1342         std::ofstream outfile (filename\&.c_str(), std::ofstream::out | std::ofstream::app);
1343         int tot = 0;
1344         for (unsigned int j = 0; j < nSpecies_; ++j) {
1345             tot += numSpecies[j]; // only count fully inserted species
1346         }
1347 
1348         outfile << tot << std::endl;
1349         outfile << comment << std::endl;
1350 
1351         for (unsigned int j = 0; j < nSpecies_; ++j) {
1352             long long int num = numSpecies[j];
1353             if (Mcurrent_ > 1 && fractionalAtomType_ == j) {
1354                 num += 1; // account for partially inserted atom
1355             }
1356             for (unsigned int i = 0; i < num; ++i) {
1357                 if (atoms[j][i]\&.mState == 0) { // only print fully inserted atoms
1358                     outfile << j << "\t" <<  std::setprecision(15) << atoms[j][i]\&.pos[0] << "\t" << std::setprecision(15) << atoms[j][i]\&.pos[1] << "\t" << std::setprecision(15) << atoms[j][i]\&.pos[2] << std::endl;
1359                 }
1360             }
1361         }
1362 
1363         outfile\&.close();
1364     }
1365 }
.fi
.SS "void simSystem::readConfig (std::stringfilename)"

.PP
Read an XYZ file as the system's initial configuration\&. Note that the number of species, etc\&. must already be specified in the constructor\&. Will also reset and calculate the energy from scratch so these potentials should be set before reading in a restart file\&.
.PP
\fBParameters:\fP
.RS 4
\fIfilename\fP File to read XYZ coordinates from 
.RE
.PP

.PP
Definition at line 1373 of file system\&.cpp\&.
.PP
References deleteAtom(), getTimeStamp(), insertAtom(), numSpecies, potentialIsSet(), scratchEnergy(), SYS_FAILURE, and customException::what()\&.
.PP
Referenced by checkpoint::load(), and setup()\&.
.PP
.nf
1373                                               {
1374     std::cout << "Reading initial configuration from " << filename << std::endl;
1375 
1376     std::ifstream infile (filename\&.c_str());
1377     if (!infile\&.is_open()) {
1378         std::cerr << "Cannot open " << filename << std::endl;
1379         exit(SYS_FAILURE);
1380     }
1381 
1382     std::string line;
1383     std::vector < atom > sysatoms;
1384     std::vector < int > index;
1385     int natoms = 0;
1386     int lineIndex = 0;
1387     while(std::getline(infile,line)) {
1388         std::stringstream lineStream(line);
1389         if (lineIndex == 0) {
1390             lineStream >> natoms;
1391             index\&.resize(natoms);
1392             sysatoms\&.resize(natoms);
1393         } else if (lineIndex > 1) {
1394             lineStream >> index[lineIndex-2] >> sysatoms[lineIndex-2]\&.pos[0] >> sysatoms[lineIndex-2]\&.pos[1] >> sysatoms[lineIndex-2]\&.pos[2];
1395         }
1396         lineIndex++;
1397     }
1398     infile\&.close();
1399 
1400     // check if within global bounds
1401     if (sysatoms\&.size() > totNBounds_[1] || sysatoms\&.size() < totNBounds_[0]) {
1402         throw customException ("Number of particles ("+std::to_string(sysatoms\&.size())+") in the restart file out of target range ["+std::to_string(totNBounds_[0])+", "+std::to_string(totNBounds_[1])+"]");
1403     }
1404 
1405     // sort by type
1406     std::map < int, int > types;
1407     for (unsigned int j = 0; j < natoms; ++j) {
1408         if (types\&.find(index[j]) != types\&.end()) {
1409             types[index[j]] += 1;
1410         } else {
1411             types[index[j]] = 1;
1412         }
1413     }
1414 
1415     int maxType = -1;
1416     for (std::map<int,int>::iterator it = types\&.begin(); it != types\&.end(); ++it) {
1417         maxType = std::max(maxType, it->first);
1418         if (it->first < 0 || it->first >= nSpecies_) {
1419             throw customException ("Restart file corrupted, types out of range");
1420         }
1421     }
1422 
1423     // check that pair potentials exist so energy can be calculated
1424     for (unsigned int i = 0; i < nSpecies_; ++i) {
1425         for (unsigned int j = 0; j < nSpecies_; ++j) {
1426             if (!potentialIsSet(i, j)) {
1427                 throw customException("Not all pair potentials are set, so cannot initial from file");
1428             }
1429         }
1430     }
1431 
1432     // empty out the system before adding new atoms in - all atoms "fully inserted" so no partial ones to worry about
1433     if (Mcurrent_ != 0) {
1434         throw customException ("System cannot be restarted from "+filename+", for some reason current expanded state != 0");
1435     }
1436     for (unsigned int i = 0; i < nSpecies_; ++i) {
1437         const int ns = numSpecies[i];
1438         for (int j = ns-1; j >=0; --j) {
1439             for (int k = 0; k < Mtot_; ++k) {
1440                 deleteAtom (i, j, true);
1441             }
1442         }
1443     }
1444     if (totN_ != 0) {
1445         throw customException ("total N = "+std::to_string(totN_)+" != 0 after system supposedly emptied");
1446     }
1447     for (unsigned int i = 0; i < nSpecies_; ++i) {
1448         if (numSpecies[i] != 0) {
1449             throw customException ("Number of molecules of species #"+std::to_string(i+1)+" = "+std::to_string(numSpecies[i])+" != 0 after system supposedly emptied");
1450         }
1451     }
1452     if (Mcurrent_ != 0) {
1453         throw customException ("M state != 0 after system supposedly emptied");
1454     }
1455 
1456     energy_ = 0\&.0;
1457     for (unsigned int j = 0; j < sysatoms\&.size(); ++j) {
1458         try {
1459             // "partially" insert each atom so it goes through all the stages
1460             insertAtom (index[j], &sysatoms[j]);
1461             for (unsigned int k = 1; k < Mtot_; ++k) {
1462                 insertAtom (index[j], fractionalAtom_); // this will check that within each species own max and min, global bounds handled above
1463             }
1464         } catch (customException &ce) {
1465             std::string a = "Could not initialize system from restart file, ", b = ce\&.what();
1466             throw customException (a+b);
1467         }
1468     }
1469 
1470     // recalculate system's initial energy
1471     energy_ = scratchEnergy();
1472     std::cout << "Successfully loaded initial configuration from " << filename << " at " << getTimeStamp() << std::endl;
1473 }
.fi
.SS "void simSystem::recordEnergyHistogram ()"

.PP
Record the energy histogram for the system at a given Ntot\&. Only records values when N_tot in range of [min, max]\&. 
.PP
Definition at line 836 of file system\&.cpp\&.
.PP
Referenced by performTMMC()\&.
.PP
.nf
836                                        {
837     // only record if in range (removes equilibration stage to get in this range, if there was any)
838     if (totN_ >= totNBounds_[0] && totN_ <= totNBounds_[1]) {
839         const int address = totN_-totNBounds_[0];
840         energyHistogram_[address]\&.record(energy_);
841     }
842 }
.fi
.SS "void simSystem::recordExtMoments ()"

.PP
Record the extensive moment at a given Ntot\&. 
.PP
Definition at line 623 of file system\&.cpp\&.
.PP
References histogram::increment(), and numSpecies\&.
.PP
Referenced by performTMMC()\&.
.PP
.nf
623                                   {
624     // only record if in range (removes equilibration stage to get in this range, if there was any)
625     if (totN_ >= totNBounds_[0] && totN_ <= totNBounds_[1]) {
626         double val = 0\&.0;
627         std::vector < double > coords (6,0);
628         coords[5] = totN_-totNBounds_[0];
629         for (unsigned int i = 0; i < nSpecies_; ++i) {
630             coords[0] = i;
631             for (unsigned int j = 0; j <= max_order_; ++j) {
632                 coords[1] = j;
633                 for (unsigned int k = 0; k < nSpecies_; ++k) {
634                     coords[2] = k;
635                     for (unsigned int m = 0; m <= max_order_; ++m) {
636                         coords[3] = m;
637                         for (unsigned int p = 0; p <= max_order_; ++p) {
638                             coords[4] = p;
639                             val = pow(numSpecies[i], j)*pow(numSpecies[k], m)*pow(energy_, p);
640                             extensive_moments_\&.increment (coords, val);
641                         }
642                     }
643                 }
644             }
645         }
646     }
647 }
.fi
.SS "void simSystem::recordPkHistogram ()"

.PP
Record the particle number histogram for the system at a given Ntot\&. Only records values when N_tot in range of [min, max]\&. 
.PP
Definition at line 1033 of file system\&.cpp\&.
.PP
References numSpecies\&.
.PP
Referenced by performTMMC()\&.
.PP
.nf
1033                                    {
1034     // only record if in range (removes equilibration stage to get in this range, if there was any)
1035     if (totN_ >= totNBounds_[0] && totN_ <= totNBounds_[1]) {
1036         const int address = totN_-totNBounds_[0];
1037         for (unsigned int i = 0; i < nSpecies_; ++i) {
1038             pkHistogram_[i][address]\&.record(numSpecies[i]);
1039         }
1040     }
1041 }
.fi
.SS "void simSystem::refineEnergyHistogramBounds ()"

.PP
Check the histogram entries and trim off zero-valued entries and bounds\&. 
.PP
Definition at line 858 of file system\&.cpp\&.
.PP
References customException::what()\&.
.PP
Referenced by performTMMC()\&.
.PP
.nf
858                                              {
859     for (std::vector < dynamic_one_dim_histogram >::iterator it = energyHistogram_\&.begin(); it != energyHistogram_\&.end(); ++it) {
860         try {
861             it->trim_edges();
862         } catch (customException &ce) {
863             std::string a = "Unable to trim edges in energyHistogram at each Ntot: ", b = ce\&.what();
864             throw customException (a+b);
865         }
866     }
867 }
.fi
.SS "void simSystem::refinePkHistogramBounds ()"

.PP
Check the histogram entries and trim off zero-valued entries and bounds\&. 
.PP
Definition at line 1046 of file system\&.cpp\&.
.PP
Referenced by performTMMC()\&.
.PP
.nf
1046                                          {
1047     for (std::vector < std::vector < dynamic_one_dim_histogram > >::iterator it = pkHistogram_\&.begin(); it != pkHistogram_\&.end(); ++it) {
1048         for (std::vector < dynamic_one_dim_histogram >::iterator it2 = it->begin(); it2 != it->end(); ++it2) {
1049             try {
1050                 it2->trim_edges();
1051             } catch (customException &ce) {
1052                 throw customException ("Unable to trim edges in pkHistogram at each Ntot");
1053             }
1054         }
1055     }
1056 }
.fi
.SS "void simSystem::reInitializeEnergyHistogram ()"

.PP
Re-initialize the energy histogram with internal estimates of bounds\&. 
.PP
Definition at line 872 of file system\&.cpp\&.
.PP
References totNMax(), and totNMin()\&.
.PP
Referenced by performCrossover()\&.
.PP
.nf
872                                              {
873     double lb = 0\&.0, ub = 0\&.0;
874     if (energyHistogram_lb_\&.size() != energyHistogram_ub_\&.size()) {
875         throw customException ("Bad energy histogram bound sizes");
876     }
877     if (energyHistogram_lb_\&.size() != totNMax() - totNMin() + 1) {
878         throw customException ("Bad energy histogram bound sizes");
879     }
880     for (unsigned int i = 0; i < totNMax() - totNMin() + 1; ++i) {
881         if (energyHistogram_lb_[i] > energyHistogram_ub_[i]) {
882             throw customException ("Bad energy histogram bound sizes");
883         }
884         // "standardize" the bounds against U = 0 for to "align" the bins, already done for pkHistogram
885         // this way the energy is reported as the limit of the edge of the aligned bins
886         if (energyHistogram_lb_[i] < 0) {
887             lb = floor((energyHistogram_lb_[i] - 0\&.0)/energyHistDelta_);
888         } else {
889             lb = ceil((energyHistogram_lb_[i] - 0\&.0)/energyHistDelta_);
890         }
891         if (energyHistogram_ub_[i] < 0) {
892             ub = floor((energyHistogram_ub_[i] - 0\&.0)/energyHistDelta_);
893         } else {
894             ub = ceil((energyHistogram_ub_[i] - 0\&.0)/energyHistDelta_);
895         }
896 
897         try {
898             energyHistogram_[i]\&.reinitialize(lb,ub,energyHistDelta_);
899         } catch (customException &ce) {
900             throw customException ("Unable to reinitialize the energyHistogram");
901         }
902     }
903 }
.fi
.SS "void simSystem::restartEnergyHistogram (const std::stringprefix)"

.PP
Restart the energy histogram for each Ntot from unnormalized checkpoint\&. 
.PP
\fBParameters:\fP
.RS 4
\fIprefix\fP Prefix of the filename to load from 
.RE
.PP

.PP
Definition at line 967 of file system\&.cpp\&.
.PP
References totNMax(), and totNMin()\&.
.PP
Referenced by checkpoint::load()\&.
.PP
.nf
967                                                               {
968     int minBound = 0, maxBound = totNMax() - totNMin() + 1;
969     std::vector < double > lb(maxBound - minBound, 0), ub(maxBound - minBound, 0), delta(maxBound - minBound, 0);
970     std::string fileName = prefix+"\&.dat";
971 
972     std::ifstream infile (fileName\&.c_str());
973     std::string line, tmp = "";
974     int lineIndex = 0;
975     while(std::getline(infile,line)) {
976         std::stringstream lineStream(line);
977         if (lineIndex == 2) {
978             // get upper bound
979             std::getline(lineStream, tmp, ':');
980             std::getline(lineStream, tmp, ':');
981             int high = atoi(tmp\&.c_str());
982             if (high != totNMax()) {
983                 throw customException ("Max bound ("+ std::to_string(high)+") is not Nmax("+std::to_string(totNMax())+"), cannot restart energy histogram from "+fileName);
984             }
985         } else if (lineIndex == 3) {
986             // get lower bound
987             std::getline(lineStream, tmp, ':');
988             std::getline(lineStream, tmp, ':');
989             int low = atoi(tmp\&.c_str());
990             if (low != totNMin()) {
991                 throw customException ("Min bound ("+ std::to_string(low)+") is not Nmin("+std::to_string(totNMin())+"), cannot restart energy histogram from "+fileName);
992             }
993         } else if (lineIndex == 6) {
994             // delta
995             for (unsigned int i = 0; i < maxBound-minBound; ++i) {
996                 lineStream >> delta[i];
997             }
998         } else if (lineIndex == 8) {
999             // lower bound
1000             for (unsigned int i = 0; i < maxBound-minBound; ++i) {
1001                 lineStream >> lb[i];
1002             }
1003         } else if (lineIndex == 10) {
1004             // upper bound
1005             for (unsigned int i = 0; i < maxBound-minBound; ++i) {
1006                 lineStream >> ub[i];
1007             }
1008             // now can reinitialize the histogram
1009             for (unsigned int i = minBound; i < maxBound; ++i) {
1010                 try {
1011                     energyHistogram_[i-minBound]\&.reinitialize(lb[i-minBound], ub[i-minBound], delta[i-minBound]);
1012                 } catch (\&.\&.\&.) {
1013                     throw customException ("Unable to restart energy histogram from "+fileName);
1014                 }
1015             }
1016         } else if (lineIndex >= 12) {
1017             // histogram itself
1018             std::deque <double> h = energyHistogram_[lineIndex-12]\&.get_hist();
1019             for (std::deque <double>::iterator it = h\&.begin(); it != h\&.end(); ++it) {
1020                 lineStream >> *it;
1021             }
1022             energyHistogram_[lineIndex-12]\&.set_hist(h);
1023         }
1024         lineIndex++;
1025     }
1026     infile\&.close();
1027 }
.fi
.SS "void simSystem::restartExtMoments (const std::stringprefix, const std::vector< double > &ctr)"

.PP
Restart the extensive energy histogram for each Ntot from unnormalized checkpoint\&. 
.PP
\fBParameters:\fP
.RS 4
\fIfileName\fP Name of the file to load from 
.br
\fIctr\fP Counter for each point in the histogram 
.RE
.PP

.PP
Definition at line 739 of file system\&.cpp\&.
.PP
References histogram::getAddress(), getMaxOrder(), histogram::getRawHistogram(), histogram::set(), totNMax(), totNMin(), and customException::what()\&.
.PP
Referenced by checkpoint::load()\&.
.PP
.nf
739                                                                                          {
740     std::string fileName = prefix+"\&.dat";
741 
742     std::ifstream infile (fileName\&.c_str());
743     std::string line, tmp = "";
744     int lineIndex = 0, dummy;
745     long long unsigned int idx;
746     std::vector < double > h = extensive_moments_\&.getRawHistogram (), coords (6, 0);
747 
748     while(std::getline(infile,line)) {
749         std::stringstream lineStream(line);
750         if (lineIndex == 1) {
751             std::getline(lineStream, tmp, ':');
752             std::getline(lineStream, tmp, ':');
753             int ns = atoi(tmp\&.c_str());
754             if (ns != nSpecies_) {
755                 throw customException ("Number of speces in restart file ("+ std::to_string(ns)+") is not the same as provided in input ("+std::to_string(nSpecies_)+"), cannot restart extMom from "+fileName);
756             }
757         } else if (lineIndex == 2) {
758             std::getline(lineStream, tmp, ':');
759             std::getline(lineStream, tmp, ':');
760             int mo = atoi(tmp\&.c_str());
761             if (mo != getMaxOrder()) {
762                 throw customException ("Max order ("+ std::to_string(mo)+") is not the same as provided in input ("+std::to_string(getMaxOrder())+"), cannot restart extMom from "+fileName);
763             }
764         } if (lineIndex == 3) {
765             std::getline(lineStream, tmp, ':');
766             std::getline(lineStream, tmp, ':');
767             int high = atoi(tmp\&.c_str());
768             if (high != totNMax()) {
769                 throw customException ("Max bound ("+ std::to_string(high)+") is not Nmax ("+std::to_string(totNMax())+"), cannot restart extMom from "+fileName);
770             }
771         } else if (lineIndex == 4) {
772             std::getline(lineStream, tmp, ':');
773             std::getline(lineStream, tmp, ':');
774             int low = atoi(tmp\&.c_str());
775             if (low != totNMin()) {
776                 throw customException ("Min bound ("+ std::to_string(low)+") is not Nmin ("+std::to_string(totNMin())+"), cannot restart extMom from "+fileName);
777             }
778 
779             // now reinstantiate the histogram
780             std::vector < double > lbn (6,0), ubn(6,0);
781             std::vector < long long unsigned int > nbn (6,0);
782             ubn[0] = nSpecies_-1;
783             ubn[1] = max_order_;
784             ubn[2] = nSpecies_-1;
785             ubn[3] = max_order_;
786             ubn[4] = max_order_;
787             ubn[5] = totNMax()-totNMin();
788 
789             nbn[0] = nSpecies_;
790             nbn[1] = max_order_+1;
791             nbn[2] = nSpecies_;
792             nbn[3] = max_order_+1;
793             nbn[4] = max_order_+1;
794             nbn[5] = totNMax()-totNMin()+1;
795 
796             histogram hnn (lbn, ubn, nbn);
797             extensive_moments_ = hnn;
798         } else if (lineIndex >= 7) {
799             // histogram itself
800             lineStream >> dummy;
801             coords[5] = lineIndex-7;
802             for (unsigned int i = 0; i < nSpecies_; ++i) {
803                 coords[0] = i;
804                 for (unsigned int j = 0; j <= max_order_; ++j) {
805                     coords[1] = j;
806                     for (unsigned int k = 0; k < nSpecies_; ++k) {
807                         coords[2] = k;
808                         for (unsigned int m = 0; m <= max_order_; ++m) {
809                             coords[3] = m;
810                             for (unsigned int p = 0; p <= max_order_; ++p) {
811                                 coords[4] = p;
812                                 idx = extensive_moments_\&.getAddress(coords);
813                                 lineStream >> h[idx];
814                             }
815                         }
816                     }
817                 }
818             }
819         }
820         lineIndex++;
821     }
822     infile\&.close();
823 
824     try {
825         // this checks h and ctr same size, and by extension that h from file has same size as h in system
826         extensive_moments_\&.set(h, ctr);
827     } catch (customException &ce) {
828         throw customException ("Unable to restart extMom from "+fileName+" : "+ce\&.what());
829     }
830 }
.fi
.SS "void simSystem::restartPkHistogram (const std::stringprefix)"

.PP
Restart the particle histogram for each Ntot from unnormalized checkpoint\&. 
.PP
\fBParameters:\fP
.RS 4
\fIprefix\fP Prefix of the filename to load from 
.RE
.PP

.PP
Definition at line 1122 of file system\&.cpp\&.
.PP
References totNMax(), and totNMin()\&.
.PP
Referenced by checkpoint::load()\&.
.PP
.nf
1122                                                           {
1123     for (unsigned int spec = 0; spec < nSpecies_; ++spec) {
1124         int minBound = 0, maxBound = totNMax() - totNMin() + 1;
1125         std::vector < double > lb(maxBound - minBound, 0), ub(maxBound - minBound, 0), delta(maxBound - minBound, 0);
1126         std::string fileName = prefix+"_"+std::to_string(spec+1)+"\&.dat";
1127 
1128         std::ifstream infile (fileName\&.c_str());
1129         std::string line, tmp = "";
1130         int lineIndex = 0;
1131         while(std::getline(infile,line)) {
1132             std::stringstream lineStream(line);
1133             if (lineIndex == 2) {
1134                 // get upper bound
1135                 std::getline(lineStream, tmp, ':');
1136                 std::getline(lineStream, tmp, ':');
1137                 int high = atoi(tmp\&.c_str());
1138                 if (high != totNMax()) {
1139                     throw customException ("Max bound ("+ std::to_string(high)+") is not Nmax("+std::to_string(totNMax())+"), cannot restart particle histogram from "+fileName);
1140                 }
1141             } else if (lineIndex == 3) {
1142                 // get lower bound
1143                 std::getline(lineStream, tmp, ':');
1144                 std::getline(lineStream, tmp, ':');
1145                 int low = atoi(tmp\&.c_str());
1146                 if (low != totNMin()) {
1147                     throw customException ("Min bound ("+ std::to_string(low)+") is not Nmin("+std::to_string(totNMin())+"), cannot restart particle histogram from "+fileName);
1148                 }
1149             } else if (lineIndex == 1) {
1150                 // check the number of species is correct
1151                 std::getline(lineStream, tmp, ':');
1152                 std::getline(lineStream, tmp, ':');
1153                 int ns = atoi(tmp\&.c_str());
1154                 if (ns != nSpecies_) {
1155                     throw customException ("Number of speces in restart file ("+ std::to_string(ns)+") is not the same as provided in input ("+std::to_string(nSpecies_)+"), cannot restart particle histogram from "+fileName);
1156                 }
1157             } else if (lineIndex == 6) {
1158                 // delta
1159                 for (unsigned int i = 0; i < maxBound-minBound; ++i) {
1160                     lineStream >> delta[i];
1161                 }
1162             } else if (lineIndex == 8) {
1163                 // lower bound
1164                 for (unsigned int i = 0; i < maxBound-minBound; ++i) {
1165                     lineStream >> lb[i];
1166                 }
1167             } else if (lineIndex == 10) {
1168                 // upper bound
1169                 for (unsigned int i = 0; i < maxBound-minBound; ++i) {
1170                     lineStream >> ub[i];
1171                 }
1172                 // now can reinitialize the histogram
1173                 for (unsigned int i = minBound; i < maxBound; ++i) {
1174                     try {
1175                         pkHistogram_[spec][i-minBound]\&.reinitialize(lb[i-minBound], ub[i-minBound], delta[i-minBound]);
1176                     } catch (\&.\&.\&.) {
1177                         throw customException ("Unable to restart particle histogram from "+fileName);
1178                     }
1179                 }
1180             } else if (lineIndex >= 12) {
1181                 // histogram itself
1182                 std::deque <double> h = pkHistogram_[spec][lineIndex-12]\&.get_hist();
1183                 for (std::deque <double>::iterator it = h\&.begin(); it != h\&.end(); ++it) {
1184                     lineStream >> *it;
1185                 }
1186                 pkHistogram_[spec][lineIndex-12]\&.set_hist(h);
1187             }
1188             lineIndex++;
1189         }
1190         infile\&.close();
1191     }
1192 }
.fi
.SS "const double simSystem::scratchEnergy ()"

.PP
Recalculate the energy of the system from scratch\&. 
.PP
\fBReturns:\fP
.RS 4
totU Total energy of the system 
.RE
.PP

.PP
Definition at line 1531 of file system\&.cpp\&.
.PP
References atoms, NUM_INFINITY, numSpecies, ppot, speciesBarriers, and customException::what()\&.
.PP
Referenced by readConfig(), and sanityChecks()\&.
.PP
.nf
1531                                        {
1532     double totU = 0\&.0;
1533     double V = 1\&.0;
1534 
1535     for (unsigned int i = 0; i < box_\&.size(); ++i) {
1536         V *= box_[i];
1537     }
1538 
1539     for (unsigned int spec1 = 0; spec1 < nSpecies_; ++spec1) {
1540         int num1 = 0, adj1 = 0;
1541         try {
1542             num1 = numSpecies[spec1];
1543         } catch (customException &ce) {
1544             std::string a = "Cannot recalculate energy from scratch: ", b = ce\&.what();
1545             throw customException (a+b);
1546         }
1547 
1548         // possibly have fractionally inserted atom
1549         if (fractionalAtomType_ == spec1 && Mcurrent_ > 0) {
1550             adj1 = 1;
1551         }
1552 
1553         // wall/barrier interactions
1554         for (unsigned int j = 0; j < num1+adj1; ++j) {
1555             double dU = 0\&.0;
1556             try {
1557                 dU = speciesBarriers[spec1]\&.energy(&atoms[spec1][j], box_);
1558             } catch (customException &ce) {
1559                 std::string a = "Cannot recalculate energy from scratch: ", b = ce\&.what();
1560                 throw customException (a+b);
1561             }
1562             if (dU == NUM_INFINITY) {
1563                 return NUM_INFINITY;
1564             } else {
1565                 totU += dU;
1566             }
1567         }
1568 
1569         // interactions with same type
1570         for (unsigned int j = 0; j < num1+adj1; ++j) {
1571             for (unsigned int k = j+1; k < num1+adj1; ++k) {
1572                 try {
1573                     totU += ppot[spec1][spec1]->energy(&atoms[spec1][j], &atoms[spec1][k], box_);
1574                 } catch (customException &ce) {
1575                     std::string a = "Cannot recalculate energy from scratch: ", b = ce\&.what();
1576                     throw customException (a+b);
1577                 }
1578             }
1579         }
1580 
1581         // add tail correction to potential energy but only for atoms fully inserted
1582 #ifdef FLUID_PHASE_SIMULATIONS
1583         if ((ppot[spec1][spec1]->useTailCorrection) && (num1 > 1)) {
1584             totU += (num1)*0\&.5*ppot[spec1][spec1]->tailCorrection((num1-1)/V);
1585         }
1586 #endif
1587 
1588         // interactions with other unique types
1589         for (unsigned int spec2 = spec1+1; spec2 < nSpecies_; ++spec2) {
1590             int num2 = 0, adj2 = 0;
1591             try {
1592                 num2 = numSpecies[spec2];
1593             } catch (customException &ce) {
1594                 std::string a = "Cannot recalculate energy from scratch: ", b = ce\&.what();
1595                 throw customException (a+b);
1596             }
1597 
1598             if (fractionalAtomType_ == spec2 && Mcurrent_ > 0) {
1599                 adj2 = 1;
1600             }
1601 
1602             for (unsigned int j = 0; j < num1+adj1; ++j) {
1603                 for (unsigned int k = 0; k < num2+adj2; ++k) {
1604                     try {
1605                         totU += ppot[spec1][spec2]->energy(&atoms[spec1][j], &atoms[spec2][k], box_);
1606                     } catch (customException &ce) {
1607                         std::string a = "Cannot recalculate energy from scratch: ", b = ce\&.what();
1608                         throw customException (a+b);
1609                     }
1610                 }
1611             }
1612 
1613             // add tail correction to potential energy but only bewteen fully inserted species
1614 #ifdef FLUID_PHASE_SIMULATIONS
1615             if ((ppot[spec1][spec2]->useTailCorrection) && (num2 > 0) && (num1 > 0)) {
1616                 totU += (num1)*ppot[spec1][spec2]->tailCorrection(num2/V);
1617             }
1618 #endif
1619         }
1620     }
1621 
1622     if (toggleKE_ == true) {
1623         double ns = 0\&.0;
1624         for (unsigned int i = 0; i < nSpecies_; ++i) {
1625             ns += numSpecies[i];
1626         }
1627         totU += 1\&.5/beta_*ns; // only adjust for FULLY-INSERTED ATOMS
1628     }
1629 
1630     return totU;
1631 }
.fi
.SS "void simSystem::setELB (const std::vector< double >elb)\fC [inline]\fP"

.PP
Assign energy lower bound from restart\&. 
.PP
Definition at line 43 of file system\&.h\&.
.PP
Referenced by checkpoint::load()\&.
.SS "void simSystem::setEUB (const std::vector< double >eub)\fC [inline]\fP"

.PP
Assign energy upper bound from restart\&. 
.PP
Definition at line 42 of file system\&.h\&.
.PP
Referenced by checkpoint::load()\&.
.SS "void simSystem::setTotNBounds (const std::vector< int > &bounds)"

.PP
Set the bounds on the total number of particles in a system\&. If not set manually, this defaults to the sum of the bounds given for each individual species in the system\&. Therefore, for single component simulations, this is identical to [minSpecies(0), maxSpecies(0)] unless otherwise set\&. These bounds are intended to be used to create 'windows' so that specific simulations can sample subregions of [minSpecies(0), maxSpecies(0)] and be stitched together with histogram reweighting later\&.
.PP
However, this routine will ALSO cause the system to reevaluate its bounds\&. If these total bounds are outside any individual bound for each atom type, nothing will change\&. However, if the upper bound for total atoms is less than an upper bound for a specific species, that species will have its bounds changed to match the total maximum\&. As a result sys\&.atoms can change so this routine should be called at the beginning of a simulation, never during\&. The total minimum will also be checked\&. That is, if the sum of the minimum for all species is still higher than this, an exception will be throw since the system will never reach such a low density anyway\&. Most likely the user has made a mistake\&.
.PP
Be sure to initialize other objects, such as biases, AFTER this routine has been called since it will adjust the allowable number of particles in the system\&.
.PP
\fBParameters:\fP
.RS 4
\fIbounds\fP Vector of [min, max] 
.RE
.PP

.PP
Definition at line 41 of file system\&.cpp\&.
.PP
References atoms, and numSpecies\&.
.PP
Referenced by initialize()\&.
.PP
.nf
41                                                               {
42     if (bounds\&.size() != 2) {
43         throw customException ("Bounds on total N must supplied as vector of <minN, maxN>");
44     }
45     if (bounds[0] < 0) {
46         throw customException ("Lower bound on total particles must be > 0");
47     }
48     if (bounds[0] > bounds[1]) {
49         throw customException ("Upper bound must be greater than lower bound for total number of particles in the system");
50     }
51     totNBounds_ = bounds;
52 
53     int totMin = 0;
54     for (unsigned int i = 0; i < nSpecies_; ++i) {
55         if (maxSpecies_[i] > totNBounds_[1]) {
56             maxSpecies_[i] = totNBounds_[1];
57         }
58         totMin += minSpecies_[i];
59     }
60     if (totMin > totNBounds_[0]) {
61         // this isn't the end of the world, but for now, alert the user in case something is wrong
62         throw customException ("Lower total N bound is lower than the sum of all individual lower bounds, region cannot be completely sampled");
63     }
64 
65     // recheck bounds and possibly resize
66     int tmpTot = 0;
67     for (unsigned int i = 0; i < nSpecies_; ++i) {
68         if (maxSpecies_[i] < minSpecies_[i]) {
69             throw customException ("Max species < Min species");
70         }
71         try {
72             atoms[i]\&.resize(maxSpecies_[i]);
73         } catch (std::exception &e) {
74             throw customException (e\&.what());
75         }
76         if (numSpecies[i] > (int)atoms[i]\&.size()) {
77             numSpecies[i] = atoms\&.size();
78         }
79         tmpTot += numSpecies[i];
80     }
81     totN_ = tmpTot;
82 
83     // Allocate space for energy matrix - this will only be recorded when the system is within the specific window we are looking for
84     // Because of implementation of Shen and Errington method, this syntax is the same for single and multicomponent systems
85     long long int size = totNBounds_[1] - totNBounds_[0] + 1;
86 
87     energyHistogram_\&.resize(0);
88     energyHistogram_lb_\&.resize(size, -5\&.0);
89     energyHistogram_ub_\&.resize(size, 5\&.0);
90 
91     for (unsigned int i = 0; i < size; ++i) {
92         try {
93             dynamic_one_dim_histogram dummyHist (energyHistogram_lb_[i], energyHistogram_ub_[i], energyHistDelta_);
94             energyHistogram_\&.resize(i+1, dummyHist);
95         } catch (std::bad_alloc &ba) {
96             throw customException ("Out of memory for energy histogram for each Ntot");
97         }
98     }
99 
100     pkHistogram_\&.resize(0);
101     dynamic_one_dim_histogram dummyPkHist (0\&.0, totNBounds_[1], 1\&.0);
102     try {
103         std::vector < dynamic_one_dim_histogram > tmp (totNBounds_[1]-totNBounds_[0]+1, dummyPkHist);
104         pkHistogram_\&.resize(nSpecies_, tmp);
105     } catch (std::bad_alloc &ba) {
106         throw customException ("Out of memory for particle histogram for each Ntot");
107     }
108 
109     // initialize moments
110     std::vector < double > lbn (6,0), ubn(6,0);
111     std::vector < long long unsigned int > nbn (6,0);
112     ubn[0] = nSpecies_-1;
113     ubn[1] = max_order_;
114     ubn[2] = nSpecies_-1;
115     ubn[3] = max_order_;
116     ubn[4] = max_order_;
117     ubn[5] = totNBounds_[1]-totNBounds_[0];
118 
119     nbn[0] = nSpecies_;
120     nbn[1] = max_order_+1;
121     nbn[2] = nSpecies_;
122     nbn[3] = max_order_+1;
123     nbn[4] = max_order_+1;
124     nbn[5] = size;
125 
126     histogram hnn (lbn, ubn, nbn);
127     extensive_moments_ = hnn;
128 }
.fi
.SS "void simSystem::startTMMC (const long long inttmmcSweepSize, const intMtot)"

.PP
Start using TMMC and instantiate the bias object\&. Start using a transition-matrix in the simulation\&.
.PP
Throws an exception if input values are illegal or there is another problem (e\&.g\&. memory)\&.
.PP
\fBParameters:\fP
.RS 4
\fItmmcSweepSize\fP Number of times each transition in the collection matrix must be visited for a 'sweep' to be completed 
.br
\fIMtot\fP Total number of expanded ensemble state allowed within the system 
.RE
.PP

.PP
Definition at line 1720 of file system\&.cpp\&.
.PP
References tmmcBias, useTMMC, and customException::what()\&.
.PP
Referenced by checkpoint::load(), performCrossover(), and performTMMC()\&.
.PP
.nf
1720                                                                             {
1721     // initialize the tmmc object
1722     try {
1723         tmmcBias = new tmmc (totNBounds_[1], totNBounds_[0], Mtot, tmmcSweepSize, box_);
1724     } catch (customException& ce) {
1725         throw customException ("Cannot start TMMC biasing in system: "+std::to_string(*ce\&.what()));
1726     }
1727 
1728     useTMMC = true;
1729 }
.fi
.SS "void simSystem::startWALA (const doublelnF, const doubleg, const doubles, const intMtot)"

.PP
Start using Wang-Landau and instantiate the bias object\&. 
.PP
Definition at line 1703 of file system\&.cpp\&.
.PP
References useWALA, customException::what(), and wlBias\&.
.PP
Referenced by checkpoint::load(), and performWALA()\&.
.PP
.nf
1703                                                                                            {
1704     // initialize the wala object
1705     try {
1706         wlBias = new wala (lnF, g, s, totNBounds_[1], totNBounds_[0], Mtot, box_);
1707     } catch (customException& ce) {
1708         throw customException ("Cannot start Wang-Landau biasing in system: "+std::to_string(*ce\&.what()));
1709     }
1710 
1711     useWALA = true;
1712 }
.fi
.SS "void simSystem::stopTMMC ()\fC [inline]\fP"

.PP
Stop using TMMC and free the bias object\&. 
.PP
Definition at line 63 of file system\&.h\&.
.PP
References tmmcBias, and useTMMC\&.
.PP
Referenced by performTMMC()\&.
.SS "void simSystem::stopWALA ()\fC [inline]\fP"

.PP
Stop using Wang-Landau and free the bias object\&. 
.PP
Definition at line 61 of file system\&.h\&.
.PP
References useWALA, and wlBias\&.
.PP
Referenced by performCrossover()\&.
.SS "void simSystem::toggleKE ()"

.PP
Toggle KE adjustment to energy setting\&. 
.PP
Definition at line 396 of file system\&.cpp\&.
.PP
Referenced by initialize(), and setup()\&.
.PP
.nf
396                          {
397     if (toggleKE_ == false) {
398         toggleKE_ = true;
399     } else {
400         toggleKE_ = false;
401     }
402 }
.fi
.SS "const int simSystem::totNMax ()\fC [inline]\fP"

.PP
Return upper bound on the total number of atoms in the system\&. 
.PP
Definition at line 75 of file system\&.h\&.
.PP
Referenced by insertParticle::make(), performTMMC(), reInitializeEnergyHistogram(), restartEnergyHistogram(), restartExtMoments(), and restartPkHistogram()\&.
.SS "const int simSystem::totNMin ()\fC [inline]\fP"

.PP
Return lower bound on the total number of atoms in the system\&. 
.PP
Definition at line 76 of file system\&.h\&.
.PP
Referenced by deleteParticle::make(), performTMMC(), reInitializeEnergyHistogram(), restartEnergyHistogram(), restartExtMoments(), restartPkHistogram(), and setup()\&.
.SS "void simSystem::translateAtom (const inttypeIndex, const intatomIndex, std::vector< double >oldPos)"

.PP
Translate an atom in the system\&. Does all the bookkeeping behind the scenes\&. Do nothing if there is no cell list defined for the type
.PP
\fBParameters:\fP
.RS 4
\fItypeIndex\fP What type the atom is (>= 0) 
.br
\fIatomIndex\fP Which atom \fIindex\fP of type typeIndex to translate (>= 0) 
.br
\fIoldPos\fP Old position of the atom\&. The current/new position should already be stored in the atom at sys\&.atoms[typeIndex][atomIndex] 
.RE
.PP

.PP
Definition at line 375 of file system\&.cpp\&.
.PP
References atoms, and cellList::translateParticle()\&.
.PP
Referenced by aggVolBias3::make(), and translateParticle::make()\&.
.PP
.nf
375                                                                                                  {
376     if (typeIndex < nSpecies_ && typeIndex >= 0) {
377         if (atomIndex >= 0) {
378             // delete particle from appropriate cell list, move to new one
379             for (unsigned int i=0; i<nSpecies_; i++) {
380                 if (useCellList_[typeIndex][i]) {
381                     cellList* cl = cellListsByPairType_[typeIndex][i];
382                     cl->translateParticle(&atoms[typeIndex][atomIndex], oldPos);
383                 }
384             }
385         } else {
386             throw customException ("Number of those atoms in system is out of bounds, cannot translate an atom of type index "+std::to_string(typeIndex));
387         }
388     } else {
389         throw customException ("That species index does not exist, cannot translate the atom");
390     }
391 }
.fi
.SH "Field Documentation"
.PP 
.SS "std::vector< std::vector < \fBatom\fP > > simSystem::atoms"

.PP
Atoms in a matrix by type, and particle index, respectively that a system CAN hold but not all are actually 'in' the system\&. 
.PP
Definition at line 118 of file system\&.h\&.
.PP
Referenced by deleteAtom(), getNeighborAtoms(), insertAtom(), aggVolBias3::make(), deleteParticle::make(), translateParticle::make(), swapParticles::make(), printSnapshot(), sanityChecks(), scratchEnergy(), setTotNBounds(), simSystem(), and translateAtom()\&.
.SS "double simSystem::lnF_end"

.PP
Starting and ending lnF for Wang-Landau\&. 
.PP
Definition at line 100 of file system\&.h\&.
.PP
Referenced by initialize(), performWALA(), and simSystem()\&.
.SS "double simSystem::lnF_start"

.PP
Definition at line 100 of file system\&.h\&.
.PP
Referenced by initialize(), performWALA(), and simSystem()\&.
.SS "long long int simSystem::nCrossoverVisits"

.PP
Number of crossovers that must occur before switching from WALA to TMMC\&. 
.PP
Definition at line 98 of file system\&.h\&.
.PP
Referenced by initialize(), performCrossover(), and simSystem()\&.
.SS "std::vector< int > simSystem::numSpecies"

.PP
Total number of each type of atom the system contains\&. 
.PP
Definition at line 117 of file system\&.h\&.
.PP
Referenced by deleteAtom(), getNeighborAtoms(), insertAtom(), aggVolBias3::make(), translateParticle::make(), deleteParticle::make(), insertParticle::make(), swapParticles::make(), printSnapshot(), readConfig(), recordExtMoments(), recordPkHistogram(), sanityChecks(), scratchEnergy(), setTotNBounds(), setup(), and simSystem()\&.
.SS "std::vector< std::vector < std::shared_ptr < \fBpairPotential\fP > > > simSystem::ppot"

.PP
Matrix of pair potentials for atom types i, j\&. 
.PP
Definition at line 119 of file system\&.h\&.
.PP
Referenced by addPotential(), checkBounds(), deleteParticle::make(), translateParticle::make(), swapParticles::make(), insertParticle::make(), scratchEnergy(), setPairPotentials(), and simSystem()\&.
.SS "bool simSystem::restartFromTMMC"

.PP
Flags to restart from WALA or TMMC initially\&. 
.PP
Definition at line 93 of file system\&.h\&.
.PP
Referenced by checkpoint::checkpoint(), initialize(), performTMMC(), and simSystem()\&.
.SS "std::string simSystem::restartFromTMMCFile"

.PP
Files to restart from WALA or TMMC initially\&. 
.PP
Definition at line 115 of file system\&.h\&.
.PP
Referenced by initialize(), performTMMC(), and simSystem()\&.
.SS "bool simSystem::restartFromWALA"

.PP
Definition at line 93 of file system\&.h\&.
.PP
Referenced by initialize(), performWALA(), and simSystem()\&.
.SS "std::string simSystem::restartFromWALAFile"

.PP
Definition at line 115 of file system\&.h\&.
.PP
Referenced by initialize(), performWALA(), and simSystem()\&.
.SS "std::vector< \fBcompositeBarrier\fP > simSystem::speciesBarriers"

.PP
Barriers, if any, for each species\&. 
.PP
Definition at line 120 of file system\&.h\&.
.PP
Referenced by initializeSystemBarriers(), deleteParticle::make(), translateParticle::make(), insertParticle::make(), swapParticles::make(), scratchEnergy(), and simSystem()\&.
.SS "\fBtmmc\fP* simSystem::tmmcBias"

.PP
TMMC biasing function\&. 
.PP
Definition at line 112 of file system\&.h\&.
.PP
Referenced by calculateBias(), getTMMCBias(), aggVolBias3::make(), deleteParticle::make(), translateParticle::make(), swapParticles::make(), insertParticle::make(), startTMMC(), stopTMMC(), and ~simSystem()\&.
.SS "long long int simSystem::tmmcSweepSize"

.PP
Size of a sweep in TMMC\&. 
.PP
Definition at line 95 of file system\&.h\&.
.PP
Referenced by initialize(), checkpoint::load(), performCrossover(), and performTMMC()\&.
.SS "long long int simSystem::totalTMMCSweeps"

.PP
Total number of sweeps to perform during TMMC\&. 
.PP
Definition at line 96 of file system\&.h\&.
.PP
Referenced by initialize(), performTMMC(), and simSystem()\&.
.SS "bool simSystem::useTMMC"

.PP
Logical stating whether or not to use TMMC biasing\&. 
.PP
Definition at line 91 of file system\&.h\&.
.PP
Referenced by calculateBias(), getTMMCBias(), aggVolBias3::make(), deleteParticle::make(), translateParticle::make(), swapParticles::make(), insertParticle::make(), performTMMC(), performWALA(), simSystem(), startTMMC(), stopTMMC(), and ~simSystem()\&.
.SS "bool simSystem::useWALA"

.PP
Logical stating whether or not to use Wang-Landau biasing\&. 
.PP
Definition at line 92 of file system\&.h\&.
.PP
Referenced by calculateBias(), getWALABias(), aggVolBias3::make(), deleteParticle::make(), translateParticle::make(), insertParticle::make(), swapParticles::make(), performCrossover(), performTMMC(), performWALA(), simSystem(), startWALA(), stopWALA(), and ~simSystem()\&.
.SS "double simSystem::wala_g"

.PP
Definition at line 101 of file system\&.h\&.
.PP
Referenced by initialize(), checkpoint::load(), performWALA(), and simSystem()\&.
.SS "double simSystem::wala_s"

.PP
Wang-Landau g and s factors\&. 
.PP
Definition at line 101 of file system\&.h\&.
.PP
Referenced by initialize(), checkpoint::load(), performWALA(), and simSystem()\&.
.SS "\fBwala\fP* simSystem::wlBias"

.PP
WL biasing function\&. 
.PP
Definition at line 113 of file system\&.h\&.
.PP
Referenced by calculateBias(), getWALABias(), startWALA(), stopWALA(), and ~simSystem()\&.
.SS "long long int simSystem::wlSweepSize"

.PP
Size of Wang-Landau sweep\&. 
.PP
Definition at line 97 of file system\&.h\&.
.PP
Referenced by initialize(), performCrossover(), performWALA(), and simSystem()\&.

.SH "Author"
.PP 
Generated automatically by Doxygen for Flat-Histogram Monte Carlo Simulation from the source code\&.
