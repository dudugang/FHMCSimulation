.TH "quaternion" 3 "Fri Dec 23 2016" "Version v0.1.0" "Flat-Histogram Monte Carlo Simulation" \" -*- nroff -*-
.ad l
.nh
.SH NAME
quaternion \- 
.SH SYNOPSIS
.br
.PP
.PP
\fC#include <quaternion\&.h>\fP
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBquaternion\fP ()"
.br
.ti -1c
.RI "\fB~quaternion\fP ()"
.br
.ti -1c
.RI "void \fBset\fP (const std::vector< double > &q)"
.br
.RI "\fISet the quaternion's value\&. \fP"
.ti -1c
.RI "void \fBsetAxisAngle\fP (const std::vector< double > &u, const double angle)"
.br
.RI "\fISet the quaternion based on angle, axis desired\&. \fP"
.ti -1c
.RI "void \fBsetRandomRot\fP ()"
.br
.RI "\fIPick a quaternion that corresponds to a random 3D rotation\&. \fP"
.ti -1c
.RI "void \fBconjugate\fP ()"
.br
.RI "\fITransform quaternion into its conjugate\&. \fP"
.ti -1c
.RI "void \fBnormalize\fP ()"
.br
.RI "\fINormalize a quaternion\&. \fP"
.ti -1c
.RI "void \fBinverse\fP ()"
.br
.RI "\fITransform a quanternion into its inverse\&. \fP"
.ti -1c
.RI "void \fBtranslate\fP (const std::vector< double > &t)"
.br
.RI "\fITranslate a quaternion in 3D space\&. \fP"
.ti -1c
.RI "double \fBgetNorm\fP ()"
.br
.RI "\fIReturn the norm of the quaternion\&. \fP"
.ti -1c
.RI "std::vector< double > \fBget\fP ()"
.br
.ti -1c
.RI "std::vector< double > \fBrotateVec\fP (const std::vector< double > &vec)"
.br
.RI "\fIUse this quaternion to operate on a vector, that causes its rotation\&. \fP"
.ti -1c
.RI "\fBquaternion\fP \fBoperator+\fP (const \fBquaternion\fP &p)"
.br
.RI "\fIAdd a quaternion to this one\&. \fP"
.ti -1c
.RI "\fBquaternion\fP \fBoperator-\fP (const \fBquaternion\fP &p)"
.br
.RI "\fISubtract a quaternion from this one\&. \fP"
.ti -1c
.RI "\fBquaternion\fP \fBoperator*\fP (const \fBquaternion\fP &other)"
.br
.RI "\fIMultiply this quaternion by another\&. \fP"
.ti -1c
.RI "bool \fBoperator==\fP (const \fBquaternion\fP &other)"
.br
.RI "\fICheck if two quaternions are equal to each other to within a tolerance of 1\&.0e-12\&. \fP"
.ti -1c
.RI "bool \fBoperator!=\fP (const \fBquaternion\fP &other)"
.br
.RI "\fICheck if two quaternions are not equal to each other to within a tolerance of 1\&.0e-12\&. \fP"
.in -1c
.SH "Detailed Description"
.PP 
Definition at line 9 of file quaternion\&.h\&.
.SH "Constructor & Destructor Documentation"
.PP 
.SS "quaternion::quaternion ()\fC [inline]\fP"

.PP
Definition at line 11 of file quaternion\&.h\&.
.PP
References setRandomRot()\&.
.PP
.nf
11 { q_\&.resize(4, 0\&.0); std::vector < double > dummy (3, 0); R_\&.resize(3, dummy); setRandomRot (); }
.fi
.SS "quaternion::~quaternion ()\fC [inline]\fP"

.PP
Definition at line 12 of file quaternion\&.h\&.
.PP
.nf
12 {};
.fi
.SH "Member Function Documentation"
.PP 
.SS "void quaternion::conjugate ()"

.PP
Transform quaternion into its conjugate\&. 
.PP
Definition at line 53 of file quaternion\&.cpp\&.
.PP
Referenced by inverse()\&.
.PP
.nf
53                             {
54     for (unsigned int i = 1; i < 4; ++i) {
55         q_[i] = -q_[i];
56     }
57 }
.fi
.SS "std::vector< double > quaternion::get ()\fC [inline]\fP"

.PP
Definition at line 24 of file quaternion\&.h\&.
.PP
.nf
24 { return q_; } // Return the quaternion's values
.fi
.SS "double quaternion::getNorm ()"

.PP
Return the norm of the quaternion\&. 
.PP
Definition at line 102 of file quaternion\&.cpp\&.
.PP
Referenced by normalize()\&.
.PP
.nf
102                             {
103     double n2 = 0\&.0;
104     for (unsigned int i = 0; i < 4; ++i) {
105         n2 += q_[i]*q_[i];
106     }
107     return std::sqrt(n2);
108 }
.fi
.SS "void quaternion::inverse ()"

.PP
Transform a quanternion into its inverse\&. 
.PP
Definition at line 74 of file quaternion\&.cpp\&.
.PP
References conjugate()\&.
.PP
.nf
74                           {
75     conjugate();
76     double n2 = 0\&.0;
77     for (unsigned int i = 0; i < 4; ++i) {
78         n2 += q_[i]*q_[i];
79     }
80     for (unsigned int i = 0; i < 4; ++i) {
81         q_[i] /= n2;
82     }
83 }
.fi
.SS "void quaternion::normalize ()"

.PP
Normalize a quaternion\&. 
.PP
\fBParameters:\fP
.RS 4
\fIt\fP Translation vector\&. 
.RE
.PP

.PP
Definition at line 64 of file quaternion\&.cpp\&.
.PP
References getNorm()\&.
.PP
.nf
64                             {
65     const double norm = getNorm();
66     for (unsigned int i = 0; i < 4; ++i) {
67         q_[i] /= norm;
68     }
69 }
.fi
.SS "bool quaternion::operator!= (const \fBquaternion\fP &other)\fC [inline]\fP"

.PP
Check if two quaternions are not equal to each other to within a tolerance of 1\&.0e-12\&. 
.PP
\fBParameters:\fP
.RS 4
\fIother\fP Other quaternion to compare with\&. 
.RE
.PP

.PP
Definition at line 94 of file quaternion\&.h\&.
.PP
.nf
94                                               {
95         return !(*this == other);
96     }
.fi
.SS "\fBquaternion\fP quaternion::operator* (const \fBquaternion\fP &other)\fC [inline]\fP"

.PP
Multiply this quaternion by another\&. Does this in order of self*other\&.
.PP
\fBParameters:\fP
.RS 4
\fIother\fP Quaternion to multiply this one by\&.
.RE
.PP
\fBReturns:\fP
.RS 4
self*other 
.RE
.PP

.PP
Definition at line 64 of file quaternion\&.h\&.
.PP
References set()\&.
.PP
.nf
64                                                    {
65         quaternion ans;
66         std::vector < double > prod (4, 0);
67         prod[0] = this->q_[0]*other\&.q_[0] - this->q_[1]*other\&.q_[1] - this->q_[2]*other\&.q_[2] - this->q_[3]*other\&.q_[3];
68         prod[1] = this->q_[0]*other\&.q_[1] + this->q_[1]*other\&.q_[0] + this->q_[2]*other\&.q_[3] - this->q_[3]*other\&.q_[2];
69         prod[2] = this->q_[0]*other\&.q_[2] - this->q_[1]*other\&.q_[3] + this->q_[2]*other\&.q_[0] + this->q_[3]*other\&.q_[1];
70         prod[3] = this->q_[0]*other\&.q_[3] + this->q_[1]*other\&.q_[2] - this->q_[2]*other\&.q_[1] + this->q_[3]*other\&.q_[0];
71         ans\&.set(prod);
72         return ans;
73     }
.fi
.SS "\fBquaternion\fP quaternion::operator+ (const \fBquaternion\fP &p)\fC [inline]\fP"

.PP
Add a quaternion to this one\&. 
.PP
\fBParameters:\fP
.RS 4
\fIp\fP Quaternion to add to this one\&. 
.RE
.PP

.PP
Definition at line 32 of file quaternion\&.h\&.
.PP
References set()\&.
.PP
.nf
32                                                {
33         quaternion ans;
34         std::vector < double > sum (4, 0);
35         for (unsigned int i = 0; i < 4; ++i) {
36             sum[i] = this->q_[i] + p\&.q_[i];
37         }
38         ans\&.set(sum);
39         return ans;
40     }
.fi
.SS "\fBquaternion\fP quaternion::operator- (const \fBquaternion\fP &p)\fC [inline]\fP"

.PP
Subtract a quaternion from this one\&. 
.PP
\fBParameters:\fP
.RS 4
\fIp\fP Quaternion to subtract from this one\&. 
.RE
.PP

.PP
Definition at line 47 of file quaternion\&.h\&.
.PP
References set()\&.
.PP
.nf
47                                                {
48         quaternion ans;
49         std::vector < double > sum (4, 0);
50         for (unsigned int i = 0; i < 4; ++i) {
51             sum[i] = this->q_[i] - p\&.q_[i];
52         }
53         ans\&.set(sum);
54         return ans;
55     }
.fi
.SS "bool quaternion::operator== (const \fBquaternion\fP &other)\fC [inline]\fP"

.PP
Check if two quaternions are equal to each other to within a tolerance of 1\&.0e-12\&. 
.PP
\fBParameters:\fP
.RS 4
\fIother\fP Other quaternion to compare with\&. 
.RE
.PP

.PP
Definition at line 80 of file quaternion\&.h\&.
.PP
.nf
80                                               {
81         for (unsigned int i = 0; i < 4; ++i) {
82             if (fabs(this->q_[i] - other\&.q_[i]) > 1\&.0e-12) {
83                 return false;
84             }
85         }
86         return true;
87     }
.fi
.SS "std::vector< double > quaternion::rotateVec (const std::vector< double > &vec)"

.PP
Use this quaternion to operate on a vector, that causes its rotation\&. 
.PP
\fBParameters:\fP
.RS 4
\fIvec\fP Vector to rotate\&. 
.RE
.PP

.PP
Definition at line 115 of file quaternion\&.cpp\&.
.PP
.nf
115                                                                            {
116     std::vector < double > ans (3, 0);
117     assignr_ (q_);
118 
119     for (unsigned int i = 0; i < 3; ++i) {
120         for (unsigned int j = 0; j < 3; ++j) {
121             ans[i] += R_[i][j]*vec[j];
122         }
123     }
124 
125     return ans;
126 }
.fi
.SS "void quaternion::set (const std::vector< double > &qv)"

.PP
Set the quaternion's value\&. 
.PP
\fBParameters:\fP
.RS 4
\fIqv\fP 4 component vector, [x, x, y, z] 
.RE
.PP

.PP
Definition at line 8 of file quaternion\&.cpp\&.
.PP
Referenced by operator*(), operator+(), and operator-()\&.
.PP
.nf
8                                                     {
9     assignq_ (qv);
10 }
.fi
.SS "void quaternion::setAxisAngle (const std::vector< double > &u, const doubleangle)"

.PP
Set the quaternion based on angle, axis desired\&. Does not need to be normalized\&.
.PP
\fBParameters:\fP
.RS 4
\fIangle\fP Angle of rotation desired relative to axis (in radians) 
.br
\fIaixs\fP 3D axis to rotate about (in right-handed coordinates) 
.RE
.PP

.PP
Definition at line 150 of file quaternion\&.cpp\&.
.PP
.nf
150                                                                                 {
151     if (u\&.size() != 3) {
152         throw customException ("Axis for Quaternion must have 3 elements");
153     }
154     q_[0] = std::cos(angle/2\&.0);
155     const double s = std::sin(angle/2\&.0);
156     q_[1] = s*u[0];
157     q_[2] = s*u[1];
158     q_[3] = s*u[2];
159 }
.fi
.SS "void quaternion::setRandomRot ()"

.PP
Pick a quaternion that corresponds to a random 3D rotation\&. 
.PP
Definition at line 131 of file quaternion\&.cpp\&.
.PP
References PI, rng(), and RNG_SEED\&.
.PP
Referenced by quaternion()\&.
.PP
.nf
131                                 {
132      // spherical coordinates to get random unit vector
133      const double theta = std::acos(2\&.0*rng(&RNG_SEED) - 1\&.0);
134      const double phi = 2\&.0*PI*rng(&RNG_SEED), sin_phi = std::sin(phi);
135 
136      // randomly pick angle
137      const double angle = 2\&.0*PI*rng(&RNG_SEED), s = std::sin(angle/2\&.0);
138      q_[0] = std::cos(angle/2\&.0);
139      q_[1] = s*1\&.0*sin_phi*std::cos(theta);
140      q_[2] = s*1\&.0*sin_phi*std::sin(theta);
141      q_[3] = s*1\&.0*std::cos(phi);
142  }
.fi
.SS "void quaternion::translate (const std::vector< double > &t)"

.PP
Translate a quaternion in 3D space\&. 
.PP
\fBParameters:\fP
.RS 4
\fIt\fP Translation vector\&. 
.RE
.PP

.PP
Definition at line 90 of file quaternion\&.cpp\&.
.PP
.nf
90                                                          {
91     if (t\&.size() != 3) {
92         throw customException ("Translation vector for Quaternion must have 3 elements");
93     }
94     for (unsigned int i = 1; i < 4; ++i) {
95         q_[i] += t[i-1];
96     }
97 }
.fi


.SH "Author"
.PP 
Generated automatically by Doxygen for Flat-Histogram Monte Carlo Simulation from the source code\&.
