.TH "wala" 3 "Mon Aug 10 2015" "Version v0.0.1" "Multicomponent  Monte Carlo Simulation" \" -*- nroff -*-
.ad l
.nh
.SH NAME
wala \- Wang-Landau biasing class\&.  

.SH SYNOPSIS
.br
.PP
.PP
\fC#include <bias\&.h>\fP
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBwala\fP ()"
.br
.ti -1c
.RI "\fBwala\fP (const double \fBlnF\fP, const double g, const double s, const int Nmax, const int Nmin)"
.br
.RI "\fIWang-Landau biasing constructor\&. \fP"
.ti -1c
.RI "void \fBupdate\fP (const int Nval)"
.br
.RI "\fIUpdate the estimate of the macrostate distribution\&. \fP"
.ti -1c
.RI "void \fBiterateForward\fP ()"
.br
.RI "\fIThis should only be called when the 'flatness' criterion is met\&. \fP"
.ti -1c
.RI "void \fBprint\fP (const std::string fileName, const bool printH=false)"
.br
.RI "\fIPrint the UN-NORMALIZED biasing function (lnPI) and possible the visted-states histogram to files\&. \fP"
.ti -1c
.RI "void \fBreadlnPI\fP (const std::string fileName)"
.br
.RI "\fIRead the macrostate distribution (biasing function) from a file\&. \fP"
.ti -1c
.RI "bool \fBevaluateFlatness\fP ()"
.br
.RI "\fIEvaluate if the visited states histogram is approxiamtely 'flat'\&. \fP"
.ti -1c
.RI "const \fB__BIAS_INT_TYPE__\fP \fBgetAddress\fP (const int Nval)"
.br
.RI "\fIFor multidimensional Wang-Landau biasing, get the 1D coordinate of the macrostate distribution estimate (bias) for multidimensional data\&. \fP"
.ti -1c
.RI "const double \fBlnF\fP ()"
.br
.ti -1c
.RI "const double \fBgetBias\fP (const int address)"
.br
.ti -1c
.RI "const std::vector< double > \fBgetlnPI\fP ()"
.br
.RI "\fIReturn the current estimate of the macrostate distribution\&. \fP"
.in -1c
.SH "Detailed Description"
.PP 
Wang-Landau biasing class\&. 
.PP
Definition at line 48 of file bias\&.h\&.
.SH "Constructor & Destructor Documentation"
.PP 
.SS "wala::wala ()\fC [inline]\fP"

.PP
Definition at line 50 of file bias\&.h\&.
.PP
.nf
50 {};
.fi
.SS "wala::wala (const double lnF, const double g, const double s, const int Nmax, const int Nmin)"

.PP
Wang-Landau biasing constructor\&. 
.PP
\fBParameters:\fP
.RS 4
\fIlnF\fP Factor by which the estimate of the density of states in updated each time it is visited\&. 
.br
\fIg\fP Factor by which lnF is reduced (multiplied) once 'flatness' has been achieved\&. 
.br
\fIs\fP Factor by which the min(H) must be within the mean of H to be considered 'flat', e\&.g\&. 0\&.8 --> min is within 20% error of mean 
.br
\fInSpec\fP Number of species in the simulation\&. 
.br
\fINmax\fP Upper bound for total number of particles\&. 
.br
\fINmin\fP Lower bound for total number of particles\&. 
.RE
.PP

.PP
Definition at line 292 of file bias\&.cpp\&.
.PP
References __BIAS_INT_TYPE__, and lnF()\&.
.PP
.nf
292                                                                                             {
293                 if (lnF < 0) {
294                                 throw customException ("lnF in Wang-Landau cannot be < 0");
295                 }
296                 lnF_ = lnF;
297                 
298                 if (g <= 0 || g >= 1) {
299                                 throw customException ("In Wang-Landau 0 < g < 1");
300                 }
301                 g_ = g;
302                 
303                 if (s <= 0 || s >= 1) {
304                                 throw customException ("In Wang-Landau 0 < s < 1");
305                 }
306                 s_ = s;
307                                 
308                 if (Nmin > Nmax) {
309                                 throw customException ("Nmin > Nmax in Wang-Landau object");
310                 }
311                 
312                 __BIAS_INT_TYPE__ size = (Nmax - Nmin + 1);
313                 
314                 Nmin_ = Nmin;
315                 Nmax_ = Nmax;
316                 
317                 // attempt to allocate memory for macrostate distribution matrix and initializes it all to 0
318                 try {
319                                 lnPI_\&.resize(size, 0\&.0);
320                 } catch (const std::bad_alloc &ce) {
321                                 throw customException ("Out of memory, cannot allocate space for macrostate distribution matrix in wala");
322                 }
323                 
324                 // initialize the visited-states histogram
325                 try {
326                                 H_\&.resize(size, 0\&.0);
327                 } catch (const std::bad_alloc &ce) {
328                                 throw customException ("Out of memory, cannot allocate space for visited-states histogram in wala");
329                 }
330 }
.fi
.SH "Member Function Documentation"
.PP 
.SS "bool wala::evaluateFlatness ()"

.PP
Evaluate if the visited states histogram is approxiamtely 'flat'\&. 
.PP
\fBReturns:\fP
.RS 4
Returns whether the histogram is flat or not\&. 
.RE
.PP

.PP
Definition at line 358 of file bias\&.cpp\&.
.PP
References specExp\&.
.PP
Referenced by main()\&.
.PP
.nf
358                              {
359                 double min = H_[0], lnMean = -DBL_MAX;
360                 for (unsigned int i = 0; i < H_\&.size(); ++i) {
361                                 if (H_[i] < min) {
362                                                 min = H_[i];
363                                 }
364                                 
365                                 // summing so many doubles may overrun DBL_MAX, so instead track the lnMean
366                                 lnMean = specExp(lnMean, log(H_[i]));
367                 }
368                 lnMean -= log(H_\&.size());
369                 
370                 if (log(min) - lnMean > log(s_)) {
371                                 return true;
372                 }
373                 return false;
374 }
.fi
.SS "const \fB__BIAS_INT_TYPE__\fP wala::getAddress (const int Nval)"

.PP
For multidimensional Wang-Landau biasing, get the 1D coordinate of the macrostate distribution estimate (bias) for multidimensional data\&. 
.PP
\fBParameters:\fP
.RS 4
\fINval\fP Total number of atoms in the system 
.RE
.PP

.PP
Definition at line 337 of file bias\&.cpp\&.
.PP
References __BIAS_INT_TYPE__\&.
.PP
Referenced by calculateBias(), and update()\&.
.PP
.nf
337                                                         {
338                 __BIAS_INT_TYPE__ x = Nval - Nmin_;
339                 return x;
340 }
.fi
.SS "const double wala::getBias (const int address)\fC [inline]\fP"

.PP
Definition at line 60 of file bias\&.h\&.
.PP
Referenced by calculateBias()\&.
.PP
.nf
60 { return -lnPI_[address]; }
.fi
.SS "const std::vector<double> wala::getlnPI ()\fC [inline]\fP"

.PP
Return the current estimate of the macrostate distribution\&. 
.PP
Definition at line 61 of file bias\&.h\&.
.PP
Referenced by main()\&.
.SS "void wala::iterateForward ()"

.PP
This should only be called when the 'flatness' criterion is met\&. This then resets the visited-states histogram H, and decrements lnF\&. 
.PP
Definition at line 379 of file bias\&.cpp\&.
.PP
Referenced by main()\&.
.PP
.nf
379                            {
380                 lnF_ = lnF_*g_;
381                 std::fill(H_\&.begin(), H_\&.end(), 0);
382 }
.fi
.SS "const double wala::lnF ()\fC [inline]\fP"

.PP
Definition at line 59 of file bias\&.h\&.
.PP
Referenced by main(), and wala()\&.
.PP
.nf
59 { return lnF_; }
.fi
.SS "void wala::print (const std::string fileName, const bool printH = \fCfalse\fP)"

.PP
Print the UN-NORMALIZED biasing function (lnPI) and possible the visted-states histogram to files\&. Will overwrite the files if another with that name exists\&. Prints in netCDF format if enabled\&.
.PP
\fBParameters:\fP
.RS 4
\fIfileName\fP Name of the file to print to\&. Will append with '_lnPI' and '_H' for the macrostate distribution and visited-states histogram, respectively\&. 
.br
\fIprintH\fP Defaults to false, but if true will also print the visited-states histogram\&. 
.RE
.PP

.PP
Definition at line 392 of file bias\&.cpp\&.
.PP
References sstr\&.
.PP
Referenced by main()\&.
.PP
.nf
392                                                        {
393 #ifdef NETCDF_CAPABLE
394                 // Print visited-states histogram
395                 if (printH) {
396                                 const std::string name = fileName + "_H\&.nc"
397                                 NcFile outFile(name\&.c_str(), NcFile::replace);
398                                 NcDim probDim = outFile\&.addDim("vectorized_position", H_\&.size());
399                                 NcVar probVar = outFile\&.addVar("H", ncDouble, probDim);
400                                 const std::string dummyName = "number_species:";
401                                 probVar\&.putAtt(dummyName\&.c_str(), sstr(nSpec_)\&.c_str());
402                                 const std::string attName = "species_total_upper_bound:";
403                                 probVar\&.putAtt(attName\&.c_str(), sstr(Nmax_)\&.c_str());
404                                 const std::string attName = "species_upper_lower_bound:";
405                                 probVar\&.putAtt(attName\&.c_str(), sstr(Nmin_)\&.c_str());
406                                 probVar\&.putVar(&H_[0]);
407                 }
408                 
409                 // Print lnPI (bias) matrix
410                 const std::string name = fileName + "_lnPI\&.nc"
411                 NcFile outFile(name\&.c_str(), NcFile::replace);
412                 NcDim probDim = outFile\&.addDim("vectorized_position", lnPI_\&.size());
413                 NcVar probVar = outFile\&.addVar("lnPI", ncDouble, probDim);
414                 const std::string dummyName = "number_species:";
415                 probVar\&.putAtt(dummyName\&.c_str(), sstr(nSpec_)\&.c_str());
416                 const std::string attName = "species_total_upper_bound:";
417                 probVar\&.putAtt(attName\&.c_str(), sstr(Nmax_)\&.c_str());
418                 const std::string attName = "species_total_lower_bound:";
419                 probVar\&.putAtt(attName\&.c_str(), sstr(Nmin_)\&.c_str());
420                 probVar\&.putVar(&lnPI_[0]);
421 #else
422                 // Print visited-states histogram
423                 if (printH) {
424                                 std::ofstream of;
425                                 of\&.open(fileName+"_H\&.dat", std::ofstream::out);
426                                 of << "# Visited-states histogram in single row (vectorized) notation\&." << std::endl;
427                                 of << "# species_total_upper_bound:" << Nmax_ << std::endl;
428                                 of << "# species_total_lower_bound:" << Nmin_ << std::endl;
429                                 for (long long int i = 0; i < H_\&.size(); ++i) {
430                                                 of << H_[i] << std::endl;
431                                 }
432                                 of\&.close();
433                 }
434                 
435                 // Print lnPI (bias) matrix
436                 std::ofstream of;
437                 of\&.open(fileName+"_lnPI\&.dat", std::ofstream::out);
438                 of << "# lnPI (bias) matrix in single row (vectorized) notation\&." << std::endl;
439                 of << "# species_total_upper_bound:" << Nmax_ << std::endl;
440                 of << "# species_total_lower_bound:" << Nmin_ << std::endl;
441                 for (long long int i = 0; i < lnPI_\&.size(); ++i) {
442                                 of << lnPI_[i] << std::endl;
443                 }
444                 of\&.close();
445 #endif
446 }
.fi
.SS "void wala::readlnPI (const std::string fileName)"

.PP
Read the macrostate distribution (biasing function) from a file\&. This assumes the user has already guaranteed that the bounds are consistent, e\&.g\&. Nmin and Nmax, as it will not check this automatically\&. Also assumes file was generated by this code\&. 'Hand made' ones might have formatting issues since parsing is done based on tokens\&.
.PP
\fBParameters:\fP
.RS 4
\fIfileName\fP Name of file containing lnPI\&. Must include file extension\&. 
.RE
.PP

.PP
Definition at line 455 of file bias\&.cpp\&.
.PP
References __BIAS_INT_TYPE__\&.
.PP
.nf
455                                              {
456 #ifdef NETCDF_CAPABLE
457                 NcFile dataFile (fileName\&.c_str(), NcFile::read);
458                 NcVar lnPI_data = dataFile\&.getVar("lnPI");
459                 if (lnPI_data\&.isNull()) throw customException("Macrostate distribution matrix (biasing function) was empty, cannot read");
460                 lnPI_data\&.getVar(&lnPI_[0]);
461 #else
462                 std::string line;
463                 std::ifstream inF (fileName);
464                 
465                 // Skip file header
466                 bool header = true;
467                 while (header) {
468                                 std::getline (inF, line);
469                                 if (line\&.compare(0,1,"#",0,1) != 0) {
470                                                 header = false;
471                                 }
472                 }
473                 
474                 // Read line by line, parsing based on token
475                 lnPI_[0] = atof(line\&.c_str());
476                 __BIAS_INT_TYPE__ index = 1;
477                 while (inF >> lnPI_[index]) {
478                                 index++;
479                 }
480 #endif
481 }
.fi
.SS "void wala::update (const int Nval)"

.PP
Update the estimate of the macrostate distribution\&. 
.PP
\fBParameters:\fP
.RS 4
\fINval\fP Total current number of atoms in the system 
.RE
.PP

.PP
Definition at line 347 of file bias\&.cpp\&.
.PP
References __BIAS_INT_TYPE__, and getAddress()\&.
.PP
Referenced by deleteParticle::make(), translateParticle::make(), swapParticles::make(), and insertParticle::make()\&.
.PP
.nf
347                                  {
348                 __BIAS_INT_TYPE__ address = getAddress (Nval);
349                 lnPI_[address] += lnF_;
350                 H_[address] += 1\&.0;
351 }
.fi


.SH "Author"
.PP 
Generated automatically by Doxygen for Multicomponent Monte Carlo Simulation from the source code\&.
