.TH "moves" 3 "Fri Dec 23 2016" "Version v0.1.0" "Flat-Histogram Monte Carlo Simulation" \" -*- nroff -*-
.ad l
.nh
.SH NAME
moves \- 
.PP
Class that tracks and decides which moves whould be made\&.  

.SH SYNOPSIS
.br
.PP
.PP
\fC#include <mover\&.h>\fP
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBmoves\fP (const int M=1)"
.br
.RI "\fIInstantiate moves class\&. \fP"
.ti -1c
.RI "\fB~moves\fP ()"
.br
.RI "\fIDestructor for moves class\&. \fP"
.ti -1c
.RI "void \fBmakeMove\fP (\fBsimSystem\fP &sys)"
.br
.RI "\fIChoose a move to make\&. \fP"
.ti -1c
.RI "void \fBprint\fP (const std::string filename)"
.br
.RI "\fIPrint move information to file\&. \fP"
.ti -1c
.RI "void \fBaddInsert\fP (const int index, const double prob)"
.br
.RI "\fIAdd insertion move\&. \fP"
.ti -1c
.RI "void \fBaddDelete\fP (const int index, const double prob)"
.br
.RI "\fIAdd deletion move\&. \fP"
.ti -1c
.RI "void \fBaddSwap\fP (const int index1, const int index2, const double prob)"
.br
.RI "\fIAdd swap move\&. \fP"
.ti -1c
.RI "void \fBaddTranslate\fP (const int index, const double prob, const double maxD, const std::vector< double > &box)"
.br
.RI "\fIAdd translate move\&. \fP"
.ti -1c
.RI "void \fBsetM\fP (const int M)"
.br
.RI "\fISet the value of M\&. \fP"
.ti -1c
.RI "int \fBgetM\fP ()"
.br
.ti -1c
.RI "std::vector< std::vector
.br
< double > > \fBreportMoveStatistics\fP ()"
.br
.RI "\fIReport the statistics on the success/failure of each move made so far\&. \fP"
.ti -1c
.RI "std::vector< double > \fBreportProbabilities\fP ()"
.br
.RI "\fIEcho the normalized probabilities of each move in the object\&. \fP"
.in -1c
.SH "Detailed Description"
.PP 
Class that tracks and decides which moves whould be made\&. 

However, it does NOT store the moves themselves so they should be fixed in memory elsewhere\&. 
.PP
Definition at line 20 of file mover\&.h\&.
.SH "Constructor & Destructor Documentation"
.PP 
.SS "moves::moves (const intM = \fC1\fP)"

.PP
Instantiate moves class\&. 
.PP
\fBParameters:\fP
.RS 4
\fIin\fP M Number of expanded ensemble stages for insert/delete moves 
.RE
.PP

.PP
Definition at line 8 of file mover\&.cpp\&.
.PP
References setM(), SYS_FAILURE, and customException::what()\&.
.PP
.nf
8                          {
9     try {
10         setM (M);
11     } catch (customException &ce) {
12         std::cerr << ce\&.what() << std::endl;
13         exit(SYS_FAILURE);
14     }
15 }
.fi
.SS "moves::~moves ()"

.PP
Destructor for moves class\&. 
.PP
Definition at line 33 of file mover\&.cpp\&.
.PP
.nf
33                {
34     ;
35 }
.fi
.SH "Member Function Documentation"
.PP 
.SS "void moves::addDelete (const intindex, const doubleprob)"

.PP
Add deletion move\&. 
.PP
\fBParameters:\fP
.RS 4
\fIindex\fP Particle index to operate on 
.br
\fIprob\fP Probability 
.RE
.PP

.PP
Definition at line 79 of file mover\&.cpp\&.
.PP
Referenced by initialize()\&.
.PP
.nf
79                                                          {
80     auto om = std::make_shared < deleteParticle > (index, "delete");
81     ownedMoves_\&.push_back(om);
82     addOn_(ownedMoves_\&.back()->changeN(), prob);
83 }
.fi
.SS "void moves::addInsert (const intindex, const doubleprob)"

.PP
Add insertion move\&. 
.PP
\fBParameters:\fP
.RS 4
\fIindex\fP Particle index to operate on 
.br
\fIprob\fP Probability 
.RE
.PP

.PP
Definition at line 67 of file mover\&.cpp\&.
.PP
Referenced by initialize(), and setup()\&.
.PP
.nf
67                                                          {
68     auto om = std::make_shared < insertParticle > (index, "insert");
69     ownedMoves_\&.push_back(om);
70     addOn_(ownedMoves_\&.back()->changeN(), prob);
71 }
.fi
.SS "void moves::addSwap (const intindex1, const intindex2, const doubleprob)"

.PP
Add swap move\&. 
.PP
\fBParameters:\fP
.RS 4
\fIindex1\fP Particle index 1 to operate on 
.br
\fIindex2\fP Particle index 2 to operate on 
.br
\fIprob\fP Probability 
.RE
.PP

.PP
Definition at line 92 of file mover\&.cpp\&.
.PP
Referenced by initialize()\&.
.PP
.nf
92                                                                           {
93     auto om = std::make_shared < swapParticles > (index1, index2, "swap");
94     ownedMoves_\&.push_back(om);
95     addOn_(ownedMoves_\&.back()->changeN(), prob);
96 }
.fi
.SS "void moves::addTranslate (const intindex, const doubleprob, const doublemaxD, const std::vector< double > &box)"

.PP
Add translate move\&. 
.PP
\fBParameters:\fP
.RS 4
\fIindex\fP Particle index to operate on 
.br
\fIprob\fP Probability 
.br
\fImaxD\fP Maximium displacement 
.br
\fIbox\fP Box dimensions 
.RE
.PP

.PP
Definition at line 106 of file mover\&.cpp\&.
.PP
Referenced by initialize()\&.
.PP
.nf
106                                                                                                                 {
107     auto om = std::make_shared < translateParticle > (index, "translate");
108     om->setMaxDisplacement (maxD, box);
109     ownedMoves_\&.push_back(om);
110     addOn_(ownedMoves_\&.back()->changeN(), prob);
111 }
.fi
.SS "int moves::getM ()\fC [inline]\fP"

.PP
Definition at line 32 of file mover\&.h\&.
.PP
.nf
32 { return M_; }
.fi
.SS "void moves::makeMove (\fBsimSystem\fP &sys)"

.PP
Choose a move to make\&. If in an expanded ensemble, will restrict moves which change the number of particles to the atom type that is currently on partially in the system\&.
.PP
\fBParameters:\fP
.RS 4
\fIsys\fP \fBsimSystem\fP object to make a move in\&. 
.RE
.PP

.PP
Definition at line 156 of file mover\&.cpp\&.
.PP
References simSystem::getCurrentM(), simSystem::getFractionalAtomType(), simSystem::getTotalM(), rng(), RNG_SEED, and customException::what()\&.
.PP
Referenced by performCrossover(), performTMMC(), and performWALA()\&.
.PP
.nf
156                                     {
157     if (sys\&.getTotalM() != M_) {
158         throw customException ("Error, M in system different from M in moves class operating on the system");
159     }
160     int moveChosen = -1, succ = 0, mIndex = 0;
161     bool done = false;
162     while (!done) {
163         const double ran = rng (&RNG_SEED);
164         for (unsigned int i = 0; i < normProbabilities_\&.size(); ++i) {
165             if (ran < normProbabilities_[i]) {
166                 if (sys\&.getTotalM() > 1) {
167                     // expanded ensemble has to check the moves because have to only work on the partially inserted atom
168                     if ((ownedMoves_[i]->changeN() == true) && (ownedMoves_[i]->whatType() != sys\&.getFractionalAtomType()) && (sys\&.getCurrentM() > 0)) {
169                         // reject this choice because we must only insert/delete the type that is already partially inserted IFF we are *already* in a partially inserted state
170                         // choose a new move
171                         done = false;
172                         break;
173                     } else {
174                         // get M before move happens which can change the state of the system
175                         if (ownedMoves_[i]->changeN()) {
176                             mIndex = sys\&.getCurrentM();
177                         }
178                         try {
179                             succ = ownedMoves_[i]->make(sys);
180                         } catch (customException &ce) {
181                             std::string a = "Failed to make a move properly: ";
182                             std::string b = ce\&.what();
183                             throw customException(a+b);
184                         }
185                         done = true;
186                         moveChosen = i;
187                         break;
188                     }
189                 } else {
190                     // without expanded ensemble, inserts/deletes can proceed unchecked
191                     try {
192                         succ = ownedMoves_[i]->make(sys);
193                     } catch (customException &ce) {
194                         std::string a = "Failed to make a move properly: ";
195                         std::string b = ce\&.what();
196                         throw customException(a+b);
197                     }
198                     done = true;
199                     moveChosen = i;
200                     mIndex = 0;
201                     break;
202                 }
203             }
204         }
205     }
206 
207     if (moveChosen < 0) {
208         throw customException("Failed to choose a move properly");
209     }
210 
211     attempted_[moveChosen][mIndex] += 1\&.0;
212     succeeded_[moveChosen][mIndex] += succ;
213 }
.fi
.SS "void moves::print (const std::stringfilename)"

.PP
Print move information to file\&. Appends by default\&.
.PP
\fBParameters:\fP
.RS 4
\fIfilename\fP Name of file to print to\&. 
.RE
.PP

.PP
Definition at line 42 of file mover\&.cpp\&.
.PP
References getTimeStamp(), and reportMoveStatistics()\&.
.PP
Referenced by performCrossover(), performTMMC(), and performWALA()\&.
.PP
.nf
42                                            {
43     std::ofstream statFile (filename\&.c_str(), std::ofstream::out | std::ofstream::app);
44     std::vector < std::vector < double > > stats = reportMoveStatistics();
45     statFile << "Time: " << getTimeStamp() << std::endl;
46     statFile << "---------- Move Statistics --------- " << std::endl << "Move\t\% Success" << std::endl;
47     for (unsigned int i = 0; i < stats\&.size(); ++i) {
48         double prod = 1\&.0;
49         for (unsigned int j = 0; j < stats[i]\&.size(); ++j) {
50             prod *= stats[i][j];
51             statFile << ownedMoves_[i]->myName() << " (from M = " << j << ")\t" << stats[i][j]*100\&.0 << std::endl;
52         }
53         if (stats[i]\&.size() > 1) {
54             statFile << "-------------------------------------\nProduct of percentages (%) = " << prod*100 << "\n-------------------------------------" << std::endl;
55         }
56     }
57     statFile << "------------------------------------ " << std::endl;
58     statFile\&.close();
59 }
.fi
.SS "std::vector< std::vector< double > > moves::reportMoveStatistics ()"

.PP
Report the statistics on the success/failure of each move made so far\&. If the move changes total number of particles in the system, there is a column for each expanded state it traverses\&.
.PP
\fBReturns:\fP
.RS 4
ans Number of Success / Total Attempts for each move 
.RE
.PP

.PP
Definition at line 221 of file mover\&.cpp\&.
.PP
Referenced by print()\&.
.PP
.nf
221                                                                 {
222     std::vector < std::vector < double > > ans = succeeded_;
223     if (attempted_\&.begin() == attempted_\&.end()) {
224         throw customException ("No moves added to system");
225     }
226     for (unsigned int i = 0; i < attempted_\&.size(); ++i) {
227         for (unsigned int j = 0; j < attempted_[i]\&.size(); ++j) {
228             ans[i][j] /= attempted_[i][j];
229         }
230     }
231     return ans;
232 }
.fi
.SS "std::vector< double > moves::reportProbabilities ()\fC [inline]\fP"

.PP
Echo the normalized probabilities of each move in the object\&. 
.PP
Definition at line 34 of file mover\&.h\&.
.SS "void moves::setM (const intM)"

.PP
Set the value of M\&. 
.PP
\fBParameters:\fP
.RS 4
\fIin\fP M Number of expanded ensemble stages for insert/delete moves 
.RE
.PP

.PP
Definition at line 22 of file mover\&.cpp\&.
.PP
Referenced by initialize(), and moves()\&.
.PP
.nf
22                              {
23     if (M > 0) {
24         M_ = M;
25     } else {
26         throw customException ("Error, number of expanded ensemble stages must be > 0");
27     }
28 }
.fi


.SH "Author"
.PP 
Generated automatically by Doxygen for Flat-Histogram Monte Carlo Simulation from the source code\&.
