.TH "/home/nam4/Desktop/sandbox/FHMCSimulation/src/utilities.h" 3 "Fri Dec 30 2016" "Version v0.1.0" "Flat-Histogram Monte Carlo Simulation" \" -*- nroff -*-
.ad l
.nh
.SH NAME
/home/nam4/Desktop/sandbox/FHMCSimulation/src/utilities.h \- 
.SH SYNOPSIS
.br
.PP
\fC#include <vector>\fP
.br
\fC#include <string>\fP
.br
\fC#include <sys/stat\&.h>\fP
.br
\fC#include <cstdio>\fP
.br
\fC#include <sstream>\fP
.br
\fC#include <cmath>\fP
.br
\fC#include <iomanip>\fP
.br
\fC#include <ctime>\fP
.br
\fC#include <time\&.h>\fP
.br
\fC#include <iostream>\fP
.br
\fC#include <stdio\&.h>\fP
.br
\fC#include 'global\&.h'\fP
.br
\fC#include 'rapidjson/include/rapidjson/document\&.h'\fP
.br
\fC#include 'rapidjson/include/rapidjson/writer\&.h'\fP
.br
\fC#include 'rapidjson/include/rapidjson/stringbuffer\&.h'\fP
.br
\fC#include 'rapidjson/include/rapidjson/filereadstream\&.h'\fP
.br
\fC#include 'rapidjson/include/rapidjson/prettywriter\&.h'\fP
.br

.SS "Functions"

.in +1c
.ti -1c
.RI "void \fBsendMsg\fP (const std::string msg)"
.br
.RI "\fISend a message to std::cout\&. \fP"
.ti -1c
.RI "void \fBsendErr\fP (const std::string msg)"
.br
.RI "\fISend a message to std::cerr\&. \fP"
.ti -1c
.RI "void \fBparseJson\fP (const std::string filename, rapidjson::Document &doc)"
.br
.RI "\fIParse a JSON file and return the corresponding document\&. \fP"
.ti -1c
.RI "void \fBpauseCode\fP (long int dur)"
.br
.RI "\fIPause the code for a certain time\&. \fP"
.ti -1c
.RI "void \fBpbc\fP (std::vector< double > &pos, const std::vector< double > &box)"
.br
.RI "\fIReplace a position inside a box assuming periodic boundary conditions\&. \fP"
.ti -1c
.RI "bool \fBfileExists\fP (std::string fileName)"
.br
.RI "\fIFunction to check whether a given file exists or not\&. \fP"
.ti -1c
.RI "double \fBrng\fP (int *idum)"
.br
.RI "\fIRandom number generator (from Numerical Recipes) \fP"
.ti -1c
.RI "double \fBpbcDist2\fP (const std::vector< double > &p1, const std::vector< double > &p2, const std::vector< double > &box)"
.br
.RI "\fICalculate the minimum image distance squared between two coordinates assuming periodic boundary conditions\&. \fP"
.ti -1c
.RI "std::string \fBgetTimeStamp\fP ()"
.br
.RI "\fIObtain instantaneous timestamp\&. \fP"
.ti -1c
.RI "template<typename T > std::string \fBnumToStr\fP (const T &val)"
.br
.RI "\fIConvert a number to a string with 15 digits of precision\&. \fP"
.ti -1c
.RI "std::vector< double > \fBrandom3DSurfaceVector\fP (const double magnitude)"
.br
.RI "\fIChose a random vector sampled from a random distribution on the surface of a sphere\&. \fP"
.ti -1c
.RI "std::vector< std::string > \fBsplitstr\fP (const std::string &s, char delim)"
.br
.RI "\fIC++ explode a string\&. \fP"
.ti -1c
.RI "std::vector< std::vector
.br
< double > > \fBrotationMatrix\fP (const double alpha, const double beta, const double gamma)"
.br
.RI "\fICreate 3D rotation matrix from angles (x, then y, then z) \fP"
.ti -1c
.RI "std::vector< std::vector
.br
< double > > \fBmatrixProduct\fP (std::vector< std::vector< double > > &mat1, std::vector< std::vector< double > > &mat2)"
.br
.RI "\fICompute product of 2 matrices, W = UV\&. \fP"
.in -1c
.SH "Function Documentation"
.PP 
.SS "bool fileExists (std::stringfileName)"

.PP
Function to check whether a given file exists or not\&. 
.PP
\fBParameters:\fP
.RS 4
\fIfileName\fP Name of file to check
.RE
.PP
\fBReturns:\fP
.RS 4
If file exists 
.RE
.PP

.PP
Definition at line 272 of file utilities\&.cpp\&.
.PP
Referenced by checkpoint::checkpoint(), checkpoint::dump(), checkpoint::load(), and tabulated::loadPotential()\&.
.PP
.nf
272                                     {
273     struct stat stFileInfo;
274 
275     if (stat(fileName\&.c_str(),&stFileInfo) == 0)
276         return true;
277     else
278         return false;
279 }
.fi
.SS "std::string getTimeStamp ()"

.PP
Obtain instantaneous timestamp\&. 
.PP
\fBReturns:\fP
.RS 4
char* timestamp 
.RE
.PP

.PP
Definition at line 91 of file utilities\&.cpp\&.
.PP
Referenced by checkpoint::dump(), moves::print(), sendErr(), and sendMsg()\&.
.PP
.nf
91                           {
92     time_t rawtime;
93     time (&rawtime);
94     struct tm * timeinfo;
95     timeinfo = localtime (&rawtime);
96     char timestamp [80];
97     strftime (timestamp,80,"%d/%m/%Y %H:%M:%S",timeinfo);
98     std::string ans (timestamp);
99     return ans;
100 }
.fi
.SS "std::vector< std::vector < double > > matrixProduct (std::vector< std::vector< double > > &mat1, std::vector< std::vector< double > > &mat2)"

.PP
Compute product of 2 matrices, W = UV\&. 
.PP
\fBParameters:\fP
.RS 4
\fImat1\fP Matrix U 
.br
\fImat2\fP Matrix V 
.RE
.PP
\fBReturns:\fP
.RS 4
W 
.RE
.PP

.PP
Definition at line 109 of file utilities\&.cpp\&.
.PP
Referenced by rotationMatrix()\&.
.PP
.nf
109                                                                                                                                       {
110     std::vector < double > dummy (3, 0);
111     std::vector < std::vector < double > > W (3, dummy);
112 
113     for (unsigned int i = 0; i < 3; ++i) {
114         for (unsigned int j = 0; j < 3; ++j) {
115             W[i][j] = mat1[i][j]*mat2[j][i];
116         }
117     }
118 
119     return W;
120 }
.fi
.SS "template<typename T > std::string numToStr (const T &val)"

.PP
Convert a number to a string with 15 digits of precision\&. 
.PP
\fBParameters:\fP
.RS 4
\fIval\fP Double precision value
.RE
.PP
\fBReturns:\fP
.RS 4
string Representation of this value 
.RE
.PP

.PP
Definition at line 44 of file utilities\&.h\&.
.PP
Referenced by moves::addDelete(), moves::addInsert(), simSystem::addPotential(), moves::addSwap(), moves::addTranslate(), checkBounds(), tabulated::energy(), initialize(), tabulated::loadPotential(), performCrossover(), performTMMC(), performWALA(), sanityChecks(), setConfig(), setMoves(), and setPairPotentials()\&.
.PP
.nf
44                                                          {
45    std::ostringstream os;
46    os << std::setprecision(15) << val;
47    return os\&.str();
48 }
.fi
.SS "void parseJson (const std::stringfilename, rapidjson::Document &doc)"

.PP
Parse a JSON file and return the corresponding document\&. 
.PP
\fBParameters:\fP
.RS 4
\fIfilename\fP Input JSON document's filename 
.br
\fIdoc\fP Document object to store in 
.RE
.PP

.PP
Definition at line 45 of file utilities\&.cpp\&.
.PP
References sendMsg()\&.
.PP
Referenced by initialize(), checkpoint::load(), and setConfig()\&.
.PP
.nf
45                                                                   {
46     try {
47         FILE* fp = fopen(filename\&.c_str(), "r");
48         char readBuffer[65536];
49         rapidjson::FileReadStream is(fp, readBuffer, sizeof(readBuffer));
50         doc\&.ParseStream(is);
51         fclose(fp);
52     } catch (\&.\&.\&.) {
53         throw customException ("Unable to parse "+filename);
54     }
55 
56     if (doc\&.IsObject()) {
57         sendMsg("Parsed JSON file "+filename);
58     } else {
59         throw customException ("Error in "+filename+", not begin detected as proper JSON document");
60     }
61 }
.fi
.SS "void pauseCode (long intdur)"

.PP
Pause the code for a certain time\&. 
.PP
\fBParameters:\fP
.RS 4
\fIdur\fP Number of seconds to pause for 
.RE
.PP

.PP
Definition at line 68 of file utilities\&.cpp\&.
.PP
.nf
68                               {
69     long int temp = time(NULL) + dur;
70     while(temp > time(NULL));
71 }
.fi
.SS "void pbc (std::vector< double > &pos, const std::vector< double > &box)"

.PP
Replace a position inside a box assuming periodic boundary conditions\&. 
.PP
\fBParameters:\fP
.RS 4
\fIpos\fP Position to be placed in box 
.br
\fIbox\fP Box dimensions 
.RE
.PP

.PP
Definition at line 228 of file utilities\&.cpp\&.
.PP
Referenced by hardWallZ::energy(), squareWellWallZ::energy(), rightTriangleXZ::energy(), hardWallZ::inside(), and squareWellWallZ::inside()\&.
.PP
.nf
228                                                                       {
229     // generally while loops are faster than round statements
230     for (unsigned int i = 0; i < pos\&.size(); ++i) {
231         while (pos[i] < 0\&.0) {
232             pos[i] += box[i];
233         }
234         while (pos[i] >= box[i]) {
235             pos[i] -= box[i];
236         }
237     }
238 }
.fi
.SS "double pbcDist2 (const std::vector< double > &p1, const std::vector< double > &p2, const std::vector< double > &box)"

.PP
Calculate the minimum image distance squared between two coordinates assuming periodic boundary conditions\&. Coordinates do not have to be in the box to begin with\&.
.PP
\fBParameters:\fP
.RS 4
\fI\\p1\fP Position 1 
.br
\fI\\p1\fP Position 2 
.br
\fI\\box\fP Box size
.RE
.PP
\fBReturns:\fP
.RS 4
d2 (distance squared) 
.RE
.PP

.PP
Definition at line 249 of file utilities\&.cpp\&.
.PP
Referenced by lennardJones::energy(), fsLennardJones::energy(), cylinderZ::energy(), tabulated::energy(), squareWell::energy(), hardCore::energy(), cylinderZ::inside(), and aggVolBias3::make()\&.
.PP
.nf
249                                                                                                                   {
250     double d2 = 0\&.0;
251     for (unsigned int i = 0; i < p2\&.size(); ++i) {
252         double dr = p2[i] - p1[i];
253         while (dr < -box[i]/2\&.0) {
254             dr += box[i];
255         }
256         while (dr > box[i]/2\&.0) {
257             dr -= box[i];
258         }
259         d2 += dr*dr;
260     }
261 
262     return d2;
263 }
.fi
.SS "std::vector< double > random3DSurfaceVector (const doublemagnitude)"

.PP
Chose a random vector sampled from a random distribution on the surface of a sphere\&. 
.PP
\fBParameters:\fP
.RS 4
\fImagnitude\fP Mangitude of the vector (radius of sphere)
.RE
.PP
\fBReturns:\fP
.RS 4
ans double3 containing coordinates of vector 
.RE
.PP

.PP
Definition at line 166 of file utilities\&.cpp\&.
.PP
References rng(), and RNG_SEED\&.
.PP
Referenced by aggVolBias3::make()\&.
.PP
.nf
166                                                                     {
167     int success = 0;
168     std::vector < double > ans (3, 0);
169     while (success == 0) {
170         double r1 = rng(&RNG_SEED), r2 = rng(&RNG_SEED), x1 = 1\&.0-2\&.0*r1, x2 = 1\&.0-2\&.0*r2;
171         double sum2 = x1*x1+x2*x2;
172         if (sum2 < 1\&.0) {
173             ans[0] = 2*x1*sqrt(1-sum2)*magnitude;
174             ans[1] = 2*x2*sqrt(1-sum2)*magnitude;
175             ans[2] = (1-2\&.0*sum2)*magnitude;
176             success = 1;
177         }
178     }
179     return ans;
180 }
.fi
.SS "double rng (int *idum)"

.PP
Random number generator (from Numerical Recipes) 
.PP
\fBParameters:\fP
.RS 4
\fIidum\fP seed
.RE
.PP
\fBReturns:\fP
.RS 4
temp Pseudo-random number between [0, 1) 
.RE
.PP

.PP
Definition at line 189 of file utilities\&.cpp\&.
.PP
References AM, IA1, IA2, IM1, IM2, IMM1, IQ1, IQ2, IR1, IR2, NDIV, NTAB, and RNMX\&.
.PP
Referenced by aggVolBias3::make(), deleteParticle::make(), translateParticle::make(), swapParticles::make(), insertParticle::make(), moves::makeMove(), random3DSurfaceVector(), and quaternion::setRandomRot()\&.
.PP
.nf
189                        {
190     int j;
191     long k;
192     static long idum2=123456789;
193     static long iy=0;
194     static long iv[NTAB];
195     double temp;
196 
197     if (*idum <= 0) {
198         if (-(*idum) < 1) *idum=1;
199         else *idum = -(*idum);
200         idum2=(*idum);
201         for (j=NTAB+7;j>=0;j--) {
202             k=(*idum)/IQ1;
203             *idum=IA1*(*idum-k*IQ1)-k*IR1;
204             if (*idum < 0) *idum += IM1;
205             if (j < NTAB) iv[j] = *idum;
206         } iy=iv[0];
207     }
208     k=(*idum)/IQ1;
209     *idum=IA1*(*idum-k*IQ1)-k*IR1;
210     if (*idum < 0) *idum += IM1;
211     k=idum2/IQ2;
212     idum2=IA2*(idum2-k*IQ2)-k*IR2;
213     if (idum2 < 0) idum2 += IM2;
214     j=iy/NDIV;
215     iy=iv[j]-idum2;
216     iv[j] = *idum;
217     if (iy < 1) iy += IMM1;
218     if ((temp=AM*iy) > RNMX) return RNMX;
219     else return temp;
220 }
.fi
.SS "std::vector< std::vector < double > > rotationMatrix (const doublealpha, const doublebeta, const doublegamma)"

.PP
Create 3D rotation matrix from angles (x, then y, then z) 
.PP
\fBParameters:\fP
.RS 4
\fIalpha\fP Radians to rotate centers by around x-axis 
.br
\fIbeta\fP Radians to rotate centers by around y-axis 
.br
\fIgamma\fP Radians to rotate centers by around z-axis 
.RE
.PP

.PP
Definition at line 129 of file utilities\&.cpp\&.
.PP
References matrixProduct()\&.
.PP
.nf
129                                                                                                               {
130 
131     std::vector < double > dummy (3, 0);
132     std::vector < std::vector < double > > Rx (3, dummy), Ry(3, dummy), Rz(3, dummy), Ryx, Rzyx;
133 
134     // https://en\&.wikipedia\&.org/wiki/Rotation_matrix#General_rotations
135     Rx[0][0] = 1\&.0;
136     Rx[1][1] = cos(alpha);
137     Rx[1][2] = -sin(alpha);
138     Rx[2][1] = sin(alpha);
139     Rx[2][2] = cos(alpha);
140 
141     Ry[0][0] = cos(beta);
142     Ry[0][2] = sin(beta);
143     Ry[1][1] = 1\&.0;
144     Ry[2][0] = -sin(beta);
145     Ry[2][2] = cos(beta);
146 
147     Rz[0][0] = cos(gamma);
148     Rz[0][1] = -sin(gamma);
149     Rz[1][0] = sin(gamma);
150     Rz[1][1] = cos(gamma);
151     Rz[2][2] = 1\&.0;
152 
153     Ryx = matrixProduct(Ry, Rx);
154     Rzyx = matrixProduct(Rz, Ryx);
155 
156     return Rzyx;
157 }
.fi
.SS "void sendErr (const std::stringmsg)"

.PP
Send a message to std::cerr\&. 
.PP
\fBParameters:\fP
.RS 4
\fImsg\fP Message as string 
.RE
.PP

.PP
Definition at line 35 of file utilities\&.cpp\&.
.PP
References getTimeStamp()\&.
.PP
Referenced by simSystem::addPotential(), checkBounds(), tabulated::energy(), initialize(), checkpoint::load(), moves::moves(), performCrossover(), performTMMC(), performWALA(), simSystem::readConfig(), sanityChecks(), setConfig(), and setMoves()\&.
.PP
.nf
35                                    {
36     std::cerr << " *** ERROR: " << getTimeStamp() << " : " << msg << " *** " << std::endl;
37 }
.fi
.SS "void sendMsg (const std::stringmsg)"

.PP
Send a message to std::cout\&. 
.PP
\fBParameters:\fP
.RS 4
\fImsg\fP Message as string 
.RE
.PP

.PP
Definition at line 26 of file utilities\&.cpp\&.
.PP
References getTimeStamp()\&.
.PP
Referenced by simSystem::addPotential(), initialize(), checkpoint::load(), tabulated::loadPotential(), parseJson(), performCrossover(), performTMMC(), performWALA(), simSystem::readConfig(), sanityChecks(), setBarriers(), and setConfig()\&.
.PP
.nf
26                                    {
27     std::cout << getTimeStamp() << " : " << msg << std::endl;
28 }
.fi
.SS "std::vector< std::string > splitstr (const std::string &s, chardelim)"

.PP
C++ explode a string\&. 
.PP
Definition at line 76 of file utilities\&.cpp\&.
.PP
.nf
76                                                                   {
77     std::stringstream ss(s);
78     std::string item;
79     std::vector <std::string> tokens;
80     while (std::getline(ss, item, delim)) {
81         tokens\&.push_back(item);
82     }
83     return tokens;
84 }
.fi
.SH "Author"
.PP 
Generated automatically by Doxygen for Flat-Histogram Monte Carlo Simulation from the source code\&.
