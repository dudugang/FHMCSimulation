.TH "swapParticles" 3 "Wed Jan 4 2017" "Version v0.1.0" "Flat-Histogram Monte Carlo Simulation" \" -*- nroff -*-
.ad l
.nh
.SH NAME
swapParticles \- 
.SH SYNOPSIS
.br
.PP
.PP
\fC#include <swap\&.h>\fP
.PP
Inherits \fBmcMove\fP\&.
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBswapParticles\fP ()"
.br
.ti -1c
.RI "\fBswapParticles\fP (const int typeIndex1, const int typeIndex2, const std::string tag)"
.br
.RI "\fIInstantiate a new move, also give a name which is the combination of a user-defined tag + the particle indices it operates on\&. \fP"
.ti -1c
.RI "int \fBmake\fP (\fBsimSystem\fP &sys)"
.br
.RI "\fISwap two particles of different types in the system\&. \fP"
.in -1c
.SS "Additional Inherited Members"
.SH "Detailed Description"
.PP 
Definition at line 14 of file swap\&.h\&.
.SH "Constructor & Destructor Documentation"
.PP 
.SS "swapParticles::swapParticles ()\fC [inline]\fP"

.PP
Definition at line 16 of file swap\&.h\&.
.PP
References mcMove::changeN_\&.
.PP
.nf
16 { changeN_ = false; }
.fi
.SS "swapParticles::swapParticles (const inttypeIndex1, const inttypeIndex2, const std::stringtag)\fC [inline]\fP"

.PP
Instantiate a new move, also give a name which is the combination of a user-defined tag + the particle indices it operates on\&. 
.PP
Definition at line 17 of file swap\&.h\&.
.PP
References mcMove::changeN_, mcMove::name_, and mcMove::typeIndex_\&.
.SH "Member Function Documentation"
.PP 
.SS "int swapParticles::make (\fBsimSystem\fP &sys)\fC [virtual]\fP"

.PP
Swap two particles of different types in the system\&. All other information is stored in the \fBsimSystem\fP object\&.
.PP
\fBParameters:\fP
.RS 4
\fIsys\fP System object to attempt to swap particles in\&.
.RE
.PP
\fBReturns:\fP
.RS 4
MOVE_SUCCESS if particles are swapped, otherwise MOVE_FAILURE if not\&. Will throw exceptions if there was an error\&. 
.RE
.PP

.PP
Implements \fBmcMove\fP\&.
.PP
Definition at line 10 of file swap\&.cpp\&.
.PP
References simSystem::atoms, simSystem::beta(), simSystem::box(), calculateBias(), simSystem::deleteAtom(), simSystem::getCurrentM(), simSystem::getFractionalAtom(), simSystem::getFractionalAtomType(), simSystem::getNeighborAtoms(), simSystem::getTotN(), simSystem::getWALABias(), simSystem::incrementEnergy(), simSystem::insertAtom(), MOVE_FAILURE, MOVE_SUCCESS, simSystem::nSpecies(), NUM_INFINITY, simSystem::numSpecies, atom::pos, simSystem::ppot, rng(), RNG_SEED, simSystem::speciesBarriers, simSystem::tmmcBias, mcMove::typeIndex_, wala::update(), tmmc::updateC(), simSystem::useTMMC, simSystem::useWALA, and customException::what()\&.
.PP
.nf
10                                        {
11     // Choose an atom of each type to try to exchange
12     int n1Avail = sys\&.numSpecies[typeIndex_];
13     if (sys\&.getCurrentM() > 0 && sys\&.getFractionalAtomType() == typeIndex_) {
14         n1Avail++;
15     }
16 
17     int n2Avail = sys\&.numSpecies[typeIndex2_];
18     if (sys\&.getCurrentM() > 0 && sys\&.getFractionalAtomType() == typeIndex2_) {
19         n2Avail++;
20     }
21 
22     if (n1Avail < 1 || n2Avail < 1) {
23         // Updates to biasing functions must be done even if at bounds
24         if (sys\&.useWALA) {
25             sys\&.getWALABias()->update(sys\&.getTotN(), sys\&.getCurrentM());
26         }
27         if (sys\&.useTMMC) {
28             sys\&.tmmcBias->updateC (sys\&.getTotN(), sys\&.getTotN(), sys\&.getCurrentM(), sys\&.getCurrentM(), 0\&.0);
29         }
30         return MOVE_FAILURE;
31     }
32 
33     // Because the locations are effectively being swapped, it is fair to select a partially inserted atom to be involved
34     const int a1 = (int) floor(rng (&RNG_SEED) * n1Avail);
35     const int a2 = (int) floor(rng (&RNG_SEED) * n2Avail);
36     atom a1_orig = sys\&.atoms[typeIndex_][a1], a1_new = a1_orig;
37     atom a2_orig = sys\&.atoms[typeIndex2_][a2], a2_new = a2_orig;
38 
39     // Positions will be exchanged, but no other property should change
40     a1_new\&.pos = a2_orig\&.pos;
41     a2_new\&.pos = a1_orig\&.pos;
42 
43     const std::vector < double > box = sys\&.box();
44     double V = 1\&.0;
45     for (unsigned int i = 0; i < box\&.size(); ++i) {
46         V *= box[i];
47     }
48 
49     double dU = 0\&.0;
50 
51     double delEnergy = 0\&.0;
52     for (unsigned int spec = 0; spec < sys\&.nSpecies(); ++spec) {
53         // Get positions of neighboring atoms around a1
54         std::vector < atom* > neighborAtoms = sys\&.getNeighborAtoms(spec, typeIndex_, &sys\&.atoms[typeIndex_][a1]);
55         for (unsigned int i = 0; i < neighborAtoms\&.size(); ++i) {
56             if (neighborAtoms[i] == &sys\&.atoms[typeIndex2_][a2]) {
57                 // Skip their interaction as they were already deleted - this is fine because their net pairwise interaction doesn't change over the course of the simulation - this means we don't have to actually re-insert the other atom / get its interation somehow later
58                 continue;
59             } else {
60                 try {
61                     delEnergy += sys\&.ppot[spec][typeIndex_]->energy(neighborAtoms[i], &sys\&.atoms[typeIndex_][a1], box);
62                 } catch (customException& ce) {
63                     std::string a = "Cannot delete because of energy error: ", b = ce\&.what();
64                     throw customException (a+b);
65                 }
66             }
67         }
68         // Add tail correction to potential energy -- only enable for fluid phase simulations
69 #ifdef FLUID_PHASE_SIMULATIONS
70         if (sys\&.ppot[spec][typeIndex_]->useTailCorrection) {
71             if (!(sys\&.getCurrentM() > 0 && sys\&.getFractionalAtom () == &sys\&.atoms[typeIndex_][a1])) {
72                 // Then a1 is not the partially inserted particle and tail interactions must be included
73                 if (spec == typeIndex_) {
74                     if (sys\&.numSpecies[spec]-1 > 0) {
75                         delEnergy += sys\&.ppot[spec][typeIndex_]->tailCorrection((sys\&.numSpecies[spec]-1)/V);
76                     }
77                 } else {
78                     if (sys\&.numSpecies[spec] > 0) {
79                         delEnergy += sys\&.ppot[spec][typeIndex_]->tailCorrection(sys\&.numSpecies[spec]/V);
80                     }
81                 }
82             }
83         }
84 #endif
85     }
86 
87     // Account for wall interaction energy
88     delEnergy += sys\&.speciesBarriers[typeIndex_]\&.energy(&sys\&.atoms[typeIndex_][a1], box);
89 
90     for (unsigned int spec = 0; spec < sys\&.nSpecies(); ++spec) {
91         // Get positions of neighboring atoms around a2
92         std::vector < atom* > neighborAtoms = sys\&.getNeighborAtoms(spec, typeIndex2_, &sys\&.atoms[typeIndex2_][a2]);
93         for (unsigned int i = 0; i < neighborAtoms\&.size(); ++i) {
94             if (neighborAtoms[i] == &sys\&.atoms[typeIndex_][a1]) {
95                 // Skip their interaction as they were already deleted - this is fine because their net pairwise interaction doesn't change over the course of the simulation - this means we don't have to actually re-insert the other atom / get its interation somehow later
96                 continue;
97             } else {
98                 try {
99                     delEnergy += sys\&.ppot[spec][typeIndex2_]->energy(neighborAtoms[i], &sys\&.atoms[typeIndex2_][a2], box);
100                 } catch (customException& ce) {
101                     std::string a = "Cannot delete because of energy error: ", b = ce\&.what();
102                     throw customException (a+b);
103                 }
104             }
105         }
106         // Add tail correction to potential energy -- only enable for fluid phase simulations
107 #ifdef FLUID_PHASE_SIMULATIONS
108         if (sys\&.ppot[spec][typeIndex2_]->useTailCorrection) {
109             if (!(sys\&.getCurrentM() > 0 && sys\&.getFractionalAtom () == &sys\&.atoms[typeIndex2_][a2])) {
110                 // Then a2 is not the partially inserted particle and tail interactions must be included
111                 if (spec == typeIndex2_) {
112                     if (sys\&.numSpecies[spec]-1 > 0) {
113                         delEnergy += sys\&.ppot[spec][typeIndex2_]->tailCorrection((sys\&.numSpecies[spec]-1)/V);
114                     }
115                 } else {
116                     if (sys\&.numSpecies[spec] > 0) {
117                         delEnergy += sys\&.ppot[spec][typeIndex2_]->tailCorrection(sys\&.numSpecies[spec]/V);
118                     }
119                 }
120             }
121         }
122 #endif
123     }
124 
125     // Account for wall interaction energy
126     delEnergy += sys\&.speciesBarriers[typeIndex2_]\&.energy(&sys\&.atoms[typeIndex2_][a2], box);
127 
128     double insEnergy = 0\&.0;
129 
130     // Account for wall interaction energy first to be more efficient
131     dU = sys\&.speciesBarriers[typeIndex_]\&.energy(&a1_new, box);
132     if (dU < NUM_INFINITY) {
133         insEnergy += dU;
134     } else {
135         insEnergy = NUM_INFINITY;
136     }
137 
138     if (insEnergy < NUM_INFINITY) {
139         // Account for wall interaction energy
140         dU = sys\&.speciesBarriers[typeIndex2_]\&.energy(&a2_new, box);
141         if (dU < NUM_INFINITY) {
142             insEnergy += dU;
143         } else {
144             insEnergy = NUM_INFINITY;
145         }
146     }
147 
148     if (insEnergy < NUM_INFINITY) {
149         for (unsigned int spec = 0; spec < sys\&.nSpecies(); ++spec) {
150             // Get positions of neighboring atoms around a1's (a2's) new (old) location
151             std::vector < atom* > neighborAtoms = sys\&.getNeighborAtoms(spec, typeIndex_, &a1_new);
152             for (unsigned int i = 0; i < neighborAtoms\&.size(); ++i) {
153                 // With these new "copy atoms" getNeighborAtoms can't guarantee it doesn't point to old self, so must check
154                 if ((neighborAtoms[i] == &sys\&.atoms[typeIndex2_][a2]) || (neighborAtoms[i] == &sys\&.atoms[typeIndex_][a1])) {
155                     continue;
156                 } else {
157                     try {
158                         dU = sys\&.ppot[spec][typeIndex_]->energy(neighborAtoms[i], &a1_new, box);
159                     } catch (customException& ce) {
160                         std::string a = "Cannot insert because of energy error: ", b = ce\&.what();
161                         throw customException (a+b);
162                     }
163                     if (dU < NUM_INFINITY) {
164                         insEnergy += dU;
165                     } else {
166                         insEnergy = NUM_INFINITY;
167                         break;
168                     }
169                 }
170             }
171             if (insEnergy == NUM_INFINITY) break; // Don't add anything if "infinite" already
172 
173             // Add tail correction to potential energy -- only enable for fluid phase simulations
174     #ifdef FLUID_PHASE_SIMULATIONS
175             if (sys\&.ppot[spec][typeIndex_]->useTailCorrection) {
176                 if (!(sys\&.getCurrentM() > 0 && sys\&.getFractionalAtom () == &sys\&.atoms[typeIndex_][a1])) {
177                     // Then a1 is not the partially inserted particle and tail interactions must be included
178                     if (spec == typeIndex_) {
179                         if (sys\&.numSpecies[spec]-1 > 0) {
180                             insEnergy += sys\&.ppot[spec][typeIndex_]->tailCorrection((sys\&.numSpecies[spec]-1)/V); // Never infinite
181                         }
182                     } else {
183                         if (sys\&.numSpecies[spec] > 0) {
184                             insEnergy += sys\&.ppot[spec][typeIndex_]->tailCorrection(sys\&.numSpecies[spec]/V); // Never infinite
185                         }
186                     }
187                 }
188             }
189     #endif
190         }
191     }
192 
193     if (insEnergy < NUM_INFINITY) {
194         for (unsigned int spec = 0; spec < sys\&.nSpecies(); ++spec) {
195             // Get positions of neighboring atoms around a2's (a1's) new (old) location
196             std::vector < atom* > neighborAtoms = sys\&.getNeighborAtoms(spec, typeIndex2_, &a2_new);
197             for (unsigned int i = 0; i < neighborAtoms\&.size(); ++i) {
198                 if ((neighborAtoms[i] == &sys\&.atoms[typeIndex_][a1]) || (neighborAtoms[i] == &sys\&.atoms[typeIndex2_][a2])) {
199                     continue;
200                 } else {
201                     try {
202                         dU = sys\&.ppot[spec][typeIndex2_]->energy(neighborAtoms[i], &a2_new, box);
203                     } catch (customException& ce) {
204                         std::string a = "Cannot insert because of energy error: ", b = ce\&.what();
205                         throw customException (a+b);
206                     }
207                     if (dU < NUM_INFINITY) {
208                         insEnergy += dU;
209                     } else {
210                         insEnergy = NUM_INFINITY;
211                         break;
212                     }
213                 }
214             }
215             if (insEnergy == NUM_INFINITY) break; // Don't add anything if "infinite" already
216 
217             // Add tail correction to potential energy -- only enable for fluid phase simulations
218     #ifdef FLUID_PHASE_SIMULATIONS
219             if (sys\&.ppot[spec][typeIndex2_]->useTailCorrection) {
220                 if (!(sys\&.getCurrentM() > 0 && sys\&.getFractionalAtom () == &sys\&.atoms[typeIndex2_][a2])) {
221                     // Then a2 is not the partially inserted particle and tail interactions must be included
222                     if (spec == typeIndex2_) {
223                         if (sys\&.numSpecies[spec]-1 > 0) {
224                             insEnergy += sys\&.ppot[spec][typeIndex2_]->tailCorrection((sys\&.numSpecies[spec]-1)/V); // Never infinite
225                         }
226                     } else {
227                         if (sys\&.numSpecies[spec] > 0) {
228                             insEnergy += sys\&.ppot[spec][typeIndex2_]->tailCorrection(sys\&.numSpecies[spec]/V); // Never infinite
229                         }
230                     }
231                 }
232             }
233     #endif
234         }
235     }
236 
237     // Biasing
238     double p_u = 0\&.0;
239     if (insEnergy < NUM_INFINITY) {
240         p_u = exp(-sys\&.beta()*(insEnergy - delEnergy));
241     }
242     double bias = calculateBias(sys, sys\&.getTotN(), sys\&.getCurrentM());
243 
244     // TMMC gets updated the same way, regardless of whether the move gets accepted
245     if (sys\&.useTMMC) {
246         sys\&.tmmcBias->updateC (sys\&.getTotN(), sys\&.getTotN(), sys\&.getCurrentM(), sys\&.getCurrentM(), std::min(1\&.0, p_u));
247     }
248 
249     if (rng (&RNG_SEED) < p_u*bias) { // Swap the particles by deleting/reinserting
250         sys\&.incrementEnergy(insEnergy - delEnergy);
251 
252         // -a1 completely
253         try {
254             sys\&.deleteAtom(typeIndex_, a1, true);
255         } catch (customException &ce) {
256             std::string a = "Failed to delete atom during swapping: ", b = ce\&.what();
257             throw customException (a+b);
258         }
259 
260         // -a2 completely
261         try {
262             sys\&.deleteAtom(typeIndex2_, a2, true);
263         } catch (customException &ce) {
264             std::string a = "Failed to delete atom during swapping: ", b = ce\&.what();
265             throw customException (a+b);
266         }
267 
268         // +a1_new completely
269         try {
270             sys\&.insertAtom(typeIndex_, &a1_new, true);
271         } catch (customException &ce) {
272             std::string a = "Failed to insert atom during swapping: ", b = ce\&.what();
273             throw customException (a+b);
274         }
275 
276         // +a2_new completely
277         try {
278             sys\&.insertAtom(typeIndex2_, &a2_new, true);
279         } catch (customException &ce) {
280             std::string a = "Failed to insert atom during swapping: ", b = ce\&.what();
281             throw customException (a+b);
282         }
283 
284         // Update Wang-Landau bias, if used
285         if (sys\&.useWALA) {
286             sys\&.getWALABias()->update(sys\&.getTotN(), sys\&.getCurrentM());
287         }
288         return MOVE_SUCCESS;
289     }
290 
291     // Update Wang-Landau bias (even if moved failed), if used
292     if (sys\&.useWALA) {
293         sys\&.getWALABias()->update(sys\&.getTotN(), sys\&.getCurrentM());
294     }
295 
296     return MOVE_FAILURE;
297 }
.fi


.SH "Author"
.PP 
Generated automatically by Doxygen for Flat-Histogram Monte Carlo Simulation from the source code\&.
