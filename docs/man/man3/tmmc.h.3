.TH "/home/nam4/Desktop/sandbox/FHMCSimulation/src/tmmc.h" 3 "Wed Jan 4 2017" "Version v0.1.0" "Flat-Histogram Monte Carlo Simulation" \" -*- nroff -*-
.ad l
.nh
.SH NAME
/home/nam4/Desktop/sandbox/FHMCSimulation/src/tmmc.h \- 
.SH SYNOPSIS
.br
.PP
\fC#include <memory>\fP
.br
\fC#include 'system\&.h'\fP
.br
\fC#include 'checkpoint\&.h'\fP
.br
\fC#include 'utilities\&.h'\fP
.br
\fC#include 'mover\&.h'\fP
.br
\fC#include 'sanity\&.h'\fP
.br

.SS "Functions"

.in +1c
.ti -1c
.RI "void \fBperformTMMC\fP (\fBsimSystem\fP &sys, \fBcheckpoint\fP &res, \fBmoves\fP *usedMovesPr)"
.br
.RI "\fIPerform TMMC stage of simulation\&. \fP"
.in -1c
.SH "Function Documentation"
.PP 
.SS "void performTMMC (\fBsimSystem\fP &sys, \fBcheckpoint\fP &res, \fBmoves\fP *usedMovesPr)"

.PP
Perform TMMC stage of simulation\&. 
.PP
\fBParameters:\fP
.RS 4
\fIsys\fP System to simulate 
.br
\fIres\fP Restart/checkpoint information 
.br
\fIusedMovesPr\fP Move class to use 
.RE
.PP

.PP
Definition at line 10 of file tmmc\&.cpp\&.
.PP
References tmmc::calculatePI(), checkpoint::check(), tmmc::checkFullyVisited(), simSystem::crossoverTotalStepCounter, simSystem::getCurrentM(), simSystem::getTMMCBias(), simSystem::getTotalM(), tmmc::iterateForward(), moves::makeMove(), checkpoint::moveCounter, numToStr(), moves::print(), tmmc::print(), simSystem::printEnergyHistogram(), simSystem::printExtMoments(), simSystem::printPkHistogram(), simSystem::printSnapshot(), tmmc::readC(), simSystem::recordEnergyHistogram(), simSystem::recordExtMoments(), simSystem::recordPkHistogram(), simSystem::refineEnergyHistogramBounds(), simSystem::refinePkHistogramBounds(), checkpoint::resFromTMMC, simSystem::restartFromTMMC, simSystem::restartFromTMMCFile, sanityChecks(), sendErr(), sendMsg(), simSystem::startTMMC(), simSystem::stopTMMC(), checkpoint::sweepCounter, SYS_FAILURE, checkpoint::tmmcDone, simSystem::tmmcSweepSize, simSystem::tmmcTotalStepCounter, simSystem::totalTMMCSweeps, simSystem::totNMax(), simSystem::totNMin(), simSystem::useTMMC, simSystem::useWALA, simSystem::walaTotalStepCounter, and customException::what()\&.
.PP
.nf
10                                                                        {
11     if (res\&.tmmcDone) {
12         throw customException ("Checkpoint indicates TMMC already finished");
13     }
14     sendMsg("Beginning TMMC");
15 
16     // Specifically for printing progress every 1% of the simulation
17     const long long int numSweepSnaps = 100;
18     unsigned long long int sweepPrint = sys\&.totalTMMCSweeps, printCounter = 0;
19     if (sys\&.totalTMMCSweeps >= numSweepSnaps) {
20         sweepPrint /= numSweepSnaps;
21     }
22 
23     res\&.tmmcDone = false;
24     unsigned long long int sweep = 0;
25     unsigned long long int counter = 0;
26     if (!res\&.resFromTMMC) {
27         if (sys\&.useWALA) {
28             throw customException ("WALA not deactivated, cannot proceeed with TMMC");
29         }
30         if (sys\&.restartFromTMMC) {
31             if (!sys\&.useTMMC) {
32                 // In case where not restarting from checkpoint, but starting fresh from TMMC, crossover stage was skipped so TMMC has not been activated yet
33                 sys\&.startTMMC (sys\&.tmmcSweepSize, sys\&.getTotalM());
34             }
35             try {
36                 sys\&.getTMMCBias()->readC(sys\&.restartFromTMMCFile); // read collection matrix
37                 sys\&.getTMMCBias()->calculatePI();
38                 sendMsg("Restarted TMMC from collection matrix from "+sys\&.restartFromTMMCFile);
39             } catch (customException &ce) {
40                 sys\&.stopTMMC(); // Deallocate
41                 std::string msg = ce\&.what();
42                 sendErr("Failed to initialize from TMMC collection matrix : "+msg);
43                 exit(SYS_FAILURE);
44             }
45         }
46     } else {
47         printCounter = res\&.moveCounter;
48         sweep = res\&.sweepCounter;
49     }
50 
51     sendMsg("Starting progress stage from "+numToStr(printCounter)+"/"+numToStr(std::min(numSweepSnaps, sys\&.totalTMMCSweeps)));
52     sendMsg("Starting from "+numToStr(sweep)+"/"+numToStr(sys\&.totalTMMCSweeps)+" total TMMC sweeps");
53 
54     unsigned long long int checkPoint = sys\&.tmmcSweepSize*(sys\&.totNMax() - sys\&.totNMin() + 1)*3; // how often to check full traversal of collection matrix
55     while (sweep < sys\&.totalTMMCSweeps) {
56         bool done = false;
57 
58         // Perform a sweep
59         while (!done) {
60             try {
61                 usedMovesPr->makeMove(sys);
62                 sys\&.tmmcTotalStepCounter += 1\&.0;
63             } catch (customException &ce) {
64                 sendErr(ce\&.what());
65                 exit(SYS_FAILURE);
66             }
67 
68             // Only record properties of the system when it is NOT in an intermediate state
69             if (sys\&.getCurrentM() == 0) {
70                 sys\&.recordEnergyHistogram();
71                 sys\&.recordPkHistogram();
72                 sys\&.recordExtMoments();
73             }
74 
75             // Check if sweep is done
76             if (counter%checkPoint == 0) {
77                 done = sys\&.getTMMCBias()->checkFullyVisited();
78                 counter = 0;
79             }
80 
81             counter++;
82             res\&.check(sys, printCounter, sweep, false);
83         }
84 
85         sys\&.getTMMCBias()->iterateForward(); // Reset the counting matrix and increment total sweep number
86         sweep++;
87 
88         sendMsg("Finished "+numToStr(sweep)+"/"+numToStr(sys\&.totalTMMCSweeps)+" total TMMC sweeps");
89 
90         sys\&.getTMMCBias()->calculatePI(); // Update biasing function from collection matrix
91 
92         // Periodically write out checkpoints to monitor convergence properties later - all are used in FHMCAnalysis at this point (12/22/16)
93         if (sweep%sweepPrint == 0) {
94             try {
95                 printCounter++;
96                 sys\&.getTMMCBias()->print("tmmc-Checkpoint-"+numToStr(printCounter), false, false); // true, false);
97                 sys\&.refineEnergyHistogramBounds();
98                 sys\&.printEnergyHistogram("eHist-Checkpoint-"+numToStr(printCounter));
99                 sys\&.refinePkHistogramBounds();
100                 sys\&.printPkHistogram("pkHist-Checkpoint-"+numToStr(printCounter));
101                 sys\&.printExtMoments("extMom-Checkpoint-"+numToStr(printCounter));
102                 usedMovesPr->print("tmmc\&.stats");
103             } catch (std::exception &ex) {
104                 const std::string msg = ex\&.what();
105                 throw customException ("Unable to print checkpoint : "+msg);
106             }
107         }
108     }
109 
110     // Print final results
111     try {
112         sys\&.getTMMCBias()->print("final", false, false);
113         sys\&.refineEnergyHistogramBounds();
114         sys\&.printEnergyHistogram("final_eHist");
115         sys\&.refinePkHistogramBounds();
116         sys\&.printPkHistogram("final_pkHist");
117         sys\&.printExtMoments("final_extMom");
118         sys\&.printSnapshot("final\&.xyz", "last configuration");
119         usedMovesPr->print("tmmc\&.stats");
120         sanityChecks(sys);
121     } catch (std::exception &ex) {
122         const std::string msg = ex\&.what();
123         throw customException ("Unable to print final TMMC results : "+msg);
124     }
125 
126     res\&.tmmcDone = true; // Do not need to dump a checkpoint
127     sendMsg("Completed "+numToStr(sys\&.tmmcTotalStepCounter)+" total MC steps as part of TMMC stage");
128     sendMsg("Total MC steps taken in simulation: "+numToStr(sys\&.walaTotalStepCounter+sys\&.crossoverTotalStepCounter+sys\&.tmmcTotalStepCounter));
129 }
.fi
.SH "Author"
.PP 
Generated automatically by Doxygen for Flat-Histogram Monte Carlo Simulation from the source code\&.
