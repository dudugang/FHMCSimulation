.TH "hardCore" 3 "Thu Dec 29 2016" "Version v0.1.0" "Flat-Histogram Monte Carlo Simulation" \" -*- nroff -*-
.ad l
.nh
.SH NAME
hardCore \- 
.PP
Hard-core potential Parameters should be specified in the following order: { sigma, Mtot }\&.  

.SH SYNOPSIS
.br
.PP
.PP
\fC#include <potentials\&.h>\fP
.PP
Inherits \fBpairPotential\fP\&.
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fB~hardCore\fP ()"
.br
.ti -1c
.RI "void \fBsetParameters\fP (const std::vector< double > params)"
.br
.RI "\fISet the parameters in the hard-core potential\&. \fP"
.ti -1c
.RI "double \fBenergy\fP (const \fBatom\fP *a1, const \fBatom\fP *a2, const std::vector< double > &box)"
.br
.RI "\fIReturn the energy of two particles\&. \fP"
.ti -1c
.RI "double \fBtailCorrection\fP (const double rhoBath)"
.br
.RI "\fITail correction for a hard core potential always returns 0 radius\&. \fP"
.ti -1c
.RI "double \fBrcut\fP ()"
.br
.RI "\fIReturn the value of r_{cut} for this potential\&. \fP"
.in -1c
.SS "Additional Inherited Members"
.SH "Detailed Description"
.PP 
Hard-core potential Parameters should be specified in the following order: { sigma, Mtot }\&. 
.PP
Definition at line 114 of file potentials\&.h\&.
.SH "Constructor & Destructor Documentation"
.PP 
.SS "hardCore::~hardCore ()\fC [inline]\fP"

.PP
Definition at line 116 of file potentials\&.h\&.
.PP
.nf
116 {;}
.fi
.SH "Member Function Documentation"
.PP 
.SS "double hardCore::energy (const \fBatom\fP *a1, const \fBatom\fP *a2, const std::vector< double > &box)\fC [virtual]\fP"

.PP
Return the energy of two particles\&. 
.PP
\fBParameters:\fP
.RS 4
\fIa1\fP Atom 1 
.br
\fIa2\fP Atom 2 
.br
\fIbox\fP Simulation box dimensions
.RE
.PP
\fBReturns:\fP
.RS 4
U(r) 
.RE
.PP

.PP
Implements \fBpairPotential\fP\&.
.PP
Definition at line 607 of file potentials\&.cpp\&.
.PP
References atom::mState, NUM_INFINITY, pairPotential::paramsAreSet_, pbcDist2(), and atom::pos\&.
.PP
.nf
607                                                                                         {
608     if (!paramsAreSet_) {
609         throw customException ("For hardCore parameters not set");
610     }
611 
612     int mState = 0;
613     if (a1->mState != 0) {
614         mState = a1->mState;
615     }
616     if (a2->mState != 0) {
617         mState = a2->mState;
618     }
619 
620     const double r = sqrt(pbcDist2(a1->pos, a2->pos, box));
621 
622     if (r < sigmaM_[mState]) {
623         return NUM_INFINITY;
624     } else {
625         return 0\&.0;
626     }
627 }
.fi
.SS "double hardCore::rcut ()\fC [virtual]\fP"

.PP
Return the value of r_{cut} for this potential\&. 
.PP
\fBReturns:\fP
.RS 4
r_cut 
.RE
.PP

.PP
Implements \fBpairPotential\fP\&.
.PP
Definition at line 645 of file potentials\&.cpp\&.
.PP
References pairPotential::params_, and pairPotential::paramsAreSet_\&.
.PP
.nf
645                        {
646     if (!paramsAreSet_) {
647         throw customException ("For hardCore parameters not set");
648     } else {
649         if (fabs(params_[0]) < 1\&.0e-12) {
650             // in case sigma = 0 (used for ideal gas case) just return finite value for cell lists
651             return 1\&.0;
652         } else {
653             return (params_[0]);
654         }
655     }
656 }
.fi
.SS "void hardCore::setParameters (const std::vector< double >params)\fC [virtual]\fP"

.PP
Set the parameters in the hard-core potential\&. 
.PP
\fBParameters:\fP
.RS 4
\fIparams\fP Vector of inputs: {sigma, Mtot} 
.RE
.PP

.PP
Implements \fBpairPotential\fP\&.
.PP
Definition at line 562 of file potentials\&.cpp\&.
.PP
References pairPotential::params_, pairPotential::paramsAreSet_, and pairPotential::useTailCorrection\&.
.PP
.nf
562                                                                {
563     if (params\&.size() != 2) {
564         throw customException ("For hardCore must specify 2 parameter: {sigma, Mtot}");
565     } else {
566         if (params[0] < 0) {
567             throw customException ("For hardCore, sigma >= 0");
568         }
569         if (int(params[1]) < 1) {
570             throw customException ("For hardCore, total expanded ensemble state, Mtot >= 1");
571         }
572 
573         params_ = params;
574         paramsAreSet_ = true;
575 
576         useTailCorrection = false;
577 
578         // use a "constant volume" scheme to distribute the stages
579         sigmaM_\&.resize(int(params[1]), 0);
580         for (int i = 0; i < sigmaM_\&.size(); ++i) {
581             if (i == 0) {
582                 // fully inserted
583                 sigmaM_[i] = params[0];
584             } else {
585                 // use volume scaling so each stage is separated from its neighbors by the same dV
586                 double lastSigma = 0;
587                 if (i == 1) {
588                     lastSigma = 0;
589                 } else {
590                     lastSigma = sigmaM_[i-1];
591                 }
592                 sigmaM_[i] = pow(params[0]*params[0]*params[0]/(8\&.0*int(params[1])) + lastSigma*lastSigma*lastSigma, 1\&./3\&.);
593             }
594         }
595     }
596 }
.fi
.SS "double hardCore::tailCorrection (const doublerhoBath)\fC [virtual]\fP"

.PP
Tail correction for a hard core potential always returns 0 radius\&. 
.PP
\fBParameters:\fP
.RS 4
\fINumber\fP density of the surrounding fluid
.RE
.PP
\fBReturns:\fP
.RS 4
U_tail 
.RE
.PP

.PP
Implements \fBpairPotential\fP\&.
.PP
Definition at line 636 of file potentials\&.cpp\&.
.PP
.nf
636                                                     {
637     return 0\&.0;
638 }
.fi


.SH "Author"
.PP 
Generated automatically by Doxygen for Flat-Histogram Monte Carlo Simulation from the source code\&.
