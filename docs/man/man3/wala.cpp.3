.TH "/home/nam4/Desktop/sandbox/FHMCSimulation/src/wala.cpp" 3 "Wed Jan 4 2017" "Version v0.1.0" "Flat-Histogram Monte Carlo Simulation" \" -*- nroff -*-
.ad l
.nh
.SH NAME
/home/nam4/Desktop/sandbox/FHMCSimulation/src/wala.cpp \- 
.SH SYNOPSIS
.br
.PP
\fC#include 'wala\&.h'\fP
.br

.SS "Functions"

.in +1c
.ti -1c
.RI "void \fBperformWALA\fP (\fBsimSystem\fP &sys, \fBcheckpoint\fP &res, \fBmoves\fP *usedMovesEq)"
.br
.RI "\fIPerform Wang-Landau stage of simulation\&. \fP"
.in -1c
.SH "Function Documentation"
.PP 
.SS "void performWALA (\fBsimSystem\fP &sys, \fBcheckpoint\fP &res, \fBmoves\fP *usedMovesEq)"

.PP
Perform Wang-Landau stage of simulation\&. 
.PP
\fBParameters:\fP
.RS 4
\fIsys\fP System to simulate 
.br
\fIres\fP Restart/checkpoint information 
.br
\fIusedMovesEq\fP Move class to use 
.RE
.PP

.PP
Definition at line 10 of file wala\&.cpp\&.
.PP
References checkpoint::check(), simSystem::checkEnergyHistogramBounds(), wala::evaluateFlatness(), simSystem::getCurrentM(), simSystem::getTotalM(), simSystem::getWALABias(), wala::iterateForward(), wala::lnF(), simSystem::lnF_end, simSystem::lnF_start, moves::makeMove(), checkpoint::moveCounter, numToStr(), moves::print(), wala::readlnPI(), checkpoint::resFromWALA, simSystem::restartFromWALA, simSystem::restartFromWALAFile, sanityChecks(), sendErr(), sendMsg(), simSystem::startWALA(), SYS_FAILURE, simSystem::useTMMC, simSystem::useWALA, simSystem::wala_g, simSystem::wala_s, checkpoint::walaDone, simSystem::walaTotalStepCounter, customException::what(), and simSystem::wlSweepSize\&.
.PP
.nf
10                                                                        {
11     if (res\&.walaDone) {
12         throw customException ("Checkpoint indicates WALA already finished");
13     }
14     sendMsg("Beginning Wang-Landau");
15 
16     bool flat = false;
17     double lnF = sys\&.lnF_start;
18     long long int moveStart = 0;
19 
20     if (!res\&.resFromWALA) {
21         if (sys\&.useTMMC or sys\&.useWALA) {
22             throw customException ("WALA or TMMC already active, cannot proceeed with WALA");
23         }
24 
25         sys\&.startWALA (lnF, sys\&.wala_g, sys\&.wala_s, sys\&.getTotalM());
26         if (sys\&.restartFromWALA) {
27             // Specified to start WALA from a lnPI guess, and this is not a restart from a checkpoint
28             try {
29                 sys\&.getWALABias()->readlnPI(sys\&.restartFromWALAFile);
30             } catch (customException &ce) {
31                 sendErr(ce\&.what());
32                 exit(SYS_FAILURE);
33             }
34             sendMsg("Read initial lnPI for Wang-Landau from "+sys\&.restartFromWALAFile);
35         }
36     } else {
37         lnF = sys\&.getWALABias()->lnF(); // Checkpoint re-initialized to starting value
38         moveStart = res\&.moveCounter; // Loop in current lnF stage
39     }
40 
41     sendMsg("Initial lnF = "+numToStr(sys\&.getWALABias()->lnF()));
42     sendMsg("Starting from "+numToStr(moveStart)+" moves");
43 
44     while (lnF > sys\&.lnF_end) {
45         for (unsigned long long int move = moveStart; move < sys\&.wlSweepSize; ++move) {
46             try {
47                 usedMovesEq->makeMove(sys);
48                 sys\&.walaTotalStepCounter += 1\&.0;
49             } catch (customException &ce) {
50                 sendErr(ce\&.what());
51                 exit(SYS_FAILURE);
52             }
53             if (sys\&.getCurrentM() == 0){
54                 sys\&.checkEnergyHistogramBounds ();
55             }
56             res\&.check(sys, move, 0, false);
57         }
58 
59         // Check if bias has flattened out
60         flat = sys\&.getWALABias()->evaluateFlatness();
61         if (flat) {
62             sys\&.getWALABias()->iterateForward(); // If flat, need to reset H and reduce lnF
63             lnF = sys\&.getWALABias()->lnF();
64             flat = false;
65             sendMsg("Wang-Landau is now flat, new lnF = "+numToStr(lnF));
66             usedMovesEq->print("wala\&.stats");
67         }
68     }
69 
70     sanityChecks(sys);
71     res\&.walaDone = true; // Do not need to dump a checkpoint
72     sendMsg("Completed "+numToStr(sys\&.walaTotalStepCounter)+" total MC steps as part of Wang-Landau stage");
73     sendMsg("Total MC steps taken in simulation: "+numToStr(sys\&.walaTotalStepCounter));
74 }
.fi
.SH "Author"
.PP 
Generated automatically by Doxygen for Flat-Histogram Monte Carlo Simulation from the source code\&.
