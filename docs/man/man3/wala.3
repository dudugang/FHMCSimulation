.TH "wala" 3 "Wed Jan 4 2017" "Version v0.1.0" "Flat-Histogram Monte Carlo Simulation" \" -*- nroff -*-
.ad l
.nh
.SH NAME
wala \- 
.PP
Wang-Landau biasing class\&.  

.SH SYNOPSIS
.br
.PP
.PP
\fC#include <bias\&.h>\fP
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBwala\fP ()"
.br
.ti -1c
.RI "\fBwala\fP (const double \fBlnF\fP, const double g, const double s, const int Nmax, const int Nmin, const int Mtot, const std::vector< double > box)"
.br
.RI "\fIWang-Landau biasing constructor\&. \fP"
.ti -1c
.RI "void \fBupdate\fP (const int Nval, const int Mval)"
.br
.RI "\fIUpdate the estimate of the macrostate distribution\&. \fP"
.ti -1c
.RI "void \fBiterateForward\fP ()"
.br
.RI "\fIThis should only be called when the 'flatness' criterion is met\&. \fP"
.ti -1c
.RI "void \fBprint\fP (const std::string fileName, const bool printH=false)"
.br
.RI "\fIPrint the UN-NORMALIZED biasing function (lnPI) and possible the visted states histogram to files\&. \fP"
.ti -1c
.RI "void \fBreadlnPI\fP (const std::string fileName)"
.br
.RI "\fIRead the macrostate distribution (biasing function) from a file\&. \fP"
.ti -1c
.RI "void \fBreadH\fP (const std::string fileName)"
.br
.RI "\fIRead the visited states histogram from a file\&. \fP"
.ti -1c
.RI "void \fBsetlnPI\fP (const std::vector< double > &lnPIguess)"
.br
.RI "\fIBlindly assign a guess of the macrostate distribution\&. \fP"
.ti -1c
.RI "bool \fBevaluateFlatness\fP ()"
.br
.RI "\fIEvaluate if the visited states histogram is approxiamtely 'flat'\&. \fP"
.ti -1c
.RI "const long long int \fBgetAddress\fP (const int Nval, const int Mval)"
.br
.RI "\fIFor multidimensional Wang-Landau biasing, get the 1D coordinate of the macrostate distribution estimate (bias) for multidimensional data\&. \fP"
.ti -1c
.RI "const double \fBlnF\fP ()"
.br
.ti -1c
.RI "const double \fBgetBias\fP (const int address)"
.br
.ti -1c
.RI "const std::vector< double > \fBgetlnPI\fP ()"
.br
.RI "\fIReturn the current estimate of the macrostate distribution\&. \fP"
.ti -1c
.RI "const std::vector< double > \fBgetH\fP ()"
.br
.RI "\fIReturn the visited-states histogram\&. \fP"
.in -1c
.SH "Detailed Description"
.PP 
Wang-Landau biasing class\&. 
.PP
Definition at line 56 of file bias\&.h\&.
.SH "Constructor & Destructor Documentation"
.PP 
.SS "wala::wala ()\fC [inline]\fP"

.PP
Definition at line 58 of file bias\&.h\&.
.PP
.nf
58 {};
.fi
.SS "wala::wala (const doublelnF, const doubleg, const doubles, const intNmax, const intNmin, const intMtot, const std::vector< double >box)"

.PP
Wang-Landau biasing constructor\&. 
.PP
\fBParameters:\fP
.RS 4
\fIlnF\fP Factor by which the estimate of the density of states in updated each time it is visited\&. 
.br
\fIg\fP Factor by which lnF is reduced (multiplied) once 'flatness' has been achieved\&. 
.br
\fIs\fP Factor by which the min(H) must be within the mean of H to be considered 'flat', e\&.g\&. 0\&.8 --> min is within 20% error of mean 
.br
\fINmax\fP Upper bound for total number of particles\&. 
.br
\fINmin\fP Lower bound for total number of particles\&. 
.br
\fIMtot\fP Total number of expanded ensemble states in a system\&. 
.br
\fIbox\fP Vector of simulation box size\&. 
.RE
.PP

.PP
Definition at line 405 of file bias\&.cpp\&.
.PP
References lnF()\&.
.PP
.nf
405                                                                                                                                           {
406     if (lnF < 0) {
407         throw customException ("lnF in Wang-Landau cannot be < 0");
408     }
409     lnF_ = lnF;
410 
411     if (g <= 0 || g >= 1) {
412         throw customException ("In Wang-Landau 0 < g < 1");
413     }
414     g_ = g;
415 
416     if (s <= 0 || s >= 1) {
417         throw customException ("In Wang-Landau 0 < s < 1");
418     }
419     s_ = s;
420 
421     if (Nmin > Nmax) {
422         throw customException ("Nmin > Nmax in Wang-Landau object");
423     }
424 
425     if (Nmin < 0) {
426         throw customException ("Nmin < 0 in Wang-Landau object");
427     }
428 
429     if (Mtot < 1) {
430         throw customException ("Mtot < 1 in Wang-Landau object");
431     }
432     Mtot_ = Mtot;
433 
434     if (box\&.size() != 3) {
435         throw customException ("Illegal number of box dimensions in Wang-Landau");
436     }
437     for (unsigned int i = 0; i < box\&.size(); ++i) {
438         if (box[i] < 0) {
439             throw customException ("Illegal box dimensions in Wang-Landau");
440         }
441     }
442     box_\&.resize(3, 0);
443     box_ = box;
444 
445     long long int size = (Nmax - Nmin + 1);
446 
447     Nmin_ = Nmin;
448     Nmax_ = Nmax;
449 
450     // attempt to allocate memory for macrostate distribution matrix and initializes it all to 0
451     try {
452         lnPI_\&.resize(size*Mtot_, 0\&.0);
453     } catch (const std::bad_alloc &ce) {
454         throw customException ("Out of memory, cannot allocate space for macrostate distribution matrix in wala");
455     }
456 
457     // initialize the visited-states histogram
458     try {
459         H_\&.resize(size*Mtot_, 0\&.0);
460     } catch (const std::bad_alloc &ce) {
461         throw customException ("Out of memory, cannot allocate space for visited-states histogram in wala");
462     }
463 }
.fi
.SH "Member Function Documentation"
.PP 
.SS "bool wala::evaluateFlatness ()"

.PP
Evaluate if the visited states histogram is approxiamtely 'flat'\&. 
.PP
\fBReturns:\fP
.RS 4
Returns whether the histogram is flat or not\&. 
.RE
.PP

.PP
Definition at line 495 of file bias\&.cpp\&.
.PP
References specExp\&.
.PP
Referenced by performCrossover(), and performWALA()\&.
.PP
.nf
495                              {
496     double min = H_[0], lnMean = -DBL_MAX;
497     for (unsigned int i = 0; i < H_\&.size() - (Mtot_-1); ++i) { // insert routine prevents the sampling past N = Nmax, M = 0, so N = Nmax and M > 0 are validly empty
498         if (H_[i] < min) {
499             min = H_[i];
500         }
501 
502         // summing so many doubles may overrun DBL_MAX, so instead track the lnMean
503         lnMean = specExp(lnMean, log(H_[i]));
504     }
505     lnMean -= log(H_\&.size() - (Mtot_-1));
506 
507     if (log(min) - lnMean > log(s_)) {
508         return true;
509     }
510     return false;
511 }
.fi
.SS "const long long int wala::getAddress (const intNval, const intMval)"

.PP
For multidimensional Wang-Landau biasing, get the 1D coordinate of the macrostate distribution estimate (bias) for multidimensional data\&. 
.PP
\fBParameters:\fP
.RS 4
\fINval\fP Total number of atoms in the system 
.br
\fIMval\fP Current value of the expanded ensemble state of the system 
.RE
.PP

.PP
Definition at line 471 of file bias\&.cpp\&.
.PP
Referenced by calculateBias(), and update()\&.
.PP
.nf
471                                                                     {
472     if (Nval > Nmax_ || Nval < Nmin_ || Mval < 0 || Mval > Mtot_-1) {
473         throw customException ("N, M out of bounds in Wang-Landau object, cannot retrieve address");
474     }
475     return (Nval - Nmin_)*Mtot_ + Mval;
476 }
.fi
.SS "const double wala::getBias (const intaddress)\fC [inline]\fP"

.PP
Definition at line 70 of file bias\&.h\&.
.PP
Referenced by calculateBias()\&.
.PP
.nf
70 { return -lnPI_[address]; }
.fi
.SS "const std::vector<double> wala::getH ()\fC [inline]\fP"

.PP
Return the visited-states histogram\&. 
.PP
Definition at line 72 of file bias\&.h\&.
.SS "const std::vector<double> wala::getlnPI ()\fC [inline]\fP"

.PP
Return the current estimate of the macrostate distribution\&. 
.PP
Definition at line 71 of file bias\&.h\&.
.SS "void wala::iterateForward ()"

.PP
This should only be called when the 'flatness' criterion is met\&. This then resets the visited-states histogram H, and decrements lnF\&. 
.PP
Definition at line 516 of file bias\&.cpp\&.
.PP
Referenced by performCrossover(), and performWALA()\&.
.PP
.nf
516                            {
517     lnF_ = lnF_*g_;
518     std::fill(H_\&.begin(), H_\&.end(), 0);
519 }
.fi
.SS "const double wala::lnF ()\fC [inline]\fP"

.PP
Definition at line 69 of file bias\&.h\&.
.PP
Referenced by checkpoint::dump(), performCrossover(), performWALA(), and wala()\&.
.PP
.nf
69 { return lnF_; }
.fi
.SS "void wala::print (const std::stringfileName, const boolprintH = \fCfalse\fP)"

.PP
Print the UN-NORMALIZED biasing function (lnPI) and possible the visted states histogram to files\&. Will overwrite the files if another with that name exists\&.
.PP
\fBParameters:\fP
.RS 4
\fIfileName\fP Name of the file to print to\&. Will append with '_lnPI' and '_H' for the macrostate distribution and visited-states histogram, respectively\&. 
.br
\fIprintH\fP Defaults to false, but if true will also print the visited states histogram\&. 
.RE
.PP

.PP
Definition at line 528 of file bias\&.cpp\&.
.PP
Referenced by checkpoint::dump()\&.
.PP
.nf
528                                                        {
529     // Print visited-states histogram
530     if (printH) {
531         // print complete visited states histogram to restart / visualize progress
532         std::ofstream of;
533         std::string name = fileName+"_H\&.dat";
534         of\&.open(name\&.c_str(), std::ofstream::out);
535         if (!of\&.is_open()) {
536             throw customException ("Unable to write Wang-Landau visited states histogram to "+name);
537         }
538         of << "# Visited states histogram in single row (vectorized) notation\&." << std::endl;
539         of << "# species_total_upper_bound: " << Nmax_ << std::endl;
540         of << "# species_total_lower_bound: " << Nmin_ << std::endl;
541         double V = box_[0]*box_[1]*box_[2];
542         of << "# volume: " << std::setprecision(15) << V << std::endl;
543         for (long long int i = 0; i < H_\&.size(); ++i) {
544             of << std::setprecision(15) << H_[i] << std::endl;
545         }
546         of\&.close();
547     }
548 
549     // Print lnPI (bias) matrix
550     std::ofstream of;
551     std::string name = fileName+"_lnPI\&.dat";
552     of\&.open(name\&.c_str(), std::ofstream::out);
553     if (!of\&.is_open()) {
554         throw customException ("Unable to write Wang-Landau lnPI histogram to "+name);
555     }
556     of << "# lnPI (bias) matrix in single row (vectorized) notation\&." << std::endl;
557     of << "# species_total_upper_bound: " << Nmax_ << std::endl;
558     of << "# species_total_lower_bound: " << Nmin_ << std::endl;
559     double V = box_[0]*box_[1]*box_[2];
560     of << "# volume: " << std::setprecision(15) << V << std::endl;
561     for (long long int i = 0; i < lnPI_\&.size(); ++i) {
562         of << std::setprecision(15) << lnPI_[i] << std::endl; // only ALL states for restarting purposes
563     }
564     of\&.close();
565 }
.fi
.SS "void wala::readH (const std::stringfileName)"

.PP
Read the visited states histogram from a file\&. This assumes the user has already guaranteed that the bounds are consistent, e\&.g\&. Nmin and Nmax, as it will not check this automatically\&. Also assumes file was generated by this code\&. 'Hand made' ones might have formatting issues since parsing is done based on tokens\&.
.PP
\fBParameters:\fP
.RS 4
\fIfileName\fP Name of file containing visited states\&. Must include file extension\&. 
.RE
.PP

.PP
Definition at line 598 of file bias\&.cpp\&.
.PP
Referenced by checkpoint::load()\&.
.PP
.nf
598                                           {
599     std::ifstream infile (fileName\&.c_str());
600     if (!infile\&.is_open()) {
601         throw customException ("Unable to read Wang-Landau visited states matrix  from "+fileName);
602     }
603     std::string line;
604     int lineIndex = 0;
605     while(std::getline(infile,line)) {
606         std::stringstream lineStream(line);
607         // skip any header information
608         if (line\&.compare(0,1,"#",0,1) != 0) {
609             H_[lineIndex] = atof(line\&.c_str());
610             lineIndex++;
611         }
612     }
613 }
.fi
.SS "void wala::readlnPI (const std::stringfileName)"

.PP
Read the macrostate distribution (biasing function) from a file\&. This assumes the user has already guaranteed that the bounds are consistent, e\&.g\&. Nmin and Nmax, as it will not check this automatically\&. Also assumes file was generated by this code\&. 'Hand made' ones might have formatting issues since parsing is done based on tokens\&.
.PP
\fBParameters:\fP
.RS 4
\fIfileName\fP Name of file containing lnPI\&. Must include file extension\&. 
.RE
.PP

.PP
Definition at line 574 of file bias\&.cpp\&.
.PP
Referenced by checkpoint::load(), and performWALA()\&.
.PP
.nf
574                                              {
575     std::ifstream infile (fileName\&.c_str());
576     if (!infile\&.is_open()) {
577         throw customException ("Unable to read Wang-Landau lnPI from "+fileName);
578     }
579     std::string line;
580     int lineIndex = 0;
581     while(std::getline(infile,line)) {
582         std::stringstream lineStream(line);
583         // skip any header information
584         if (line\&.compare(0,1,"#",0,1) != 0) {
585             lnPI_[lineIndex] = atof(line\&.c_str());
586             lineIndex++;
587         }
588     }
589 }
.fi
.SS "void wala::setlnPI (const std::vector< double > &lnPIguess)\fC [inline]\fP"

.PP
Blindly assign a guess of the macrostate distribution\&. 
.PP
Definition at line 66 of file bias\&.h\&.
.SS "void wala::update (const intNval, const intMval)"

.PP
Update the estimate of the macrostate distribution\&. 
.PP
\fBParameters:\fP
.RS 4
\fINval\fP Total current number of atoms in the system 
.br
\fIMval\fP Current value of the expanded ensemble state of the system 
.RE
.PP

.PP
Definition at line 484 of file bias\&.cpp\&.
.PP
References getAddress()\&.
.PP
Referenced by aggVolBias3::make(), translateParticle::make(), deleteParticle::make(), insertParticle::make(), and swapParticles::make()\&.
.PP
.nf
484                                                  {
485     long long int address = getAddress (Nval, Mval);
486     lnPI_[address] += lnF_;
487     H_[address] += 1\&.0;
488 }
.fi


.SH "Author"
.PP 
Generated automatically by Doxygen for Flat-Histogram Monte Carlo Simulation from the source code\&.
