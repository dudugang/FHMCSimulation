.TH "wala" 3 "Thu Dec 29 2016" "Version v0.1.0" "Flat-Histogram Monte Carlo Simulation" \" -*- nroff -*-
.ad l
.nh
.SH NAME
wala \- 
.PP
Wang-Landau biasing class\&.  

.SH SYNOPSIS
.br
.PP
.PP
\fC#include <bias\&.h>\fP
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBwala\fP ()"
.br
.ti -1c
.RI "\fBwala\fP (const double \fBlnF\fP, const double g, const double s, const int Nmax, const int Nmin, const int Mtot, const std::vector< double > box)"
.br
.RI "\fIWang-Landau biasing constructor\&. \fP"
.ti -1c
.RI "void \fBupdate\fP (const int Nval, const int Mval)"
.br
.RI "\fIUpdate the estimate of the macrostate distribution\&. \fP"
.ti -1c
.RI "void \fBiterateForward\fP ()"
.br
.RI "\fIThis should only be called when the 'flatness' criterion is met\&. \fP"
.ti -1c
.RI "void \fBprint\fP (const std::string fileName, const bool printH=false)"
.br
.RI "\fIPrint the UN-NORMALIZED biasing function (lnPI) and possible the visted states histogram to files\&. \fP"
.ti -1c
.RI "void \fBreadlnPI\fP (const std::string fileName)"
.br
.RI "\fIRead the macrostate distribution (biasing function) from a file\&. \fP"
.ti -1c
.RI "void \fBreadH\fP (const std::string fileName)"
.br
.RI "\fIRead the visited states histogram from a file\&. \fP"
.ti -1c
.RI "void \fBsetlnPI\fP (const std::vector< double > &lnPIguess)"
.br
.RI "\fIBlindly assign a guess of the macrostate distribution\&. \fP"
.ti -1c
.RI "bool \fBevaluateFlatness\fP ()"
.br
.RI "\fIEvaluate if the visited states histogram is approxiamtely 'flat'\&. \fP"
.ti -1c
.RI "const \fB__BIAS_INT_TYPE__\fP \fBgetAddress\fP (const int Nval, const int Mval)"
.br
.RI "\fIFor multidimensional Wang-Landau biasing, get the 1D coordinate of the macrostate distribution estimate (bias) for multidimensional data\&. \fP"
.ti -1c
.RI "const double \fBlnF\fP ()"
.br
.ti -1c
.RI "const double \fBgetBias\fP (const int address)"
.br
.ti -1c
.RI "const std::vector< double > \fBgetlnPI\fP ()"
.br
.RI "\fIReturn the current estimate of the macrostate distribution\&. \fP"
.ti -1c
.RI "const std::vector< double > \fBgetH\fP ()"
.br
.RI "\fIReturn the visited-states histogram\&. \fP"
.in -1c
.SH "Detailed Description"
.PP 
Wang-Landau biasing class\&. 
.PP
Definition at line 59 of file bias\&.h\&.
.SH "Constructor & Destructor Documentation"
.PP 
.SS "wala::wala ()\fC [inline]\fP"

.PP
Definition at line 61 of file bias\&.h\&.
.PP
.nf
61 {};
.fi
.SS "wala::wala (const doublelnF, const doubleg, const doubles, const intNmax, const intNmin, const intMtot, const std::vector< double >box)"

.PP
Wang-Landau biasing constructor\&. 
.PP
\fBParameters:\fP
.RS 4
\fIlnF\fP Factor by which the estimate of the density of states in updated each time it is visited\&. 
.br
\fIg\fP Factor by which lnF is reduced (multiplied) once 'flatness' has been achieved\&. 
.br
\fIs\fP Factor by which the min(H) must be within the mean of H to be considered 'flat', e\&.g\&. 0\&.8 --> min is within 20% error of mean 
.br
\fINmax\fP Upper bound for total number of particles\&. 
.br
\fINmin\fP Lower bound for total number of particles\&. 
.br
\fIMtot\fP Total number of expanded ensemble states in a system\&. 
.br
\fIbox\fP Vector of simulation box size\&. 
.RE
.PP

.PP
Definition at line 407 of file bias\&.cpp\&.
.PP
References __BIAS_INT_TYPE__, and lnF()\&.
.PP
.nf
407                                                                                                                                           {
408     if (lnF < 0) {
409         throw customException ("lnF in Wang-Landau cannot be < 0");
410     }
411     lnF_ = lnF;
412 
413     if (g <= 0 || g >= 1) {
414         throw customException ("In Wang-Landau 0 < g < 1");
415     }
416     g_ = g;
417 
418     if (s <= 0 || s >= 1) {
419         throw customException ("In Wang-Landau 0 < s < 1");
420     }
421     s_ = s;
422 
423     if (Nmin > Nmax) {
424         throw customException ("Nmin > Nmax in Wang-Landau object");
425     }
426 
427     if (Nmin < 0) {
428         throw customException ("Nmin < 0 in Wang-Landau object");
429     }
430 
431     if (Mtot < 1) {
432         throw customException ("Mtot < 1 in Wang-Landau object");
433     }
434     Mtot_ = Mtot;
435 
436     if (box\&.size() != 3) {
437         throw customException ("Illegal number of box dimensions in Wang-Landau");
438     }
439     for (unsigned int i = 0; i < box\&.size(); ++i) {
440         if (box[i] < 0) {
441             throw customException ("Illegal box dimensions in Wang-Landau");
442         }
443     }
444     box_\&.resize(3, 0);
445     box_ = box;
446 
447     __BIAS_INT_TYPE__ size = (Nmax - Nmin + 1);
448 
449     Nmin_ = Nmin;
450     Nmax_ = Nmax;
451 
452     // attempt to allocate memory for macrostate distribution matrix and initializes it all to 0
453     try {
454         lnPI_\&.resize(size*Mtot_, 0\&.0);
455     } catch (const std::bad_alloc &ce) {
456         throw customException ("Out of memory, cannot allocate space for macrostate distribution matrix in wala");
457     }
458 
459     // initialize the visited-states histogram
460     try {
461         H_\&.resize(size*Mtot_, 0\&.0);
462     } catch (const std::bad_alloc &ce) {
463         throw customException ("Out of memory, cannot allocate space for visited-states histogram in wala");
464     }
465 }
.fi
.SH "Member Function Documentation"
.PP 
.SS "bool wala::evaluateFlatness ()"

.PP
Evaluate if the visited states histogram is approxiamtely 'flat'\&. 
.PP
\fBReturns:\fP
.RS 4
Returns whether the histogram is flat or not\&. 
.RE
.PP

.PP
Definition at line 497 of file bias\&.cpp\&.
.PP
References specExp\&.
.PP
Referenced by performCrossover(), and performWALA()\&.
.PP
.nf
497                              {
498     double min = H_[0], lnMean = -DBL_MAX;
499     for (unsigned int i = 0; i < H_\&.size() - (Mtot_-1); ++i) { // insert routine prevents the sampling past N = Nmax, M = 0, so N = Nmax and M > 0 are validly empty
500         if (H_[i] < min) {
501             min = H_[i];
502         }
503 
504         // summing so many doubles may overrun DBL_MAX, so instead track the lnMean
505         lnMean = specExp(lnMean, log(H_[i]));
506     }
507     lnMean -= log(H_\&.size() - (Mtot_-1));
508 
509     if (log(min) - lnMean > log(s_)) {
510         return true;
511     }
512     return false;
513 }
.fi
.SS "const \fB__BIAS_INT_TYPE__\fP wala::getAddress (const intNval, const intMval)"

.PP
For multidimensional Wang-Landau biasing, get the 1D coordinate of the macrostate distribution estimate (bias) for multidimensional data\&. 
.PP
\fBParameters:\fP
.RS 4
\fINval\fP Total number of atoms in the system 
.br
\fIMval\fP Current value of the expanded ensemble state of the system 
.RE
.PP

.PP
Definition at line 473 of file bias\&.cpp\&.
.PP
Referenced by calculateBias(), and update()\&.
.PP
.nf
473                                                                         {
474     if (Nval > Nmax_ || Nval < Nmin_ || Mval < 0 || Mval > Mtot_-1) {
475         throw customException ("N, M out of bounds in Wang-Landau object, cannot retrieve address");
476     }
477     return (Nval - Nmin_)*Mtot_ + Mval;
478 }
.fi
.SS "const double wala::getBias (const intaddress)\fC [inline]\fP"

.PP
Definition at line 73 of file bias\&.h\&.
.PP
Referenced by calculateBias()\&.
.PP
.nf
73 { return -lnPI_[address]; }
.fi
.SS "const std::vector<double> wala::getH ()\fC [inline]\fP"

.PP
Return the visited-states histogram\&. 
.PP
Definition at line 75 of file bias\&.h\&.
.SS "const std::vector<double> wala::getlnPI ()\fC [inline]\fP"

.PP
Return the current estimate of the macrostate distribution\&. 
.PP
Definition at line 74 of file bias\&.h\&.
.SS "void wala::iterateForward ()"

.PP
This should only be called when the 'flatness' criterion is met\&. This then resets the visited-states histogram H, and decrements lnF\&. 
.PP
Definition at line 518 of file bias\&.cpp\&.
.PP
Referenced by performCrossover(), and performWALA()\&.
.PP
.nf
518                            {
519     lnF_ = lnF_*g_;
520     std::fill(H_\&.begin(), H_\&.end(), 0);
521 }
.fi
.SS "const double wala::lnF ()\fC [inline]\fP"

.PP
Definition at line 72 of file bias\&.h\&.
.PP
Referenced by checkpoint::dump(), performCrossover(), performWALA(), and wala()\&.
.PP
.nf
72 { return lnF_; }
.fi
.SS "void wala::print (const std::stringfileName, const boolprintH = \fCfalse\fP)"

.PP
Print the UN-NORMALIZED biasing function (lnPI) and possible the visted states histogram to files\&. Will overwrite the files if another with that name exists\&.
.PP
\fBParameters:\fP
.RS 4
\fIfileName\fP Name of the file to print to\&. Will append with '_lnPI' and '_H' for the macrostate distribution and visited-states histogram, respectively\&. 
.br
\fIprintH\fP Defaults to false, but if true will also print the visited states histogram\&. 
.RE
.PP

.PP
Definition at line 530 of file bias\&.cpp\&.
.PP
Referenced by checkpoint::dump()\&.
.PP
.nf
530                                                        {
531     // Print visited-states histogram
532     if (printH) {
533         // print complete visited states histogram to restart / visualize progress
534         std::ofstream of;
535         std::string name = fileName+"_H\&.dat";
536         of\&.open(name\&.c_str(), std::ofstream::out);
537         if (!of\&.is_open()) {
538             throw customException ("Unable to write Wang-Landau visited states histogram to "+name);
539         }
540         of << "# Visited states histogram in single row (vectorized) notation\&." << std::endl;
541         of << "# species_total_upper_bound: " << Nmax_ << std::endl;
542         of << "# species_total_lower_bound: " << Nmin_ << std::endl;
543         double V = box_[0]*box_[1]*box_[2];
544         of << "# volume: " << std::setprecision(15) << V << std::endl;
545         for (long long int i = 0; i < H_\&.size(); ++i) {
546             of << std::setprecision(15) << H_[i] << std::endl;
547         }
548         of\&.close();
549     }
550 
551     // Print lnPI (bias) matrix
552     std::ofstream of;
553     std::string name = fileName+"_lnPI\&.dat";
554     of\&.open(name\&.c_str(), std::ofstream::out);
555     if (!of\&.is_open()) {
556         throw customException ("Unable to write Wang-Landau lnPI histogram to "+name);
557     }
558     of << "# lnPI (bias) matrix in single row (vectorized) notation\&." << std::endl;
559     of << "# species_total_upper_bound: " << Nmax_ << std::endl;
560     of << "# species_total_lower_bound: " << Nmin_ << std::endl;
561     double V = box_[0]*box_[1]*box_[2];
562     of << "# volume: " << std::setprecision(15) << V << std::endl;
563     for (long long int i = 0; i < lnPI_\&.size(); ++i) {
564         of << std::setprecision(15) << lnPI_[i] << std::endl; // only ALL states for restarting purposes
565     }
566     of\&.close();
567 }
.fi
.SS "void wala::readH (const std::stringfileName)"

.PP
Read the visited states histogram from a file\&. This assumes the user has already guaranteed that the bounds are consistent, e\&.g\&. Nmin and Nmax, as it will not check this automatically\&. Also assumes file was generated by this code\&. 'Hand made' ones might have formatting issues since parsing is done based on tokens\&.
.PP
\fBParameters:\fP
.RS 4
\fIfileName\fP Name of file containing visited states\&. Must include file extension\&. 
.RE
.PP

.PP
Definition at line 600 of file bias\&.cpp\&.
.PP
Referenced by checkpoint::load()\&.
.PP
.nf
600                                           {
601     std::ifstream infile (fileName\&.c_str());
602     if (!infile\&.is_open()) {
603         throw customException ("Unable to read Wang-Landau visited states matrix  from "+fileName);
604     }
605     std::string line;
606     int lineIndex = 0;
607     while(std::getline(infile,line)) {
608         std::stringstream lineStream(line);
609         // skip any header information
610         if (line\&.compare(0,1,"#",0,1) != 0) {
611             H_[lineIndex] = atof(line\&.c_str());
612             lineIndex++;
613         }
614     }
615 }
.fi
.SS "void wala::readlnPI (const std::stringfileName)"

.PP
Read the macrostate distribution (biasing function) from a file\&. This assumes the user has already guaranteed that the bounds are consistent, e\&.g\&. Nmin and Nmax, as it will not check this automatically\&. Also assumes file was generated by this code\&. 'Hand made' ones might have formatting issues since parsing is done based on tokens\&.
.PP
\fBParameters:\fP
.RS 4
\fIfileName\fP Name of file containing lnPI\&. Must include file extension\&. 
.RE
.PP

.PP
Definition at line 576 of file bias\&.cpp\&.
.PP
Referenced by checkpoint::load(), and performWALA()\&.
.PP
.nf
576                                              {
577     std::ifstream infile (fileName\&.c_str());
578     if (!infile\&.is_open()) {
579         throw customException ("Unable to read Wang-Landau lnPI from "+fileName);
580     }
581     std::string line;
582     int lineIndex = 0;
583     while(std::getline(infile,line)) {
584         std::stringstream lineStream(line);
585         // skip any header information
586         if (line\&.compare(0,1,"#",0,1) != 0) {
587             lnPI_[lineIndex] = atof(line\&.c_str());
588             lineIndex++;
589         }
590     }
591 }
.fi
.SS "void wala::setlnPI (const std::vector< double > &lnPIguess)\fC [inline]\fP"

.PP
Blindly assign a guess of the macrostate distribution\&. 
.PP
Definition at line 69 of file bias\&.h\&.
.SS "void wala::update (const intNval, const intMval)"

.PP
Update the estimate of the macrostate distribution\&. 
.PP
\fBParameters:\fP
.RS 4
\fINval\fP Total current number of atoms in the system 
.br
\fIMval\fP Current value of the expanded ensemble state of the system 
.RE
.PP

.PP
Definition at line 486 of file bias\&.cpp\&.
.PP
References __BIAS_INT_TYPE__, and getAddress()\&.
.PP
Referenced by aggVolBias3::make(), translateParticle::make(), deleteParticle::make(), insertParticle::make(), and swapParticles::make()\&.
.PP
.nf
486                                                  {
487     __BIAS_INT_TYPE__ address = getAddress (Nval, Mval);
488     lnPI_[address] += lnF_;
489     H_[address] += 1\&.0;
490 }
.fi


.SH "Author"
.PP 
Generated automatically by Doxygen for Flat-Histogram Monte Carlo Simulation from the source code\&.
