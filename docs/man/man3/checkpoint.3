.TH "checkpoint" 3 "Wed Jan 4 2017" "Version v0.1.0" "Flat-Histogram Monte Carlo Simulation" \" -*- nroff -*-
.ad l
.nh
.SH NAME
checkpoint \- 
.PP
Information to restart/checkpoint the simulation\&.  

.SH SYNOPSIS
.br
.PP
.PP
\fC#include <checkpoint\&.h>\fP
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBcheckpoint\fP ()"
.br
.ti -1c
.RI "\fBcheckpoint\fP (const std::string directory, const long int frequency, \fBsimSystem\fP &sys, const bool snaps=false, const bool override=false)"
.br
.RI "\fIRead system state from a file\&. \fP"
.ti -1c
.RI "\fB~checkpoint\fP ()"
.br
.ti -1c
.RI "void \fBload\fP (\fBsimSystem\fP &sys, const bool override)"
.br
.RI "\fIRead state of a system from a json file\&. \fP"
.ti -1c
.RI "void \fBdump\fP (\fBsimSystem\fP &sys, const long long int \fBmoveCounter\fP=0, const long long int \fBsweepCounter\fP=0, const bool refine=false)"
.br
.RI "\fISave the state of a system to a json file\&. \fP"
.ti -1c
.RI "bool \fBcheck\fP (\fBsimSystem\fP &sys, const long long int \fBmoveCounter\fP=0, const long long int \fBsweepCounter\fP=0, const bool refine=false)"
.br
.RI "\fICheck how long it has been since last checkpoint, and write new one if has exceeded frequency\&. \fP"
.in -1c
.SS "Data Fields"

.in +1c
.ti -1c
.RI "bool \fBhasCheckpoint\fP"
.br
.RI "\fIAt least one checkpoint has been made that the system can restart from\&. \fP"
.ti -1c
.RI "bool \fBtakeSnaps\fP"
.br
.RI "\fISave snapshot of the system each time a record is made\&. \fP"
.ti -1c
.RI "bool \fBtmmcDone\fP"
.br
.ti -1c
.RI "bool \fBcrossoverDone\fP"
.br
.ti -1c
.RI "bool \fBwalaDone\fP"
.br
.RI "\fIProgress of each stage, regardless of where the checkpoint indicated to start from\&. \fP"
.ti -1c
.RI "bool \fBresFromWALA\fP"
.br
.ti -1c
.RI "bool \fBresFromCross\fP"
.br
.ti -1c
.RI "bool \fBresFromTMMC\fP"
.br
.RI "\fIFlags corresponding to which stage the checkpoint indicated to restart from\&. \fP"
.ti -1c
.RI "long int \fBfreq\fP"
.br
.RI "\fIFrequency (in seconds) that the system should print a new instantaneous snapshot of itself, does not load from checkpoints but is assigned when instantiated (is dumped though) \fP"
.ti -1c
.RI "long long int \fBmoveCounter\fP"
.br
.RI "\fITracks the number of moves in a given sweep that have executed\&. \fP"
.ti -1c
.RI "long long int \fBsweepCounter\fP"
.br
.RI "\fITracks the number of sweeps that have executed\&. \fP"
.ti -1c
.RI "double \fBwala_lnF\fP"
.br
.RI "\fICurrent value of lnF from WALA\&. \fP"
.ti -1c
.RI "std::string \fBdir\fP"
.br
.RI "\fIName of the checkpoint directory containing the information to reinitialize the system (json) \fP"
.ti -1c
.RI "std::string \fBchkptName\fP"
.br
.RI "\fIName of checkpoint file\&. \fP"
.ti -1c
.RI "std::vector< double > \fBelb\fP"
.br
.ti -1c
.RI "std::vector< double > \fBeub\fP"
.br
.RI "\fIUpper and lower energy bounds for energy histogram\&. \fP"
.in -1c
.SH "Detailed Description"
.PP 
Information to restart/checkpoint the simulation\&. 
.PP
Definition at line 22 of file checkpoint\&.h\&.
.SH "Constructor & Destructor Documentation"
.PP 
.SS "checkpoint::checkpoint ()\fC [inline]\fP"

.PP
Definition at line 24 of file checkpoint\&.h\&.
.PP
References crossoverDone, dir, freq, hasCheckpoint, resFromCross, resFromTMMC, resFromWALA, takeSnaps, tmmcDone, and walaDone\&.
.PP
.nf
24 { tmmcDone = false; crossoverDone = false; walaDone = false; hasCheckpoint = false; resFromTMMC = false; resFromWALA = false; resFromCross = false; takeSnaps = false; freq = -1; dir = "checkpt"; }
.fi
.SS "checkpoint::checkpoint (const std::stringdirectory, const long intfrequency, \fBsimSystem\fP &sys, const boolsnaps = \fCfalse\fP, const booloverride = \fCfalse\fP)"

.PP
Read system state from a file\&. If checkpoint directory is found and json file is valid, data is loaded from it\&. Note that although this stores the frequency, it does not use the value it dumps to file\&. This class always uses the frequency given when the class is instantiated\&.
.PP
\fBParameters:\fP
.RS 4
\fIdir\fP Directory where system state was saved 
.br
\fIfrequency\fP Frquency to take snapshots/checkpoints of the system (< 0 disables) 
.br
\fIsys\fP System to checkpoint 
.br
\fIsnaps\fP Take snapshots each time a record is made to make a movie? (default = false) 
.br
\fIoverride\fP Manually override exceptions, use with extreme caution (default=false) 
.RE
.PP

.PP
Definition at line 14 of file checkpoint\&.cpp\&.
.PP
References chkptName, crossoverDone, dir, fileExists(), freq, hasCheckpoint, load(), moveCounter, resFromCross, resFromTMMC, resFromWALA, simSystem::restartFromTMMC, sweepCounter, takeSnaps, tmmcDone, and walaDone\&.
.PP
.nf
14                                                                                                                                   {
15     tmmcDone = false;
16     crossoverDone = false;
17     walaDone = false;
18     hasCheckpoint = false;
19     takeSnaps = snaps;
20     dir = directory;
21     freq = frequency;
22     moveCounter = 0;
23     sweepCounter = 0;
24     resFromWALA = false;
25     resFromCross = false;
26     resFromTMMC = false;
27 
28     chkptName = dir+"/state\&.json";
29     if (fileExists(chkptName)) {
30         try {
31             load(sys, override);
32         } catch (std::exception &ex) {
33             std::string a = "Unable to load checkpoint "+chkptName+" : ";
34             std::string b = ex\&.what();
35             throw customException (a+b);
36         }
37     } else {
38         // Forcible skip to TMMC stage if want to manually start TMMC
39         if (sys\&.restartFromTMMC){
40             walaDone = true;
41             crossoverDone = true;
42         }
43     }
44 
45     time(&lastCheckPt_); // Take time when object was instantiated as initial time so that check() has a point of reference
46 }
.fi
.SS "checkpoint::~checkpoint ()\fC [inline]\fP"

.PP
Definition at line 26 of file checkpoint\&.h\&.
.PP
.nf
26 {};
.fi
.SH "Member Function Documentation"
.PP 
.SS "bool checkpoint::check (\fBsimSystem\fP &sys, const long long intmoveCounter = \fC0\fP, const long long intsweepCounter = \fC0\fP, const boolrefine = \fCfalse\fP)"

.PP
Check how long it has been since last checkpoint, and write new one if has exceeded frequency\&. 
.PP
\fBParameters:\fP
.RS 4
\fIsys\fP System to checkpoint 
.br
\fImoveCounter\fP Number of moves out of a given sweep that have executed 
.br
\fIsweepCounter\fP Number of loops/sweeps that have executed 
.br
\fIrefine\fP Refine the histogram boundaries before printing any? (default=false)
.RE
.PP
\fBReturns:\fP
.RS 4
bool Is a checkpoint being generated or not 
.RE
.PP

.PP
Definition at line 297 of file checkpoint\&.cpp\&.
.PP
References dump(), and freq\&.
.PP
Referenced by performCrossover(), performTMMC(), and performWALA()\&.
.PP
.nf
297                                                                                                                             {
298     if (freq > 0) {
299         if (std::abs(difftime(time(&now_), lastCheckPt_)) >= freq) {
300             dump(sys, moveCounter, sweepCounter, refine);
301             return true;
302         }
303     }
304     return false;
305 }
.fi
.SS "void checkpoint::dump (\fBsimSystem\fP &sys, const long long intmoveCounter = \fC0\fP, const long long intsweepCounter = \fC0\fP, const boolrefine = \fCfalse\fP)"

.PP
Save the state of a system to a json file\&. Creates the checkpoint directory if it doesn't exist\&.
.PP
\fBParameters:\fP
.RS 4
\fIsys\fP System to checkpoint 
.br
\fImoveCounter\fP Number of moves out of a given sweep that have executed 
.br
\fIsweepCounter\fP Number of loops/sweeps that have executed 
.br
\fIrefine\fP Refine the histogram boundaries before printing any? (default=false) 
.RE
.PP

.PP
Definition at line 162 of file checkpoint\&.cpp\&.
.PP
References chkptName, crossoverDone, simSystem::crossoverTotalStepCounter, dir, elb, eub, simSystem::extMomCounter(), fileExists(), freq, simSystem::getELB(), simSystem::getEUB(), getTimeStamp(), simSystem::getTMMCBias(), simSystem::getWALABias(), hasCheckpoint, wala::lnF(), tmmc::print(), wala::print(), simSystem::printEnergyHistogram(), simSystem::printExtMoments(), simSystem::printPkHistogram(), simSystem::printSnapshot(), simSystem::refineEnergyHistogramBounds(), simSystem::refinePkHistogramBounds(), takeSnaps, tmmcDone, simSystem::tmmcTotalStepCounter, walaDone, and simSystem::walaTotalStepCounter\&.
.PP
Referenced by check()\&.
.PP
.nf
162                                                                                                                            {
163     if (!fileExists(chkptName)) {
164         std::string command = "mkdir -p "+dir+" && touch "+chkptName;
165         const int succ = system(command\&.c_str());
166         if (succ != 0) {
167             throw customException("Unable to initialize checkpoint");
168         }
169     }
170 
171     rapidjson::StringBuffer s;
172     rapidjson::PrettyWriter < rapidjson::StringBuffer > writer(s);
173     hasCheckpoint = true;
174 
175     // Write restart/checkpoint options
176     writer\&.StartObject();
177     writer\&.String("tmmcDone");
178     writer\&.Bool(tmmcDone);
179 
180     writer\&.String("crossoverDone");
181     writer\&.Bool(crossoverDone);
182 
183     writer\&.String("walaDone");
184     writer\&.Bool(walaDone);
185 
186     writer\&.String("hasCheckpoint");
187     writer\&.Bool(hasCheckpoint);
188 
189     writer\&.String("takeSnaps");
190     writer\&.Bool(takeSnaps);
191 
192     writer\&.String("freq");
193     writer\&.Int64(freq);
194 
195     writer\&.String("dir");
196     writer\&.String(dir\&.c_str());
197 
198     writer\&.String("moveCounter");
199     writer\&.Double(moveCounter);
200 
201     writer\&.String("sweepCounter");
202     writer\&.Double(sweepCounter);
203 
204     writer\&.String("walaTotalStepCounter");
205     writer\&.Double(sys\&.walaTotalStepCounter);
206 
207     writer\&.String("crossoverTotalStepCounter");
208     writer\&.Double(sys\&.crossoverTotalStepCounter);
209 
210     writer\&.String("tmmcTotalStepCounter");
211     writer\&.Double(sys\&.tmmcTotalStepCounter);
212 
213     if (walaDone && crossoverDone) { // In final TMMC stage or just finished the TMMC (end of simulation)
214         sys\&.getTMMCBias()->print(dir+"/tmmc", true, true);
215         if (refine) {
216             sys\&.refineEnergyHistogramBounds();
217         }
218         sys\&.printEnergyHistogram(dir+"/eHist", false); // Un-normalized Energy histogram
219         if (refine) {
220             sys\&.refinePkHistogramBounds();
221         }
222         sys\&.printPkHistogram(dir+"/pkHist", false); // Un-normalized Particle histogram
223         sys\&.printExtMoments(dir+"/extMom", false); // Un-normalized Extensive moments, plus counter (number of times each recorded)
224         writer\&.String("extMomCounter");
225         std::vector < double > ctr = sys\&.extMomCounter();
226         writer\&.StartArray();
227         for (std::vector < double >::iterator it = ctr\&.begin(); it < ctr\&.end(); ++it) {
228             writer\&.Double(*it);
229         }
230         writer\&.EndArray();
231     } else if (walaDone && !crossoverDone && !tmmcDone) { // In crossover stage
232         sys\&.getTMMCBias()->print(dir+"/tmmc", true, true);
233         sys\&.getWALABias()->print(dir+"/wala", true);
234 
235         writer\&.String("wala_lnF");
236         writer\&.Double(sys\&.getWALABias()->lnF());
237 
238         // Energy upper and lower bounds for histogram
239         std::vector < double > elb = sys\&.getELB(), eub = sys\&.getEUB();
240         writer\&.String("energyHistogramLB");
241         writer\&.StartArray();
242         for (std::vector < double >::iterator it = elb\&.begin(); it < elb\&.end(); ++it) {
243             writer\&.Double(*it);
244         }
245         writer\&.EndArray();
246         writer\&.String("energyHistogramUB");
247         writer\&.StartArray();
248         for (std::vector < double >::iterator it = eub\&.begin(); it < eub\&.end(); ++it) {
249             writer\&.Double(*it);
250         }
251         writer\&.EndArray();
252     } else if (!walaDone && !crossoverDone && !tmmcDone) { // In WALA stage
253         sys\&.getWALABias()->print(dir+"/wala", true);
254 
255         writer\&.String("wala_lnF");
256         writer\&.Double(sys\&.getWALABias()->lnF());
257 
258         // Energy upper and lower bounds for histogram
259         std::vector < double > elb = sys\&.getELB(), eub = sys\&.getEUB();
260         writer\&.String("energyHistogramLB");
261         writer\&.StartArray();
262         for (std::vector < double >::iterator it = elb\&.begin(); it < elb\&.end(); ++it) {
263             writer\&.Double(*it);
264         }
265         writer\&.EndArray();
266         writer\&.String("energyHistogramUB");
267         writer\&.StartArray();
268         for (std::vector < double >::iterator it = eub\&.begin(); it < eub\&.end(); ++it) {
269             writer\&.Double(*it);
270         }
271         writer\&.EndArray();
272     } else {
273         throw customException ("Uncertain which stage simulation is in, so cannot checkpoint");
274     }
275     writer\&.EndObject();
276     std::ofstream outData(chkptName\&.c_str());
277     outData << s\&.GetString() << std::endl;
278 
279     sys\&.printSnapshot(dir+"/snap\&.xyz", getTimeStamp(), true); // Instantaneous snapshot
280     if (takeSnaps) { // This only prints M = 0 atoms (fully inserted) to create a movie
281         sys\&.printSnapshot(dir+"/movie\&.xyz", getTimeStamp(), false);
282     }
283 
284     time(&lastCheckPt_);
285 }
.fi
.SS "void checkpoint::load (\fBsimSystem\fP &sys, const booloverride)"

.PP
Read state of a system from a json file\&. 
.PP
\fBParameters:\fP
.RS 4
\fIsys\fP System to checkpoint 
.br
\fIoverride\fP Manually override exceptions, use with extreme caution (default=false) 
.RE
.PP

.PP
Definition at line 54 of file checkpoint\&.cpp\&.
.PP
References tmmc::calculatePI(), chkptName, crossoverDone, simSystem::crossoverTotalStepCounter, dir, elb, eub, fileExists(), simSystem::getTMMCBias(), simSystem::getTotalM(), simSystem::getWALABias(), hasCheckpoint, moveCounter, parseJson(), tmmc::readC(), simSystem::readConfig(), wala::readH(), tmmc::readHC(), wala::readlnPI(), resFromCross, resFromTMMC, resFromWALA, simSystem::restartEnergyHistogram(), simSystem::restartExtMoments(), simSystem::restartPkHistogram(), sendErr(), sendMsg(), simSystem::setELB(), simSystem::setEUB(), simSystem::startTMMC(), simSystem::startWALA(), sweepCounter, SYS_FAILURE, takeSnaps, tmmcDone, simSystem::tmmcSweepSize, simSystem::tmmcTotalStepCounter, simSystem::wala_g, wala_lnF, simSystem::wala_s, walaDone, and simSystem::walaTotalStepCounter\&.
.PP
Referenced by checkpoint()\&.
.PP
.nf
54                                                           {
55     if (!fileExists(chkptName) && !override) {
56         throw customException ("No checkpoint by the name: "+chkptName);
57     }
58 
59     rapidjson::Document doc;
60     try {
61         parseJson (chkptName, doc);
62 
63         tmmcDone = doc["tmmcDone"]\&.GetBool();
64         crossoverDone = doc["crossoverDone"]\&.GetBool();
65         walaDone = doc["walaDone"]\&.GetBool();
66         hasCheckpoint = doc["hasCheckpoint"]\&.GetBool();
67         takeSnaps = doc["takeSnaps"]\&.GetBool();
68         dir = doc["dir"]\&.GetString();
69         moveCounter = (long long int)doc["moveCounter"]\&.GetDouble();
70         sweepCounter = (long long int)doc["sweepCounter"]\&.GetDouble();
71         sys\&.walaTotalStepCounter = (long double)doc["walaTotalStepCounter"]\&.GetDouble();
72         sys\&.crossoverTotalStepCounter = (long double)doc["crossoverTotalStepCounter"]\&.GetDouble();
73         sys\&.tmmcTotalStepCounter = (long double)doc["tmmcTotalStepCounter"]\&.GetDouble();
74 
75         if (walaDone && crossoverDone) { // In final TMMC stage or just finished the TMMC (end of simulation)
76             resFromTMMC = true;
77             sys\&.startTMMC(sys\&.tmmcSweepSize, sys\&.getTotalM());
78             sys\&.getTMMCBias()->readC(dir+"/tmmc_C\&.dat");
79             sys\&.getTMMCBias()->readHC(dir+"/tmmc_HC\&.dat");
80             sys\&.getTMMCBias()->calculatePI();
81             std::vector < double > ctr (doc["extMomCounter"]\&.Size(), 0);
82             for (unsigned int i = 0; i < doc["extMomCounter"]\&.Size(); ++i) {
83                 ctr[i] = doc["extMomCounter"][i]\&.GetDouble();
84             }
85             sys\&.restartEnergyHistogram(dir+"/eHist");
86             sys\&.restartPkHistogram(dir+"/pkHist");
87             sys\&.restartExtMoments(dir+"/extMom", ctr);
88         } else if (walaDone && !crossoverDone && !tmmcDone) { // In crossover stage
89             resFromCross = true;
90             sys\&.startTMMC(sys\&.tmmcSweepSize, sys\&.getTotalM());
91             wala_lnF = doc["wala_lnF"]\&.GetDouble();
92             sys\&.startWALA (wala_lnF, sys\&.wala_g, sys\&.wala_s, sys\&.getTotalM());
93 
94             sys\&.getTMMCBias()->readC(dir+"/tmmc_C\&.dat");
95             sys\&.getTMMCBias()->readHC(dir+"/tmmc_HC\&.dat");
96             sys\&.getWALABias()->readlnPI(dir+"/wala_lnPI\&.dat");
97             sys\&.getWALABias()->readH(dir+"/wala_H\&.dat");
98 
99             // Energy upper and lower bounds for histogram
100             elb\&.resize(doc["energyHistogramLB"]\&.Size(), 0);
101             for (unsigned int i = 0; i < doc["energyHistogramLB"]\&.Size(); ++i) {
102                 elb[i] = doc["energyHistogramLB"][i]\&.GetDouble();
103             }
104             sys\&.setELB(elb);
105 
106             eub\&.resize(doc["energyHistogramUB"]\&.Size(), 0);
107             for (unsigned int i = 0; i < doc["energyHistogramUB"]\&.Size(); ++i) {
108                 eub[i] = doc["energyHistogramUB"][i]\&.GetDouble();
109             }
110             sys\&.setEUB(eub);
111         } else if (!walaDone && !crossoverDone && !tmmcDone) { // In WALA stage and printed 1st checkpoint already
112             resFromWALA = true;
113             wala_lnF = doc["wala_lnF"]\&.GetDouble();
114             sys\&.startWALA (wala_lnF, sys\&.wala_g, sys\&.wala_s, sys\&.getTotalM());
115 
116             sys\&.getWALABias()->readlnPI(dir+"/wala_lnPI\&.dat");
117             sys\&.getWALABias()->readH(dir+"/wala_H\&.dat");
118 
119             // Energy upper and lower bounds for histogram
120             elb\&.resize(doc["energyHistogramLB"]\&.Size(), 0);
121             for (unsigned int i = 0; i < doc["energyHistogramLB"]\&.Size(); ++i) {
122                 elb[i] = doc["energyHistogramLB"][i]\&.GetDouble();
123             }
124             sys\&.setELB(elb);
125 
126             eub\&.resize(doc["energyHistogramUB"]\&.Size(), 0);
127             for (unsigned int i = 0; i < doc["energyHistogramUB"]\&.Size(); ++i) {
128                 eub[i] = doc["energyHistogramUB"][i]\&.GetDouble();
129             }
130             sys\&.setEUB(eub);
131         } else {
132             if (!override) {
133                 sendErr("Uncertain which stage simulation is in, so cannot checkpoint");
134                 exit(SYS_FAILURE);
135             }
136         }
137 
138         sys\&.readConfig(dir+"/snap\&.xyz");
139         hasCheckpoint = true;
140     } catch (std::exception &ex) {
141         std::string msg = ex\&.what();
142         if (!override) {
143             hasCheckpoint = false;
144             sendErr("Unable to load checkpoint "+msg);
145             exit(SYS_FAILURE);
146         } else {
147             sendErr("Overriding the following errors to load checkpoint "+msg);
148         }
149     }
150 
151     sendMsg("Checkpoint loaded from "+chkptName);
152 }
.fi
.SH "Field Documentation"
.PP 
.SS "std::string checkpoint::chkptName"

.PP
Name of checkpoint file\&. 
.PP
Definition at line 43 of file checkpoint\&.h\&.
.PP
Referenced by checkpoint(), dump(), and load()\&.
.SS "bool checkpoint::crossoverDone"

.PP
Definition at line 34 of file checkpoint\&.h\&.
.PP
Referenced by checkpoint(), dump(), load(), and performCrossover()\&.
.SS "std::string checkpoint::dir"

.PP
Name of the checkpoint directory containing the information to reinitialize the system (json) 
.PP
Definition at line 42 of file checkpoint\&.h\&.
.PP
Referenced by checkpoint(), dump(), and load()\&.
.SS "std::vector< double > checkpoint::elb"

.PP
Definition at line 45 of file checkpoint\&.h\&.
.PP
Referenced by dump(), and load()\&.
.SS "std::vector< double > checkpoint::eub"

.PP
Upper and lower energy bounds for energy histogram\&. 
.PP
Definition at line 45 of file checkpoint\&.h\&.
.PP
Referenced by dump(), and load()\&.
.SS "long int checkpoint::freq"

.PP
Frequency (in seconds) that the system should print a new instantaneous snapshot of itself, does not load from checkpoints but is assigned when instantiated (is dumped though) 
.PP
Definition at line 37 of file checkpoint\&.h\&.
.PP
Referenced by check(), checkpoint(), and dump()\&.
.SS "bool checkpoint::hasCheckpoint"

.PP
At least one checkpoint has been made that the system can restart from\&. 
.PP
Definition at line 32 of file checkpoint\&.h\&.
.PP
Referenced by checkpoint(), dump(), and load()\&.
.SS "long long int checkpoint::moveCounter"

.PP
Tracks the number of moves in a given sweep that have executed\&. 
.PP
Definition at line 38 of file checkpoint\&.h\&.
.PP
Referenced by checkpoint(), load(), performCrossover(), performTMMC(), and performWALA()\&.
.SS "bool checkpoint::resFromCross"

.PP
Definition at line 35 of file checkpoint\&.h\&.
.PP
Referenced by checkpoint(), load(), and performCrossover()\&.
.SS "bool checkpoint::resFromTMMC"

.PP
Flags corresponding to which stage the checkpoint indicated to restart from\&. 
.PP
Definition at line 35 of file checkpoint\&.h\&.
.PP
Referenced by checkpoint(), load(), and performTMMC()\&.
.SS "bool checkpoint::resFromWALA"

.PP
Definition at line 35 of file checkpoint\&.h\&.
.PP
Referenced by checkpoint(), load(), and performWALA()\&.
.SS "long long int checkpoint::sweepCounter"

.PP
Tracks the number of sweeps that have executed\&. 
.PP
Definition at line 39 of file checkpoint\&.h\&.
.PP
Referenced by checkpoint(), load(), performCrossover(), and performTMMC()\&.
.SS "bool checkpoint::takeSnaps"

.PP
Save snapshot of the system each time a record is made\&. 
.PP
Definition at line 33 of file checkpoint\&.h\&.
.PP
Referenced by checkpoint(), dump(), and load()\&.
.SS "bool checkpoint::tmmcDone"

.PP
Definition at line 34 of file checkpoint\&.h\&.
.PP
Referenced by checkpoint(), dump(), load(), and performTMMC()\&.
.SS "double checkpoint::wala_lnF"

.PP
Current value of lnF from WALA\&. 
.PP
Definition at line 40 of file checkpoint\&.h\&.
.PP
Referenced by load()\&.
.SS "bool checkpoint::walaDone"

.PP
Progress of each stage, regardless of where the checkpoint indicated to start from\&. 
.PP
Definition at line 34 of file checkpoint\&.h\&.
.PP
Referenced by checkpoint(), dump(), load(), and performWALA()\&.

.SH "Author"
.PP 
Generated automatically by Doxygen for Flat-Histogram Monte Carlo Simulation from the source code\&.
