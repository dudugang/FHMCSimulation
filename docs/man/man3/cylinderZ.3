.TH "cylinderZ" 3 "Thu Dec 29 2016" "Version v0.1.0" "Flat-Histogram Monte Carlo Simulation" \" -*- nroff -*-
.ad l
.nh
.SH NAME
cylinderZ \- 
.PP
Cylinder along z = 0 axis at a given (x,y) coordinate\&.  

.SH SYNOPSIS
.br
.PP
.PP
\fC#include <barrier\&.h>\fP
.PP
Inherits \fBbarrier\fP\&.
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fB~cylinderZ\fP ()"
.br
.ti -1c
.RI "\fBcylinderZ\fP (const double x, const double y, const double radius, const double width, const double sigma, const double eps, const int M=1)"
.br
.RI "\fIInstantiate a cylinderical pore in the z-direction\&. \fP"
.ti -1c
.RI "bool \fBinside\fP (const \fBatom\fP *a1, const std::vector< double > &box)"
.br
.RI "\fIReturn whether or not a point falls inside the cylinder (subject to a hard-sphere exclusion radius)\&. \fP"
.ti -1c
.RI "double \fBenergy\fP (const \fBatom\fP *a1, const std::vector< double > &box)"
.br
.RI "\fIInteraction energy with the cylinder\&. \fP"
.in -1c
.SS "Additional Inherited Members"
.SH "Detailed Description"
.PP 
Cylinder along z = 0 axis at a given (x,y) coordinate\&. 
.PP
Definition at line 63 of file barrier\&.h\&.
.SH "Constructor & Destructor Documentation"
.PP 
.SS "cylinderZ::~cylinderZ ()\fC [inline]\fP"

.PP
Definition at line 65 of file barrier\&.h\&.
.PP
.nf
65 {};
.fi
.SS "cylinderZ::cylinderZ (const doublex, const doubley, const doubleradius, const doublewidth, const doublesigma, const doubleeps, const intM = \fC1\fP)"

.PP
Instantiate a cylinderical pore in the z-direction\&. Expanded ensembles primarily scale the magnitude of interaction\&. The repulsive boundary scales with sigma at the boundary, but the attractive cutoff remains fixed relative to the boundary\&.
.PP
\fBParameters:\fP
.RS 4
\fIx\fP x-coordinate of cylinder's center 
.br
\fIy\fP y-coordinate of cylinder's center 
.br
\fIradius\fP Radius of cylinder 
.br
\fIwidth\fP Width of square-well-like interaction (distance from wall) 
.br
\fIsigma\fP Hard-sphere diameter the species this wall interacts with can approach within 
.br
\fIeps\fP Magnitude of the wall interaction (U = -eps) 
.br
\fIM\fP Total number of expanded ensemble states possible for this atom type (defaults to 1) 
.RE
.PP

.PP
Definition at line 462 of file barrier\&.cpp\&.
.PP
References barrier::M_\&.
.PP
.nf
462                                                                                                                                                 {
463     if (radius <= sigma) {
464         throw customException ("cylinderZ radius <= sigma so practically no particles will fit");
465     }
466     if (sigma < 0) {
467         throw customException ("cylinderZ must have sigma >= 0");
468     }
469     if (width < 0) {
470         throw customException ("cylinderZ must have range width >= 0");
471     }
472     if (eps < 0) {
473         throw customException ("cylinderZ must have eps >= 0");
474     }
475     if (sigma/2\&.0 >= width) {
476         throw customException ("cylinderZ must have sigma/2 < width to have a finite range of interaction");
477     }
478     if (M < 1) {
479         throw customException ("cylinderZ must have M >= 1");
480     }
481 
482     eps_ = eps;
483     sigma_ = sigma;
484     width_ = width;
485     radius_ = radius;
486     M_ = M;
487 
488     center_\&.resize(3, 0);
489     center_[0] = x;
490     center_[1] = y;
491 }
.fi
.SH "Member Function Documentation"
.PP 
.SS "double cylinderZ::energy (const \fBatom\fP *a1, const std::vector< double > &box)\fC [virtual]\fP"

.PP
Interaction energy with the cylinder\&. Sigma and epsilon are scaled linearly with expanded ensemble state\&.
.PP
\fBParameters:\fP
.RS 4
\fIa1\fP Pointer to atom with position to test - this does NOT need to be in the simulation box a priori 
.br
\fIbox\fP Simulation box 
.RE
.PP

.PP
Implements \fBbarrier\fP\&.
.PP
Definition at line 525 of file barrier\&.cpp\&.
.PP
References barrier::M_, atom::mState, NUM_INFINITY, pbcDist2(), and atom::pos\&.
.PP
.nf
525                                                                          {
526     center_[2] = a1->pos[2]; // same z-plane
527     double rv2 = pbcDist2 (a1->pos, center_, box);
528     double U = 0\&.0, sig = sigma_, eps = eps_;
529 
530     if (a1->mState > 0) {
531         sig = (sigma_/M_)*a1->mState;
532         eps = (eps_/M_)*a1->mState;
533     }
534     if (a1->mState < 0 || a1->mState > M_-1) {
535         throw customException ("mState out of bounds for cylinderZ");
536     }
537 
538     // return infinity if out of bounds
539     double rc = radius_ - sig/2\&.0, ri = radius_ - width_;
540     if (rv2 >= rc*rc) {
541         return NUM_INFINITY;
542     }
543 
544     // interaction with the wall - return infinity if it was out of bounds already
545     if (rv2 > ri*ri) {
546         U += -eps;
547     }
548 
549     return U;
550 }
.fi
.SS "bool cylinderZ::inside (const \fBatom\fP *a1, const std::vector< double > &box)\fC [virtual]\fP"

.PP
Return whether or not a point falls inside the cylinder (subject to a hard-sphere exclusion radius)\&. Sigma is scaled linearly with expanded ensemble state\&.
.PP
\fBParameters:\fP
.RS 4
\fIa1\fP Pointer to atom with position to test - this does NOT need to be in the simulation box a priori 
.br
\fIbox\fP Simulation box 
.RE
.PP

.PP
Implements \fBbarrier\fP\&.
.PP
Definition at line 499 of file barrier\&.cpp\&.
.PP
References barrier::M_, atom::mState, pbcDist2(), and atom::pos\&.
.PP
.nf
499                                                                        {
500     center_[2] = a1->pos[2]; // same z-plane
501     double rv2 = pbcDist2 (a1->pos, center_, box);
502 
503     double sig = sigma_;
504     if (a1->mState > 0) {
505         sig = (sigma_/M_)*a1->mState;
506     }
507     if (a1->mState < 0 || a1->mState > M_-1) {
508         throw customException ("mState out of bounds for cylinderZ");
509     }
510 
511     double rc = radius_ - sig/2\&.0;
512     if (rv2 >= rc*rc) {
513         return false;
514     } else {
515         return true;
516     }
517 }
.fi


.SH "Author"
.PP 
Generated automatically by Doxygen for Flat-Histogram Monte Carlo Simulation from the source code\&.
