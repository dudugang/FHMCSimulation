.TH "histogram" 3 "Wed Dec 28 2016" "Version v0.1.0" "Flat-Histogram Monte Carlo Simulation" \" -*- nroff -*-
.ad l
.nh
.SH NAME
histogram \- 
.SH SYNOPSIS
.br
.PP
.PP
\fC#include <histogram\&.h>\fP
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fB~histogram\fP ()"
.br
.ti -1c
.RI "\fBhistogram\fP ()"
.br
.ti -1c
.RI "\fBhistogram\fP (const std::vector< double > lbound, const std::vector< double > ubound, const std::vector< long long unsigned int > nbins)"
.br
.RI "\fIInstantiate a multidimensional histogram\&. \fP"
.ti -1c
.RI "void \fBprint\fP (const std::string fileName)"
.br
.RI "\fIPrint RAW (UN-NORMALIZED) histogram to file\&. \fP"
.ti -1c
.RI "void \fBincrement\fP (const long long unsigned int address, const double val)"
.br
.RI "\fIIncrement the histogram by a given value at a given address\&. \fP"
.ti -1c
.RI "void \fBincrement\fP (const std::vector< double > &coords, const double val)"
.br
.RI "\fIIncrement the histogram by a given value at a given coordinate\&. \fP"
.ti -1c
.RI "void \fBset\fP (const std::vector< double > &h, const std::vector< double > &ctr)"
.br
.RI "\fIAssign the histogram and its corresponding counter\&. \fP"
.ti -1c
.RI "const long long unsigned int \fBgetAddress\fP (const std::vector< double > &coords)"
.br
.RI "\fIGet the linear address of the multidimensional coordinate\&. \fP"
.ti -1c
.RI "const std::vector< double > \fBgetCoords\fP (long long unsigned int address)"
.br
.RI "\fIGiven an address, return the (center of the) coordinate this refers to\&. \fP"
.ti -1c
.RI "std::vector< double > \fBgetRawHistogram\fP ()"
.br
.RI "\fIReturn the current histogram\&. \fP"
.ti -1c
.RI "std::vector< double > \fBgetCounter\fP ()"
.br
.RI "\fIReturn the current histogram counter\&. \fP"
.in -1c
.SH "Detailed Description"
.PP 
Definition at line 14 of file histogram\&.h\&.
.SH "Constructor & Destructor Documentation"
.PP 
.SS "histogram::~histogram ()\fC [inline]\fP"

.PP
Definition at line 16 of file histogram\&.h\&.
.PP
.nf
16 {;}
.fi
.SS "histogram::histogram ()\fC [inline]\fP"

.PP
Definition at line 17 of file histogram\&.h\&.
.PP
.nf
17 {;}
.fi
.SS "histogram::histogram (const std::vector< double >lbound, const std::vector< double >ubound, const std::vector< long long unsigned int >nbins)"

.PP
Instantiate a multidimensional histogram\&. Bounds and widths must be specified for each dimension\&. A bin is considered 'centered' on its value\&.
.PP
\fBParameters:\fP
.RS 4
\fIlbound\fP Vector of lower bounds for each dimension 
.br
\fIubound\fP Vector of upper bounds for each dimension 
.br
\fInbins\fP Number of bins to use along each dimension 
.RE
.PP

.PP
Definition at line 203 of file histogram\&.cpp\&.
.PP
.nf
203                                                                                                                                             {
204     if (lbound\&.size() != ubound\&.size()) {
205         throw customException ("Upper and lower bounds for histogram do have the same size");
206     }
207     if (nbins\&.size() != lbound\&.size()) {
208         throw customException ("Number of bins for histogram's dimensions does not have the same size as its bounds");
209     }
210 
211     dim_ = nbins\&.size();
212     widths_\&.resize(dim_, 0);
213     delta_\&.resize(dim_, 0);
214 
215     size_ = 1;
216     for (unsigned int i = 0; i < dim_; ++i) {
217         if (lbound[i] > ubound[i]) {
218             throw customException ("Lower bound > upper bound illegal for a histogram");
219         }
220 
221         if (lbound[i] < ubound[i]) {
222             if (nbins[i] <= 1) {
223                 throw customException ("Must > 1 bins for each dimensions in the histogram");
224             }
225             size_ *= nbins[i];
226             delta_[i] = (ubound[i] - lbound[i])/(nbins[i]-1);
227         } else {
228             // special case when upper and lower bound are the same (nbins = 1)
229             if (nbins[i] != 1) {
230                 throw customException ("nbins must be 1 if upper and lower bounds are equal in histogram");
231             }
232             size_ *= nbins[i];
233             delta_[i] = 1\&.0; // arbitrary
234         }
235 
236         // build projected widths
237         if (i == 0) {
238             widths_[i] = 1;
239         } else {
240             widths_[i] = widths_[i-1]*nbins[i-1];
241         }
242     }
243 
244     lbound_ = lbound;
245     ubound_ = ubound;
246     nbins_ = nbins;
247 
248     // initialize the histogram to 0
249     try {
250         h_\&.resize(size_, 0);
251     } catch (std::bad_alloc &ba) {
252         throw customException ("Out of memory for histogram");
253     }
254     try {
255         counter_\&.resize(size_, 0);
256     } catch (std::bad_alloc &ba) {
257         throw customException ("Out of memory for histogram");
258     }
259 }
.fi
.SH "Member Function Documentation"
.PP 
.SS "const long long unsigned int histogram::getAddress (const std::vector< double > &coords)"

.PP
Get the linear address of the multidimensional coordinate\&. 
.PP
\fBParameters:\fP
.RS 4
\fIcoords\fP Coordinates 
.RE
.PP

.PP
Definition at line 298 of file histogram\&.cpp\&.
.PP
Referenced by increment(), simSystem::printExtMoments(), and simSystem::restartExtMoments()\&.
.PP
.nf
298                                                                                     {
299         if (coords\&.size() != dim_) {
300             throw customException ("Illegal number of coordinate dimensions, cannot locate histogram address");
301         }
302         long long unsigned int address = 0;
303         for (unsigned int i = 0; i < dim_; ++i) {
304             address += round((coords[i] - lbound_[i])/delta_[i])*widths_[i]; // will work safely for integers too
305         }
306         return address;
307 }
.fi
.SS "const std::vector< double > histogram::getCoords (long long unsigned intaddress)"

.PP
Given an address, return the (center of the) coordinate this refers to\&. 
.PP
\fBParameters:\fP
.RS 4
\fIaddress\fP Address to check 
.RE
.PP

.PP
Definition at line 314 of file histogram\&.cpp\&.
.PP
.nf
314                                                                              {
315         std::vector <double> coords (dim_, 0);
316         if (address >= size_) {
317             throw customException ("Histogram address out of bounds");
318         }
319 
320         for (unsigned int i = dim_-1; i > 0; --i) {
321             long long int diff = floor(address/widths_[i]);
322             coords[i] = diff*delta_[i] + lbound_[i];
323             address -= diff*widths_[i];
324         }
325         coords[0] = address*delta_[0] + lbound_[0];
326 
327         return coords;
328 }
.fi
.SS "std::vector< double > histogram::getCounter ()\fC [inline]\fP"

.PP
Return the current histogram counter\&. 
.PP
Definition at line 27 of file histogram\&.h\&.
.PP
Referenced by simSystem::extMomCounter(), and simSystem::printExtMoments()\&.
.SS "std::vector< double > histogram::getRawHistogram ()\fC [inline]\fP"

.PP
Return the current histogram\&. 
.PP
Definition at line 26 of file histogram\&.h\&.
.PP
Referenced by simSystem::printExtMoments(), and simSystem::restartExtMoments()\&.
.SS "void histogram::increment (const long long unsigned intaddress, const doubleval)"

.PP
Increment the histogram by a given value at a given address\&. 
.PP
\fBParameters:\fP
.RS 4
\fIaddress\fP Address of the histogram to increment 
.br
\fIval\fP Value to add to the histogram at address 
.RE
.PP

.PP
Definition at line 267 of file histogram\&.cpp\&.
.PP
Referenced by simSystem::recordExtMoments()\&.
.PP
.nf
267                                                                                  {
268         if (address < size_) {
269             h_[address] += val;
270             counter_[address] += 1\&.0;
271         } else {
272             throw customException ("Histogram address out of bounds");
273         }
274 }
.fi
.SS "void histogram::increment (const std::vector< double > &coords, const doubleval)"

.PP
Increment the histogram by a given value at a given coordinate\&. 
.PP
\fBParameters:\fP
.RS 4
\fIcoords\fP Vector of coordinates correponding to a location in the histogram to increment 
.br
\fIval\fP Value to add to the histogram at address 
.RE
.PP

.PP
Definition at line 282 of file histogram\&.cpp\&.
.PP
References getAddress()\&.
.PP
.nf
282                                                                              {
283         long long unsigned int address = 0;
284         try {
285             address = getAddress (coords);
286         } catch (customException &ce) {
287             throw customException ("Histogram address out of bounds");
288         }
289         h_[address] += val;
290         counter_[address] += 1\&.0;
291 }
.fi
.SS "void histogram::print (const std::stringfileName)"

.PP
Print RAW (UN-NORMALIZED) histogram to file\&. 
.PP
\fBParameters:\fP
.RS 4
\fIfileName\fP Name of file to print to 
.RE
.PP

.PP
Definition at line 335 of file histogram\&.cpp\&.
.PP
.nf
335                                                {
336     // Print histogram
337     std::ofstream of;
338     of\&.open(fileName\&.c_str(), std::ofstream::out);
339     if (!of\&.is_open()) {
340         throw customException ("Unable to write histogram to "+fileName);
341     }
342     of << "# Histogram in single row (vectorized) notation\&." << std::endl;
343     for (unsigned int i = 0; i < dim_; ++i) {
344         of << "# dim_"+std::to_string(i+1)+"_upper_bound:" << ubound_[i] << std::endl;
345         of << "# dim_"+std::to_string(i+1)+"_lower_bound:" << lbound_[i] << std::endl;
346         of << "# dim_"+std::to_string(i+1)+"_number_of_bins:" << nbins_[i] << std::endl;
347     }
348     for (unsigned long long int i = 0; i < h_\&.size(); ++i) {
349         of << h_[i] << std::endl;
350     }
351     of\&.close();
352 }
.fi
.SS "void histogram::set (const std::vector< double > &h, const std::vector< double > &ctr)"

.PP
Assign the histogram and its corresponding counter\&. 
.PP
\fBParameters:\fP
.RS 4
\fIh\fP histogram 
.br
\fIctr\fP Counter 
.RE
.PP

.PP
Definition at line 360 of file histogram\&.cpp\&.
.PP
Referenced by simSystem::restartExtMoments()\&.
.PP
.nf
360                                                                                {
361     if (h\&.size() != ctr\&.size()) {
362         throw customException ("Cannot set the histogram since counter and histogram have different lengths");
363     }
364     if (h\&.size() != h_\&.size()) {
365         throw customException ("Cannot set the histogram since new histogram has different length compared to current one");
366     }
367     if (ctr\&.size() != counter_\&.size()) {
368         throw customException ("Cannot set the histogram since new counter has different length compared to current one");
369     }
370     h_ = h;
371     counter_ = ctr;
372 }
.fi


.SH "Author"
.PP 
Generated automatically by Doxygen for Flat-Histogram Monte Carlo Simulation from the source code\&.
