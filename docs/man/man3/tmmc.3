.TH "tmmc" 3 "Fri Dec 30 2016" "Version v0.1.0" "Flat-Histogram Monte Carlo Simulation" \" -*- nroff -*-
.ad l
.nh
.SH NAME
tmmc \- 
.PP
Transition Matrix Monte Carlo biasing class\&.  

.SH SYNOPSIS
.br
.PP
.PP
\fC#include <bias\&.h>\fP
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBtmmc\fP ()"
.br
.ti -1c
.RI "\fBtmmc\fP (const int Nmax, const int Nmin, const int Mtot, const long long int tmmcSweepSize, const std::vector< double > box)"
.br
.RI "\fIInitialize the tmmc object\&. \fP"
.ti -1c
.RI "void \fBupdateC\fP (const int Nstart, const int Nend, const int Mstart, const int Mend, const double pa)"
.br
.RI "\fIUpdate the collection matrix\&. \fP"
.ti -1c
.RI "void \fBcalculatePI\fP ()"
.br
.RI "\fICalculate the (natural logarithm of the) macrostate density matrix via the probability matrix\&. \fP"
.ti -1c
.RI "void \fBprint\fP (const std::string fileName, bool printC=false, bool printHC=false)"
.br
.RI "\fIPrint the UN-NORMALIZED biasing function (lnPI) and possibly collection matrix to files\&. \fP"
.ti -1c
.RI "void \fBreadC\fP (const std::string fileName)"
.br
.RI "\fIRead the collection matrix from a file\&. \fP"
.ti -1c
.RI "void \fBreadHC\fP (const std::string fileName)"
.br
.RI "\fIRead the visited states matrix from a file\&. \fP"
.ti -1c
.RI "void \fBsetlnPI\fP (const std::vector< double > &lnPIguess)"
.br
.RI "\fIBlindly assign a guess of the macrostate distribution\&. \fP"
.ti -1c
.RI "void \fBiterateForward\fP ()"
.br
.RI "\fIReset the visited state counter which tracks the number of times each point in the collection matrix has been visited\&. \fP"
.ti -1c
.RI "void \fBdumpVisited\fP (const std::string fileName)"
.br
.RI "\fIDump the current visited states counter\&. \fP"
.ti -1c
.RI "bool \fBcheckFullyVisited\fP ()"
.br
.RI "\fICheck if the the collection matrix has been samples sufficiently, i\&.e\&., if each state and transition has been visited tmmcSweepSize_ times\&. \fP"
.ti -1c
.RI "const \fB__BIAS_INT_TYPE__\fP \fBgetTransitionAddress\fP (const int Nstart, const int Nend, const int Mstart, const int Mend)"
.br
.RI "\fIFor a given multidimensional array which has been cast into 1D, find the address that refers to a given transition\&. \fP"
.ti -1c
.RI "const \fB__BIAS_INT_TYPE__\fP \fBgetAddress\fP (const int Nval, const int Mval)"
.br
.RI "\fIGet the address in lnPI that corresponds to a given macrostate\&. \fP"
.ti -1c
.RI "const long long int \fBnumSweeps\fP ()"
.br
.ti -1c
.RI "const double \fBgetBias\fP (const int address)"
.br
.ti -1c
.RI "const std::vector< double > \fBgetC\fP ()"
.br
.RI "\fIReturn the collection matrix as it is\&. \fP"
.ti -1c
.RI "const std::vector< double > \fBgetHC\fP ()"
.br
.in -1c
.SH "Detailed Description"
.PP 
Transition Matrix Monte Carlo biasing class\&. 
.PP
Definition at line 24 of file bias\&.h\&.
.SH "Constructor & Destructor Documentation"
.PP 
.SS "tmmc::tmmc ()\fC [inline]\fP"

.PP
Definition at line 26 of file bias\&.h\&.
.PP
.nf
26 {};
.fi
.SS "tmmc::tmmc (const intNmax, const intNmin, const intMtot, const long long inttmmcSweepSize, const std::vector< double >box)"

.PP
Initialize the tmmc object\&. 
.PP
\fBParameters:\fP
.RS 4
\fINmax\fP Upper bound for total number of particles\&. 
.br
\fINmin\fP Lower bound for total number of particles\&. 
.br
\fIMtot\fP Total number of expanded ensemble states in a system\&. 
.br
\fItmmcSweepSize\fP Number of times the each point in the collection matrix must be visited for a 'sweep' to be considered finished 
.br
\fIbox\fP Vector of simulations box dimensions\&. 
.RE
.PP

.PP
Definition at line 12 of file bias\&.cpp\&.
.PP
References __BIAS_INT_TYPE__\&.
.PP
.nf
12                                                                                                                             {
13     if (Nmin > Nmax) {
14         throw customException ("Nmin ("+std::to_string(Nmin)+") > Nmax ("+std::to_string(Nmax)+" in TMMC bias");
15     }
16     if (Nmin < 0) {
17         throw customException ("Nmin < 0 in TMMC bias");
18     }
19     if (Mtot < 1) {
20         throw customException ("Mtot < 1 in TMMC bias");
21     }
22 
23     __BIAS_INT_TYPE__ size = (Nmax - Nmin + 1);
24     Nmin_ = Nmin;
25     Nmax_ = Nmax;
26     Mtot_ = Mtot;
27 
28     if (box\&.size() != 3) {
29         throw customException ("Illegal number of box dimensions in TMMC");
30     }
31     for (unsigned int i = 0; i < box\&.size(); ++i) {
32         if (box[i] < 0) {
33             throw customException ("Illegal box dimensions in TMMC");
34         }
35     }
36     box_\&.resize(3, 0);
37     box_ = box;
38 
39     nSweeps_ = 0;
40     if (tmmcSweepSize < 1) {
41         throw customException ("TMMC sweep size must be >= 1");
42     }
43     tmmcSweepSize_ = tmmcSweepSize;
44 
45     // attempt to allocate memory for collection matrix and initializes it all to 0
46     try {
47         C_\&.resize(3*Mtot_*size, 0);
48     } catch (const std::bad_alloc &ce) {
49         throw customException ("Out of memory, cannot allocate space for collection matrix in tmmc");
50     }
51 
52     // attempt to allocate memory for probability matrix and initializes it all to 0
53     try {
54         P_\&.resize(3*Mtot_*size, 0);
55     } catch (const std::bad_alloc &ce) {
56         throw customException ("Out of memory, cannot allocate space for probability matrix in tmmc");
57     }
58 
59     // attempt to allocate memory for states counter to check how often a sweep has been performed
60     try {
61         HC_\&.resize(3*Mtot_*size, 0);
62     } catch (const std::bad_alloc &ce) {
63         throw customException ("Out of memory, cannot allocate space for the sweep counter in tmmc");
64     }
65 
66     // attempt to allocate memory for lnPI matrix and initializes it all to 0
67     try {
68         lnPI_\&.resize(Mtot_*size, 0\&.0);
69     } catch (const std::bad_alloc &ce) {
70         throw customException ("Out of memory, cannot allocate space for macrostate distribution matrix in tmmc");
71     }
72 }
.fi
.SH "Member Function Documentation"
.PP 
.SS "void tmmc::calculatePI ()"

.PP
Calculate the (natural logarithm of the) macrostate density matrix via the probability matrix\&. 
.PP
Definition at line 239 of file bias\&.cpp\&.
.PP
References __BIAS_INT_TYPE__, and getTransitionAddress()\&.
.PP
Referenced by checkpoint::load(), performCrossover(), and performTMMC()\&.
.PP
.nf
239                         {
240     const int endPoint = C_\&.size() - (Mtot_-1)*3;
241     for (__BIAS_INT_TYPE__ i = 0; i < endPoint; i += 3) {
242         double sum = 0\&.0;
243         for (unsigned int j = 0; j < 3; ++j) {
244             sum += C_[i+j];
245         }
246         if (sum > 0) {
247             for (unsigned int j = 0; j < 3; ++j) {
248                 P_[i+j] = C_[i+j] / sum;
249             }
250         } else {
251             // This state has not been visited at all if sum = 0\&.  However, at high system densities this could be the "correct"
252             // result so this error may need to be discarded later in favor of:
253             // P_[i+j] = 0;
254             // However, having this throw an exception is also a good way to find that upper bound where the system is completely packed
255             // so I will keep it this way for now\&.
256             throw customException ("Cannot compute TMMC macrostate distribution because probability matrix contains zeros");
257         }
258     }
259 
260     // Reset first value to zero just to start fresh\&. Since only ratios matter this is perfectly fair\&.
261     lnPI_[0] = 0\&.0;
262     int counter = 0;
263     __BIAS_INT_TYPE__ address1 = 0, address2 = 0, nStartForward = 0, mStartForward = 0, nEndForward = 0, mEndForward = 0, nStartBackward = 0, nEndBackward = 0, mStartBackward = 0, mEndBackward = 0;
264     for (__BIAS_INT_TYPE__ i = 0; i < (Nmax_ - Nmin_); ++i) { // don't calculate the last N = Nmax when M > 0, stops initially at N = Nmax, M = 0
265         nStartForward = Nmin_+i;
266         for (__BIAS_INT_TYPE__ j = 0; j < Mtot_; ++j) {
267             mStartForward = j;
268             if (j == Mtot_-1) {
269                 nEndForward = nStartForward + 1;
270                 mEndForward = 0;
271             } else {
272                 nEndForward = nStartForward;
273                 mEndForward = j + 1;
274             }
275 
276             nStartBackward = nEndForward;
277             nEndBackward = nStartForward;
278             mStartBackward = mEndForward;
279             mEndBackward = mStartForward;
280 
281             address1 = getTransitionAddress(nStartForward, nEndForward, mStartForward, mEndForward);
282             address2 = getTransitionAddress(nStartBackward, nEndBackward, mStartBackward, mEndBackward);
283 
284             if (!(P_[address1] > 0) || !(P_[address2] > 0)) {
285                 throw customException ("Cannot compute TMMC macrostate distribution because probability matrix contains zeros at address: P["+std::to_string(address1)+"] = "+std::to_string(P_[address1])+", P["+std::to_string(address2)+"] = "+std::to_string(P_[address2]));
286             }
287             lnPI_[counter+1] = lnPI_[counter] + log(P_[address1]/P_[address2]); // this is why P_ cannot be zero
288             counter++;
289         }
290     }
291 }
.fi
.SS "bool tmmc::checkFullyVisited ()"

.PP
Check if the the collection matrix has been samples sufficiently, i\&.e\&., if each state and transition has been visited tmmcSweepSize_ times\&. 
.PP
Definition at line 100 of file bias\&.cpp\&.
.PP
References __BIAS_INT_TYPE__\&.
.PP
Referenced by performCrossover(), and performTMMC()\&.
.PP
.nf
100                               {
101     const int endPoint = HC_\&.size() - (Mtot_-1)*3; // we don't care about the last chunk where N = Nmax, but M > 0 - stop at N = Nmax, M = 0
102     for (__BIAS_INT_TYPE__ i = 0; i < endPoint; i += 3) {
103         if (i == 0) {
104             // lower bound, so only +1 and 0 moves must be sampled
105             if ((HC_[i+1] < tmmcSweepSize_) || (HC_[i] < tmmcSweepSize_)) {
106                 return false;
107             }
108         } else if (i == endPoint-3) {
109             // upper bound, so only -1 and 0 moves must be sampled
110             if ((HC_[i] < tmmcSweepSize_) || (HC_[i+2] < tmmcSweepSize_)) {
111                 return false;
112             }
113         } else {
114             // midpoints, both +1 and -1 (and 0) moves must be sampled
115             if ((HC_[i] < tmmcSweepSize_) || (HC_[i+1] < tmmcSweepSize_) || (HC_[i+2] < tmmcSweepSize_)) {
116                 return false;
117             }
118         }
119     }
120 
121     return true;
122 }
.fi
.SS "void tmmc::dumpVisited (const std::stringfileName)"

.PP
Dump the current visited states counter\&. 
.PP
\fBParameters:\fP
.RS 4
\fIfilename\fP Name of file to print to\&. Prints in column format\&. 
.RE
.PP

.PP
Definition at line 79 of file bias\&.cpp\&.
.PP
Referenced by performCrossover(), and print()\&.
.PP
.nf
79                                                 {
80     std::ofstream of;
81     std::string name = fileName+"\&.dat";
82     of\&.open(name\&.c_str(), std::ofstream::out);
83     if (!of\&.is_open()) {
84         throw customException ("Unable to write TMMC visited states matrix to "+name);
85     }
86     of << "# TMMC visited states counter in single row (vectorized) notation\&." << std::endl;
87     of << "# species_total_upper_bound: " << Nmax_ << std::endl;
88     of << "# species_total_lower_bound: " << Nmin_ << std::endl;
89     double V = box_[0]*box_[1]*box_[2];
90     of << "# volume: " << std::setprecision(15) << V << std::endl;
91     for (long long int i = 0; i < HC_\&.size(); ++i) {
92         of << std::setprecision(15) << HC_[i] << std::endl;
93     }
94     of\&.close();
95 }
.fi
.SS "const \fB__BIAS_INT_TYPE__\fP tmmc::getAddress (const intNval, const intMval)"

.PP
Get the address in lnPI that corresponds to a given macrostate\&. 
.PP
\fBParameters:\fP
.RS 4
\fINval\fP Number of total atoms 
.br
\fIMval\fP Value of expanded ensemble state 
.RE
.PP

.PP
Definition at line 199 of file bias\&.cpp\&.
.PP
Referenced by calculateBias()\&.
.PP
.nf
199                                                                         {
200     if (Nval > Nmax_ || Nval < Nmin_ || Mval < 0 || Mval > Mtot_-1) {
201         throw customException ("N, M out of bounds in TMMC object, cannot retrieve address");
202     }
203     return (Nval - Nmin_)*Mtot_ + Mval;
204 }
.fi
.SS "const double tmmc::getBias (const intaddress)\fC [inline]\fP"

.PP
Definition at line 41 of file bias\&.h\&.
.PP
Referenced by calculateBias()\&.
.PP
.nf
41 { return -lnPI_[address]; }
.fi
.SS "const std::vector< double > tmmc::getC ()\fC [inline]\fP"

.PP
Return the collection matrix as it is\&. 
.PP
Definition at line 42 of file bias\&.h\&.
.SS "const std::vector< double > tmmc::getHC ()\fC [inline]\fP"

.PP
Definition at line 43 of file bias\&.h\&.
.PP
.nf
43 { return HC_; }
.fi
.SS "const \fB__BIAS_INT_TYPE__\fP tmmc::getTransitionAddress (const intNstart, const intNend, const intMstart, const intMend)"

.PP
For a given multidimensional array which has been cast into 1D, find the address that refers to a given transition\&. Assumes only valid moves are moving by +/-1 M (and subsequently N), will throw exception if this is not met\&.
.PP
\fBParameters:\fP
.RS 4
\fINstart\fP Number of total species initially (before MC move) 
.br
\fINend\fP Number of total species (in order) after the MC move 
.br
\fIMstart\fP Expanded ensemble state the system begins in 
.br
\fIMend\fP Expanded ensemble state the system ends in 
.RE
.PP

.PP
Definition at line 141 of file bias\&.cpp\&.
.PP
References __BIAS_INT_TYPE__\&.
.PP
Referenced by calculatePI(), and updateC()\&.
.PP
.nf
141                                                                                                                       {
142     if (Nstart > Nmax_ || Nstart < Nmin_ || Nend > (Nmax_+1) || Nend < (Nmin_-1) || Mstart < 0 || Mstart > Mtot_-1 || Mend < 0 || Mend > Mtot_-1) { // Nend has array positions for going over end of bounds but are never used, still they are valid
143         throw customException ("N, M out of bounds in TMMC object, cannot retrieve address");
144     }
145 
146     if (Mtot_ > 1) {
147         // expanded ensemble
148         int y = 0;
149         if (Nstart == Nend) {
150             // moving within an expanded set
151             int addOrSubtract = Mend - Mstart;
152             if (addOrSubtract == 0) {
153                 y = 0;
154             } else if (addOrSubtract == 1) {
155                 y = 1;
156             } else if (addOrSubtract == -1) {
157                 y = 2;
158             } else {
159                 throw customException ("Illegal addOrSubtract value");
160             }
161         } else {
162             // crossing over
163             if (Nend > Nstart) {
164                 y = 1;
165                 if (Mstart != Mtot_ - 1 || Mend != 0) {
166                     throw customException ("Illegal expanded ensemble values");
167                 }
168             } else {
169                 y = 2;
170                 if (Mstart != 0 || Mend != (Mtot_-1)) {
171                     throw customException ("Illegal expanded ensemble values");
172                 }
173             }
174         }
175         return 3*((Nstart - Nmin_)*Mtot_ + Mstart) + y;
176     } else {
177         // no expanded ensemble
178         int addOrSubtract = (Nend - Nstart), y = 0;
179         if (addOrSubtract == 0) {
180             y = 0;
181         } else if (addOrSubtract == 1) {
182             y = 1;
183         } else if (addOrSubtract == -1) {
184             y = 2;
185         } else {
186             throw customException ("Illegal addOrSubtract value");
187         }
188         __BIAS_INT_TYPE__ x = Nstart - Nmin_;
189         return x*3 + y; // equivalent to expanded ensemble because Mstart = 0 always, and Mtot_ = 1
190     }
191 }
.fi
.SS "void tmmc::iterateForward ()"

.PP
Reset the visited state counter which tracks the number of times each point in the collection matrix has been visited\&. 
.PP
Definition at line 127 of file bias\&.cpp\&.
.PP
Referenced by performCrossover(), and performTMMC()\&.
.PP
.nf
127                            {
128     std::fill(HC_\&.begin(), HC_\&.end(), 0);
129     nSweeps_++;
130 }
.fi
.SS "const long long int tmmc::numSweeps ()\fC [inline]\fP"

.PP
Definition at line 40 of file bias\&.h\&.
.PP
Referenced by performCrossover()\&.
.PP
.nf
40 { return nSweeps_; }
.fi
.SS "void tmmc::print (const std::stringfileName, boolprintC = \fCfalse\fP, boolprintHC = \fCfalse\fP)"

.PP
Print the UN-NORMALIZED biasing function (lnPI) and possibly collection matrix to files\&. Will overwrite the files if another with that name exists\&.
.PP
\fBParameters:\fP
.RS 4
\fIfileName\fP Name of the file to print to\&. Will append with '_lnPI' and '_C' for biasing function and collection matrix, respectively\&. 
.br
\fIprintC\fP Defaults to false, but if true will also print the collection matrix\&. 
.br
\fIprintHC\fP Defaults to false, but if true will also print the visited states matrix\&. 
.RE
.PP

.PP
Definition at line 301 of file bias\&.cpp\&.
.PP
References dumpVisited()\&.
.PP
Referenced by checkpoint::dump(), performCrossover(), and performTMMC()\&.
.PP
.nf
301                                                                      {
302     // Print collection matrix
303     if (printC) {
304         // print all states, including partial ones, so this can be used to restart from, etc\&.
305         std::ofstream of;
306         std::string name = fileName+"_C\&.dat";
307         of\&.open(name\&.c_str(), std::ofstream::out);
308         if (!of\&.is_open()) {
309             throw customException ("Unable to write TMMC collection matrix to "+name);
310         }
311         of << "# Collection matrix in single row (vectorized) notation\&." << std::endl;
312         of << "# species_total_upper_bound: " << Nmax_ << std::endl;
313         of << "# species_total_lower_bound: " << Nmin_ << std::endl;
314         double V = box_[0]*box_[1]*box_[2];
315         of << "# volume: " << std::setprecision(15) << V << std::endl;
316         for (long long int i = 0; i < C_\&.size(); ++i) {
317             of << std::setprecision(15) << C_[i] << std::endl;
318         }
319         of\&.close();
320     }
321 
322     // Print visited states matrix
323     if (printHC) {
324         // print all states, including partial ones, so this can be used to restart from, etc\&.
325         dumpVisited(fileName+"_HC");
326     }
327 
328     // Print lnPI (bias) matrix
329     std::ofstream of;
330     std::string name = fileName+"_lnPI\&.dat";
331     of\&.open(name\&.c_str(), std::ofstream::out);
332     if (!of\&.is_open()) {
333         throw customException ("Unable to write TMMC lnPI to "+name);
334     }
335     of << "# lnPI (bias) matrix in single row (vectorized) notation\&." << std::endl;
336     of << "# species_total_upper_bound: " << Nmax_ << std::endl;
337     of << "# species_total_lower_bound: " << Nmin_ << std::endl;
338     double V = box_[0]*box_[1]*box_[2];
339     of << "# volume: " << std::setprecision(15) << V << std::endl;
340     for (long long int i = 0; i < lnPI_\&.size(); i += Mtot_) {
341         of << std::setprecision(15) << lnPI_[i] << std::endl; // only print the integral states
342     }
343     of\&.close();
344 }
.fi
.SS "void tmmc::readC (const std::stringfileName)"

.PP
Read the collection matrix from a file\&. This assumes the user has already guaranteed that the bounds are consistent, e\&.g\&. Nmin and Nmax, as it will not check this automatically\&. Also assumes file was generated by this code\&. 'Hand made' ones might have formatting issues since parsing is done based on tokens\&.
.PP
\fBParameters:\fP
.RS 4
\fIfileName\fP Name of file containing the collection matrix\&. Must include file extension\&. 
.RE
.PP

.PP
Definition at line 378 of file bias\&.cpp\&.
.PP
Referenced by checkpoint::load(), and performTMMC()\&.
.PP
.nf
378                                           {
379     std::ifstream infile (fileName\&.c_str());
380     if (!infile\&.is_open()) {
381         throw customException("Unable to read collection matrix from ASCII file "+fileName);
382     }
383     std::string line;
384     int lineIndex = 0;
385     while(std::getline(infile,line)) {
386         std::stringstream lineStream(line);
387         // skip any header information
388         if (line\&.compare(0,1,"#",0,1) != 0) {
389             C_[lineIndex] = atof(line\&.c_str());
390             lineIndex++;
391         }
392     }
393     infile\&.close();
394 }
.fi
.SS "void tmmc::readHC (const std::stringfileName)"

.PP
Read the visited states matrix from a file\&. This assumes the user has already guaranteed that the bounds are consistent, e\&.g\&. Nmin and Nmax, as it will not check this automatically\&. Also assumes file was generated by this code\&. 'Hand made' ones might have formatting issues since parsing is done based on tokens\&.
.PP
\fBParameters:\fP
.RS 4
\fIfileName\fP Name of file containing the visited states matrix\&. Must include file extension\&. 
.RE
.PP

.PP
Definition at line 353 of file bias\&.cpp\&.
.PP
Referenced by checkpoint::load()\&.
.PP
.nf
353                                            {
354     std::ifstream infile (fileName\&.c_str());
355     if (!infile\&.is_open()) {
356         throw customException("Unable to read visited states matrix from ASCII file "+fileName);
357     }
358     std::string line;
359     int lineIndex = 0;
360     while(std::getline(infile,line)) {
361         std::stringstream lineStream(line);
362         // skip any header information
363         if (line\&.compare(0,1,"#",0,1) != 0) {
364             HC_[lineIndex] = atof(line\&.c_str());
365             lineIndex++;
366         }
367     }
368     infile\&.close();
369 }
.fi
.SS "void tmmc::setlnPI (const std::vector< double > &lnPIguess)\fC [inline]\fP"

.PP
Blindly assign a guess of the macrostate distribution\&. 
.PP
Definition at line 34 of file bias\&.h\&.
.SS "void tmmc::updateC (const intNstart, const intNend, const intMstart, const intMend, const doublepa)"

.PP
Update the collection matrix\&. This records the number of times a transition probability is measured with a finite, non-zero probability\&. This way, when \fBcheckFullyVisited()\fP returns true, all the lnPI values can be calculated since all transition probabilities will be finite\&. Otherwise, transitions could be 'sampled' but if the dU = inf, then the collection matrix is updated with a value of 0\&. This could theoretically remain zero until the end of a sweep which is later caught when it creates a problem for calculating lnPI in \fBcalculatePI()\fP\&.
.PP
\fBParameters:\fP
.RS 4
\fINstart\fP Total number of atoms initially (before MC move) 
.br
\fINend\fP Total number of atoms after the MC move 
.br
\fIMstart\fP Initial value of expanded ensemble state 
.br
\fIMend\fP Final value of expanded ensemble state 
.br
\fIpa\fP Unbiased Metropolis criterion for making a MC move (i\&.e\&. pa = min(1, exp(\&.\&.\&.))) 
.RE
.PP

.PP
Definition at line 215 of file bias\&.cpp\&.
.PP
References getTransitionAddress(), and customException::what()\&.
.PP
Referenced by aggVolBias3::make(), translateParticle::make(), deleteParticle::make(), insertParticle::make(), and swapParticles::make()\&.
.PP
.nf
215                                                                                                        {
216     int i = 0, j = 0;
217     try {
218         i = getTransitionAddress(Nstart, Nend, Mstart, Mend);
219     } catch (customException &ce) {
220         throw customException ("Cannot update collection matrix: " + std::to_string(*ce\&.what()));
221     }
222     try {
223         j = getTransitionAddress(Nstart, Nstart, Mstart, Mstart);
224     } catch (customException &ce) {
225         throw customException ("Cannot update collection matrix: " + std::to_string(*ce\&.what()));
226     }
227     C_[i] += pa;
228     C_[j] += (1-pa);
229     if (pa > 0\&.0) {
230         HC_[i] += 1\&.0; // Only count the transition actually proposed, not the Nstart --> Nstart unless that was what was originally proposed, and only count when transition probability is finite\&.
231     } else if (Nstart == 0 && Nend == 0) {
232         HC_[i] += 1\&.0; // Translation move when 0 particles in system is "early rejected" (p = 0), but this is valid - if N_min of window is > 0 checkVisited() works fine, but if includes 0, this state is detected as never being sampled otherwise, which is the incorrect response
233     }
234 }
.fi


.SH "Author"
.PP 
Generated automatically by Doxygen for Flat-Histogram Monte Carlo Simulation from the source code\&.
