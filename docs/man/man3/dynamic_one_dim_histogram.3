.TH "dynamic_one_dim_histogram" 3 "Fri Dec 30 2016" "Version v0.1.0" "Flat-Histogram Monte Carlo Simulation" \" -*- nroff -*-
.ad l
.nh
.SH NAME
dynamic_one_dim_histogram \- 
.SH SYNOPSIS
.br
.PP
.PP
\fC#include <histogram\&.h>\fP
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fB~dynamic_one_dim_histogram\fP ()"
.br
.ti -1c
.RI "\fBdynamic_one_dim_histogram\fP ()"
.br
.ti -1c
.RI "\fBdynamic_one_dim_histogram\fP (const double lb, const double ub, const double delta)"
.br
.RI "\fIInstantiate a 1D histogram that grow as needed to record values\&. \fP"
.ti -1c
.RI "void \fBreinitialize\fP (const double lb, const double ub, const double delta)"
.br
.RI "\fIRe-initialize histogram and its bounds\&. \fP"
.ti -1c
.RI "void \fBtrim_edges\fP ()"
.br
.RI "\fITrim the size of the histogram to remove leading and trailing zeros\&. \fP"
.ti -1c
.RI "void \fBprepend_bins\fP (const unsigned int nbins)"
.br
.RI "\fIAdd a number of bins to the beginning of the histogram\&. \fP"
.ti -1c
.RI "void \fBappend_bins\fP (const unsigned int nbins)"
.br
.RI "\fIAdd a number of bins to the end of the histogram\&. \fP"
.ti -1c
.RI "void \fBrecord\fP (const double value)"
.br
.RI "\fIRecord an entry in the histogram at the bin corresponding to where value falls\&. \fP"
.ti -1c
.RI "void \fBset_hist\fP (const std::deque< double > h)"
.br
.RI "\fISet the histogram\&. \fP"
.ti -1c
.RI "const double \fBget_delta\fP ()"
.br
.ti -1c
.RI "const double \fBget_lb\fP ()"
.br
.ti -1c
.RI "const double \fBget_ub\fP ()"
.br
.ti -1c
.RI "std::deque< double > \fBget_hist\fP ()"
.br
.in -1c
.SH "Detailed Description"
.PP 
Definition at line 41 of file histogram\&.h\&.
.SH "Constructor & Destructor Documentation"
.PP 
.SS "dynamic_one_dim_histogram::~dynamic_one_dim_histogram ()\fC [inline]\fP"

.PP
Definition at line 43 of file histogram\&.h\&.
.PP
.nf
43 {;}
.fi
.SS "dynamic_one_dim_histogram::dynamic_one_dim_histogram ()\fC [inline]\fP"

.PP
Definition at line 44 of file histogram\&.h\&.
.PP
.nf
44 {;}
.fi
.SS "dynamic_one_dim_histogram::dynamic_one_dim_histogram (const doublelb, const doubleub, const doubledelta)"

.PP
Instantiate a 1D histogram that grow as needed to record values\&. Aligns against the lower bound, and uses this as the bin's 'center\&.' The upper bound is internally re-calculated from the lower bound and the value of delta\&. Bins include values between [lo, hi) where a bin's value = (low+hi)/2\&.
.PP
\fBParameters:\fP
.RS 4
\fIlb\fP Lowest value that must be covered by histogram\&. This is used to align the histogram when ub and lb not integer delta's apart\&. 
.br
\fIub\fP Largest value that must be covered by histogram\&. Less relevant than lb, which is used for alignment\&. This value is only used to determined the number of bins necessary\&. 
.br
\fIdelta\fP Bin width\&. 
.RE
.PP

.PP
Definition at line 114 of file histogram\&.cpp\&.
.PP
.nf
114                                                                                                           {
115     try {
116         initialize_ (lb, ub, delta);
117     } catch (customException &ce) {
118         throw customException ("Unable to initialize dynamic_one_dim_histogram");
119     }
120 }
.fi
.SH "Member Function Documentation"
.PP 
.SS "void dynamic_one_dim_histogram::append_bins (const unsigned intnbins)"

.PP
Add a number of bins to the end of the histogram\&. 
.PP
\fBParameters:\fP
.RS 4
\fInbins\fP Number of bins to add to the end 
.RE
.PP

.PP
Definition at line 144 of file histogram\&.cpp\&.
.PP
Referenced by record()\&.
.PP
.nf
144                                                                      {
145     for (unsigned int i = 0; i < nbins; i++) {
146         try {
147             h_\&.push_back (0\&.0);
148             nbins_++;
149             ub_ += delta_;
150         } catch (std::bad_alloc &ba) {
151             throw customException ("Out of memory for dynamic_one_dim_histogram");
152         }
153     }
154 }
.fi
.SS "const double dynamic_one_dim_histogram::get_delta ()\fC [inline]\fP"

.PP
Definition at line 53 of file histogram\&.h\&.
.PP
.nf
53 { return delta_; }
.fi
.SS "std::deque< double > dynamic_one_dim_histogram::get_hist ()\fC [inline]\fP"

.PP
Definition at line 56 of file histogram\&.h\&.
.PP
.nf
56 { return h_; }
.fi
.SS "const double dynamic_one_dim_histogram::get_lb ()\fC [inline]\fP"

.PP
Definition at line 54 of file histogram\&.h\&.
.PP
.nf
54 { return lb_; }
.fi
.SS "const double dynamic_one_dim_histogram::get_ub ()\fC [inline]\fP"

.PP
Definition at line 55 of file histogram\&.h\&.
.PP
.nf
55 { return ub_; }
.fi
.SS "void dynamic_one_dim_histogram::prepend_bins (const unsigned intnbins)"

.PP
Add a number of bins to the beginning of the histogram\&. 
.PP
\fBParameters:\fP
.RS 4
\fInbins\fP Number of bins to add to the beginning 
.RE
.PP

.PP
Definition at line 127 of file histogram\&.cpp\&.
.PP
Referenced by record()\&.
.PP
.nf
127                                                                       {
128     for (unsigned int i = 0; i < nbins; i++) {
129         try {
130             h_\&.push_front (0\&.0);
131             nbins_++;
132             lb_ -= delta_;
133         } catch (std::bad_alloc &ba) {
134             throw customException ("Out of memory for dynamic_one_dim_histogram");
135         }
136     }
137 }
.fi
.SS "void dynamic_one_dim_histogram::record (const doublevalue)"

.PP
Record an entry in the histogram at the bin corresponding to where value falls\&. 
.PP
\fBParameters:\fP
.RS 4
\fIvalue\fP Raw value, bin this corresponds to is internally calculated 
.RE
.PP

.PP
Definition at line 161 of file histogram\&.cpp\&.
.PP
References append_bins(), prepend_bins(), and customException::what()\&.
.PP
.nf
161                                                           {
162     int bin = round((value - lb_)/delta_); // this "centers" the bin
163     if (std::abs(bin) < tol_) {
164         // prevent -0 case and set to 0
165         bin = 0;
166     }
167 
168     if (bin < 0) {
169         // prepend and fill
170         try {
171             prepend_bins(-bin);
172         } catch (customException &ce) {
173             std::string a = "Unable to prepend dynamic_one_dim_histogram: ", b = ce\&.what();
174             throw customException (a+b);
175         }
176     } else if (bin >= nbins_) {
177         // append and fill
178         try {
179             append_bins (bin - nbins_ + 1);
180         } catch (customException &ce) {
181             std::string a = "Unable to append dynamic_one_dim_histogram: ", b = ce\&.what();
182             throw customException (a+b);
183         }
184     }
185 
186     // re-calculate after lb potentially adjusted
187     bin = round((value - lb_)/delta_);
188     if (std::abs(bin) < tol_) {
189             // prevent -0 case and set to 0
190             bin = 0;
191     }
192     h_[bin] += 1\&.0;
193 }
.fi
.SS "void dynamic_one_dim_histogram::reinitialize (const doublelb, const doubleub, const doubledelta)"

.PP
Re-initialize histogram and its bounds\&. All entries are zeroed\&. Aligns against the lower bound, and uses this as the bin's 'center\&.' The upper bound is internally re-calculated from the lower bound and the value of delta\&. Bins include values between [lo, hi) where a bin's value = (low+hi)/2\&.
.PP
\fBParameters:\fP
.RS 4
\fIlb\fP Lowest value that must be covered by histogram\&. This is used to align the histogram when ub and lb not integer delta's apart\&. 
.br
\fIub\fP Largest value that must be covered by histogram\&. Less relevant than lb, which is used for alignment\&. This value is only used to determined the number of bins necessary\&. 
.br
\fIdelta\fP Bin width\&. 
.RE
.PP

.PP
Definition at line 98 of file histogram\&.cpp\&.
.PP
.nf
98                                                                                                   {
99     try {
100         initialize_ (lb, ub, delta);
101     } catch (customException &ce) {
102         throw customException ("Unable to re-initialize dynamic_one_dim_histogram");
103     }
104 }
.fi
.SS "void dynamic_one_dim_histogram::set_hist (const std::deque< double >h)"

.PP
Set the histogram\&. Intended to be used to restart from a checkpoint\&.
.PP
\fBParameters:\fP
.RS 4
\fIh\fP Histogram to set to\&. 
.RE
.PP

.PP
Definition at line 82 of file histogram\&.cpp\&.
.PP
.nf
82                                                                      {
83     if (h\&.size() != h_\&.size()) {
84         throw customException ("Histogram using to set is not the same as inherent, aborting");
85     } else {
86         h_ = (std::deque < double >)h;
87     }
88 }
.fi
.SS "void dynamic_one_dim_histogram::trim_edges ()"

.PP
Trim the size of the histogram to remove leading and trailing zeros\&. 
.PP
Definition at line 7 of file histogram\&.cpp\&.
.PP
.nf
7                                             {
8     long unsigned int leading = 0, trailing = 0;
9     for (std::deque < double >::iterator it = h_\&.begin(); it != h_\&.end(); ++it) {
10         if (*it <= 0) {
11             leading++;
12         } else {
13             break;
14         }
15     }
16     for (std::deque < double >::reverse_iterator rit = h_\&.rbegin(); rit != h_\&.rend(); ++rit) {
17         if (*rit <= 0) {
18             trailing++;
19         } else {
20             break;
21         }
22     }
23 
24     if (leading + trailing >= h_\&.size()) {
25         throw customException ("Cannot trim dynamic_one_dim_histogram because it is empty");
26     }
27 
28     nbins_ -= (leading + trailing);
29     lb_ += leading*delta_;
30     ub_ -= trailing*delta_;
31 
32     for (unsigned int i = 0; i < leading; ++i) {
33         h_\&.pop_front();
34     }
35     for (unsigned int i = 0; i < trailing; ++i) {
36         h_\&.pop_back();
37     }
38 }
.fi


.SH "Author"
.PP 
Generated automatically by Doxygen for Flat-Histogram Monte Carlo Simulation from the source code\&.
