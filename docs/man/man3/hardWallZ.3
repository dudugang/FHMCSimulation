.TH "hardWallZ" 3 "Fri Dec 30 2016" "Version v0.1.0" "Flat-Histogram Monte Carlo Simulation" \" -*- nroff -*-
.ad l
.nh
.SH NAME
hardWallZ \- 
.PP
Parallel hard walls in the z-direction\&.  

.SH SYNOPSIS
.br
.PP
.PP
\fC#include <barrier\&.h>\fP
.PP
Inherits \fBbarrier\fP\&.
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fB~hardWallZ\fP ()"
.br
.ti -1c
.RI "\fBhardWallZ\fP (const double lb, const double ub, const double sigma, const int M=1)"
.br
.RI "\fIInstantiate a hard wall with boundaries in the +/- z direction\&. \fP"
.ti -1c
.RI "bool \fBinside\fP (const \fBatom\fP *a1, const std::vector< double > &box)"
.br
.RI "\fIReturn whether or not a point falls between the walls (subject to a hard-sphere exclusion radius)\&. \fP"
.ti -1c
.RI "double \fBenergy\fP (const \fBatom\fP *a1, const std::vector< double > &box)"
.br
.RI "\fIInteraction energy with the wall\&. \fP"
.in -1c
.SS "Additional Inherited Members"
.SH "Detailed Description"
.PP 
Parallel hard walls in the z-direction\&. 
.PP
Definition at line 30 of file barrier\&.h\&.
.SH "Constructor & Destructor Documentation"
.PP 
.SS "hardWallZ::~hardWallZ ()\fC [inline]\fP"

.PP
Definition at line 32 of file barrier\&.h\&.
.PP
.nf
32 {};
.fi
.SS "hardWallZ::hardWallZ (const doublelb, const doubleub, const doublesigma, const intM = \fC1\fP)"

.PP
Instantiate a hard wall with boundaries in the +/- z direction\&. Expanded ensembles scale the range of interaction via the sigma parameter\&.
.PP
\fBParameters:\fP
.RS 4
\fIlb\fP z-Position of the lower wall 
.br
\fIub\fP z-Position of the upper wall 
.br
\fIsigma\fP Hard-sphere diameter the species this wall interacts with can approach within 
.br
\fIM\fP Total number of expanded ensemble states possible for this atom type (defaults to 1) 
.RE
.PP

.PP
Definition at line 385 of file barrier\&.cpp\&.
.PP
References barrier::M_\&.
.PP
.nf
385                                                                                        {
386     if (lb >= ub) {
387         throw customException ("hardWallZ must have lower bound < upper bound");
388     }
389     if (sigma < 0) {
390         throw customException ("hardWallZ must have sigma >= 0");
391     }
392     if (M < 1) {
393         throw customException ("hardWallZ must have M >= 1");
394     }
395 
396     sigma_ = sigma;
397     ub_ = ub;
398     lb_ = lb;
399     M_ = M;
400 }
.fi
.SH "Member Function Documentation"
.PP 
.SS "double hardWallZ::energy (const \fBatom\fP *a1, const std::vector< double > &box)\fC [virtual]\fP"

.PP
Interaction energy with the wall\&. Sigma is scaled linearly with expanded ensemble state\&.
.PP
\fBParameters:\fP
.RS 4
\fIa1\fP Pointer to atom with position to test - this does NOT need to be in the simulation box a priori 
.br
\fIbox\fP Simulation box 
.RE
.PP

.PP
Implements \fBbarrier\fP\&.
.PP
Definition at line 433 of file barrier\&.cpp\&.
.PP
References barrier::M_, atom::mState, NUM_INFINITY, pbc(), and atom::pos\&.
.PP
.nf
433                                                                          {
434     std::vector < double > p = a1->pos;
435     pbc (p, box);
436 
437     double sig = sigma_;
438     if (a1->mState > 0) {
439         sig = (sigma_/M_)*a1->mState;
440     }
441     if (a1->mState < 0 || a1->mState > M_-1) {
442         throw customException ("mState out of bounds for hardWallZ");
443     }
444 
445     if (p[2] >= ub_ - sig/2\&.0 || p[2] <= lb_ + sig/2\&.0) {
446         return NUM_INFINITY;
447     } else {
448         return 0\&.0;
449     }
450 }
.fi
.SS "bool hardWallZ::inside (const \fBatom\fP *a1, const std::vector< double > &box)\fC [virtual]\fP"

.PP
Return whether or not a point falls between the walls (subject to a hard-sphere exclusion radius)\&. Sigma is scaled linearly with expanded ensemble state\&.
.PP
\fBParameters:\fP
.RS 4
\fIa1\fP Pointer to atom with position to test - this does NOT need to be in the simulation box a priori 
.br
\fIbox\fP Simulation box 
.RE
.PP

.PP
Implements \fBbarrier\fP\&.
.PP
Definition at line 408 of file barrier\&.cpp\&.
.PP
References barrier::M_, atom::mState, pbc(), and atom::pos\&.
.PP
.nf
408                                                                        {
409     std::vector < double > p = a1->pos;
410     pbc (p, box);
411 
412     double sig = sigma_;
413     if (a1->mState > 0) {
414         sig = (sigma_/M_)*a1->mState;
415     }
416     if (a1->mState < 0 || a1->mState > M_-1) {
417         throw customException ("mState out of bounds for hardWallZ");
418     }
419 
420     if (p[2] >= ub_ - sig/2\&.0 || p[2] <= lb_ + sig/2\&.0) {
421         return false;
422     } else {
423         return true;
424     }
425 }
.fi


.SH "Author"
.PP 
Generated automatically by Doxygen for Flat-Histogram Monte Carlo Simulation from the source code\&.
