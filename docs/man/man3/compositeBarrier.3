.TH "compositeBarrier" 3 "Fri Dec 30 2016" "Version v0.1.0" "Flat-Histogram Monte Carlo Simulation" \" -*- nroff -*-
.ad l
.nh
.SH NAME
compositeBarrier \- 
.PP
Class which tracks all barriers (superimposed) which interact with a given species\&.  

.SH SYNOPSIS
.br
.PP
.PP
\fC#include <barrier\&.h>\fP
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBcompositeBarrier\fP ()"
.br
.ti -1c
.RI "\fB~compositeBarrier\fP ()"
.br
.RI "\fIDeallocate any system barriers present\&. \fP"
.ti -1c
.RI "void \fBclearAll\fP ()"
.br
.RI "\fIClear any barriers that are currently in the class\&. \fP"
.ti -1c
.RI "void \fBaddHardWallZ\fP (const double lb, const double ub, const double sigma, const int M=1)"
.br
.RI "\fIAdd a hard wall to interact with\&. \fP"
.ti -1c
.RI "void \fBaddSquareWellWallZ\fP (const double lb, const double ub, const double sigma, const double range, const double eps, const int M=1)"
.br
.RI "\fIAdd a square well wall to interact with\&. \fP"
.ti -1c
.RI "void \fBaddCylinderZ\fP (const double x, const double y, const double radius, const double width, const double sigma, const double eps, const int M=1)"
.br
.RI "\fIAdd a cylinder along z = 0 axis wall to interact with\&. \fP"
.ti -1c
.RI "void \fBaddRightTriangleXZ\fP (const double width, const double theta, const double lamW, const double eps, const double sigma, const double sep, const double offset, const std::vector< double > &box, const double zbase, bool top=false, const int M=1)"
.br
.RI "\fIAdd a rightTriangleZ feature to interact with\&. \fP"
.ti -1c
.RI "bool \fBinside\fP (const \fBatom\fP *a1, const std::vector< double > &box)"
.br
.RI "\fITest if inside ALL the barriers\&. \fP"
.ti -1c
.RI "double \fBenergy\fP (const \fBatom\fP *a1, const std::vector< double > &box)"
.br
.RI "\fIFind the total energy of interaction from ALL the barriers\&. \fP"
.in -1c
.SH "Detailed Description"
.PP 
Class which tracks all barriers (superimposed) which interact with a given species\&. 
.PP
Definition at line 111 of file barrier\&.h\&.
.SH "Constructor & Destructor Documentation"
.PP 
.SS "compositeBarrier::compositeBarrier ()\fC [inline]\fP"

.PP
Definition at line 113 of file barrier\&.h\&.
.PP
.nf
113 {};
.fi
.SS "compositeBarrier::~compositeBarrier ()"

.PP
Deallocate any system barriers present\&. 
.PP
Definition at line 789 of file barrier\&.cpp\&.
.PP
.nf
789                                      {
790     if (sysBarriers_\&.begin() != sysBarriers_\&.end()) {
791         for (unsigned int i = 0; i < sysBarriers_\&.size(); ++i) {
792             delete sysBarriers_[i];
793         }
794         sysBarriers_\&.clear();
795     }
796 }
.fi
.SH "Member Function Documentation"
.PP 
.SS "void compositeBarrier::addCylinderZ (const doublex, const doubley, const doubleradius, const doublewidth, const doublesigma, const doubleeps, const intM = \fC1\fP)"

.PP
Add a cylinder along z = 0 axis wall to interact with\&. 
.PP
\fBParameters:\fP
.RS 4
\fIx\fP x-coordinate of cylinder's center 
.br
\fIy\fP y-coordinate of cylinder's center 
.br
\fIradius\fP Radius of cylinder 
.br
\fIwidth\fP Width of square-well-like interaction (distance from wall) 
.br
\fIsigma\fP Hard-sphere diameter the species this wall interacts with can approach within 
.br
\fIeps\fP Magnitude of the wall interaction (U = -eps) 
.br
\fIM\fP Total number of expanded ensemble states possible for this atom type (defaults to 1) 
.RE
.PP

.PP
Definition at line 727 of file barrier\&.cpp\&.
.PP
References customException::what()\&.
.PP
.nf
727                                                                                                                                                                {
728     if (sysBarriers_\&.begin() == sysBarriers_\&.end()) {
729         try {
730             sysBarriers_\&.resize(1);
731         } catch (std::bad_alloc &ba) {
732             throw customException ("Unable to allocate space for a new barrier");
733         }
734     } else {
735         try {
736             sysBarriers_\&.resize(sysBarriers_\&.size()+1);
737         } catch (std::bad_alloc &ba) {
738             throw customException ("Unable to allocate space for a new barrier");
739         }
740     }
741     try {
742         sysBarriers_[sysBarriers_\&.size()-1] = new cylinderZ (x, y, radius, width, sigma, eps, M);
743     } catch (customException &ce) {
744         const std::string msg = ce\&.what();
745         throw customException ("Cannot add cylinderZ to composite barrier : "+msg);
746     }
747 }
.fi
.SS "void compositeBarrier::addHardWallZ (const doublelb, const doubleub, const doublesigma, const intM = \fC1\fP)"

.PP
Add a hard wall to interact with\&. 
.PP
\fBParameters:\fP
.RS 4
\fIlb\fP z-Position of the lower wall 
.br
\fIub\fP z-Position of the upper wall 
.br
\fIsigma\fP Hard-sphere diameter the species this wall interacts with can approach within 
.br
\fIM\fP Total number of expanded ensemble states possible for this atom type (defaults to 1) 
.RE
.PP

.PP
Definition at line 662 of file barrier\&.cpp\&.
.PP
References customException::what()\&.
.PP
.nf
662                                                                                                       {
663     if (sysBarriers_\&.begin() == sysBarriers_\&.end()) {
664         try {
665             sysBarriers_\&.resize(1);
666         } catch (std::bad_alloc &ba) {
667             throw customException ("Unable to allocate space for a new barrier");
668         }
669     } else {
670         try {
671             sysBarriers_\&.resize(sysBarriers_\&.size()+1);
672         } catch (std::bad_alloc &ba) {
673             throw customException ("Unable to allocate space for a new barrier");
674         }
675     }
676     try {
677         sysBarriers_[sysBarriers_\&.size()-1] = new hardWallZ (lb, ub, sigma, M);
678     } catch (customException &ce) {
679         const std::string msg = ce\&.what();
680         throw customException ("Cannot add hardWallZ to composite barrier : "+msg);
681     }
682 }
.fi
.SS "void compositeBarrier::addRightTriangleXZ (const doublewidth, const doubletheta, const doublelamW, const doubleeps, const doublesigma, const doublesep, const doubleoffset, const std::vector< double > &box, const doublezbase, booltop = \fCfalse\fP, const intM = \fC1\fP)"

.PP
Add a rightTriangleZ feature to interact with\&. 
.PP
\fBParameters:\fP
.RS 4
\fIwidth\fP Width of triangle's feature 
.br
\fItheta\fP Elevation angle of the feature in radians (0, PI) 
.br
\fIlamW\fP Attractive range ratio relative to hard sphere in contact with the feature (akin to square well), must be >= 1 
.br
\fIeps\fP Attraction strength to feature 
.br
\fIsigma\fP Hard sphere diameter of interaction with the feature 
.br
\fIsep\fP Distance between features 
.br
\fIoffset\fP Offset from x = 0 position of the first feature 
.br
\fIbox\fP System box size to check the feature (as specified) is periodic in the box 
.br
\fIzbase\fP Z-coordinate of XY plane that defines the base of the feature\&. To avoid periodicity effects be sure it is > 0 and less than Lz, but this depends on other interactions so it cannot be checked automatically here\&. 
.br
\fItop\fP If true, feature is on the 'top', else is on the bottom (default) 
.br
\fINumber\fP of expanded ensemble states to recognize (default = 1) 
.RE
.PP

.PP
Definition at line 764 of file barrier\&.cpp\&.
.PP
References customException::what()\&.
.PP
.nf
764                                                                                                                                                                                                                                                              {
765     if (sysBarriers_\&.begin() == sysBarriers_\&.end()) {
766         try {
767             sysBarriers_\&.resize(1);
768         } catch (std::bad_alloc &ba) {
769             throw customException ("Unable to allocate space for a new barrier");
770         }
771     } else {
772         try {
773             sysBarriers_\&.resize(sysBarriers_\&.size()+1);
774         } catch (std::bad_alloc &ba) {
775             throw customException ("Unable to allocate space for a new barrier");
776         }
777     }
778     try {
779         sysBarriers_[sysBarriers_\&.size()-1] = new rightTriangleXZ (width, theta, lamW, eps, sigma, sep, offset, box, zbase, top, M);
780     } catch (customException &ce) {
781         const std::string msg = ce\&.what();
782         throw customException ("Cannot add rightTriangleXZ to composite barrier : "+msg);
783     }
784 }
.fi
.SS "void compositeBarrier::addSquareWellWallZ (const doublelb, const doubleub, const doublesigma, const doublerange, const doubleeps, const intM = \fC1\fP)"

.PP
Add a square well wall to interact with\&. 
.PP
\fBParameters:\fP
.RS 4
\fIlb\fP z-Position of the lower wall 
.br
\fIub\fP z-Position of the upper wall 
.br
\fIsigma\fP Hard-sphere diameter the species this wall interacts with can approach within 
.br
\fIrange\fP Distance normal to the wall's surface where there is an interaction 
.br
\fIeps\fP Magnitude of the wall interaction (U = -eps) 
.br
\fIM\fP Total number of expanded ensemble states possible for this atom type (defaults to 1) 
.RE
.PP

.PP
Definition at line 694 of file barrier\&.cpp\&.
.PP
References customException::what()\&.
.PP
.nf
694                                                                                                                                                   {
695     if (sysBarriers_\&.begin() == sysBarriers_\&.end()) {
696         try {
697             sysBarriers_\&.resize(1);
698         } catch (std::bad_alloc &ba) {
699             throw customException ("Unable to allocate space for a new barrier");
700         }
701     } else {
702         try {
703             sysBarriers_\&.resize(sysBarriers_\&.size()+1);
704         } catch (std::bad_alloc &ba) {
705             throw customException ("Unable to allocate space for a new barrier");
706         }
707     }
708     try {
709         sysBarriers_[sysBarriers_\&.size()-1] = new squareWellWallZ (lb, ub, sigma, range, eps, M);
710     } catch (customException &ce) {
711         const std::string msg = ce\&.what();
712         throw customException ("Cannot add squareWellWallZ to composite barrier : "+msg);
713     }
714 }
.fi
.SS "void compositeBarrier::clearAll ()\fC [inline]\fP"

.PP
Clear any barriers that are currently in the class\&. 
.PP
Definition at line 116 of file barrier\&.h\&.
.SS "double compositeBarrier::energy (const \fBatom\fP *a1, const std::vector< double > &box)"

.PP
Find the total energy of interaction from ALL the barriers\&. 
.PP
\fBParameters:\fP
.RS 4
\fIa1\fP Pointer to atom with position to test - this does NOT need to be in the simulation box a priori 
.br
\fIbox\fP Simulation box 
.RE
.PP

.PP
Definition at line 819 of file barrier\&.cpp\&.
.PP
References NUM_INFINITY\&.
.PP
.nf
819                                                                                 {
820     double U = 0\&.0;
821     for (std::vector < barrier* >::iterator it = sysBarriers_\&.begin(); it != sysBarriers_\&.end(); ++it) {
822         double dU = (*it)->energy (a1, box);
823         if (dU < NUM_INFINITY) {
824             U += dU;
825         } else {
826             return NUM_INFINITY;
827         }
828     }
829     return U;
830 }
.fi
.SS "bool compositeBarrier::inside (const \fBatom\fP *a1, const std::vector< double > &box)"

.PP
Test if inside ALL the barriers\&. Returns false if outside any single one, but defaults to true (infinitely far away walls/barriers)\&.
.PP
\fBParameters:\fP
.RS 4
\fIa1\fP Pointer to atom with position to test - this does NOT need to be in the simulation box a priori 
.br
\fIbox\fP Simulation box 
.RE
.PP

.PP
Definition at line 804 of file barrier\&.cpp\&.
.PP
.nf
804                                                                               {
805     for (std::vector < barrier* >::iterator it = sysBarriers_\&.begin(); it != sysBarriers_\&.end(); ++it) {
806         if (!(*it)->inside (a1, box)) {
807             return false;
808         }
809     }
810     return true;
811 }
.fi


.SH "Author"
.PP 
Generated automatically by Doxygen for Flat-Histogram Monte Carlo Simulation from the source code\&.
