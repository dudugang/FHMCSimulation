.TH "squareWell" 3 "Thu Dec 29 2016" "Version v0.1.0" "Flat-Histogram Monte Carlo Simulation" \" -*- nroff -*-
.ad l
.nh
.SH NAME
squareWell \- 
.PP
Square-well potential Parameters should be specified in the following order: { sigma, wellwidth, welldepth, Mtot }\&.  

.SH SYNOPSIS
.br
.PP
.PP
\fC#include <potentials\&.h>\fP
.PP
Inherits \fBpairPotential\fP\&.
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fB~squareWell\fP ()"
.br
.ti -1c
.RI "void \fBsetParameters\fP (const std::vector< double > params)"
.br
.RI "\fISet the parameters in the square-well equation\&. \fP"
.ti -1c
.RI "double \fBenergy\fP (const \fBatom\fP *a1, const \fBatom\fP *a2, const std::vector< double > &box)"
.br
.RI "\fIReturn the energy of two particles\&. \fP"
.ti -1c
.RI "double \fBtailCorrection\fP (const double rhoBath)"
.br
.RI "\fITail correction for a square well potential always returns 0\&. \fP"
.ti -1c
.RI "double \fBrcut\fP ()"
.br
.RI "\fIReturn the value of r_{cut} for this potential\&. \fP"
.in -1c
.SS "Additional Inherited Members"
.SH "Detailed Description"
.PP 
Square-well potential Parameters should be specified in the following order: { sigma, wellwidth, welldepth, Mtot }\&. 
.PP
Definition at line 96 of file potentials\&.h\&.
.SH "Constructor & Destructor Documentation"
.PP 
.SS "squareWell::~squareWell ()\fC [inline]\fP"

.PP
Definition at line 98 of file potentials\&.h\&.
.PP
.nf
98 {;}
.fi
.SH "Member Function Documentation"
.PP 
.SS "double squareWell::energy (const \fBatom\fP *a1, const \fBatom\fP *a2, const std::vector< double > &box)\fC [virtual]\fP"

.PP
Return the energy of two particles\&. 
.PP
\fBParameters:\fP
.RS 4
\fIa1\fP Atom 1 
.br
\fIa2\fP Atom 2 
.br
\fIbox\fP Simulation box dimensions
.RE
.PP
\fBReturns:\fP
.RS 4
U(r) 
.RE
.PP

.PP
Implements \fBpairPotential\fP\&.
.PP
Definition at line 509 of file potentials\&.cpp\&.
.PP
References atom::mState, NUM_INFINITY, pairPotential::paramsAreSet_, pbcDist2(), and atom::pos\&.
.PP
.nf
509                                                                                           {
510     if (!paramsAreSet_) {
511         throw customException ("For squareWell parameters not set");
512     }
513 
514     const double r = sqrt(pbcDist2(a1->pos, a2->pos, box));
515 
516     int mState = 0;
517     if (a1->mState != 0) {
518         mState = a1->mState;
519     }
520     if (a2->mState != 0) {
521         mState = a2->mState;
522     }
523 
524     if (r < sigmaM_[mState]) {
525         return NUM_INFINITY;
526     } else if (r < rangeM_[mState]) {
527         return epsM_[mState];
528     } else {
529         return 0\&.0;
530     }
531 }
.fi
.SS "double squareWell::rcut ()\fC [virtual]\fP"

.PP
Return the value of r_{cut} for this potential\&. 
.PP
\fBReturns:\fP
.RS 4
r_cut 
.RE
.PP

.PP
Implements \fBpairPotential\fP\&.
.PP
Definition at line 549 of file potentials\&.cpp\&.
.PP
References pairPotential::params_, and pairPotential::paramsAreSet_\&.
.PP
.nf
549                          {
550     if (!paramsAreSet_) {
551         throw customException ("For squareWell parameters not set");
552     } else {
553         return (params_[1]);
554     }
555 }
.fi
.SS "void squareWell::setParameters (const std::vector< double >params)\fC [virtual]\fP"

.PP
Set the parameters in the square-well equation\&. 
.PP
\fBParameters:\fP
.RS 4
\fIparams\fP Vector of inputs: {sigma, wellwidth, welldepth (magnitude), Mtot} 
.RE
.PP

.PP
Implements \fBpairPotential\fP\&.
.PP
Definition at line 441 of file potentials\&.cpp\&.
.PP
References pairPotential::params_, pairPotential::paramsAreSet_, and pairPotential::useTailCorrection\&.
.PP
.nf
441                                                                  {
442     if (params\&.size() != 4) {
443         throw customException ("For squareWell must specify 4 parameters: sigma, wellwidth, welldepth, Mtot");
444     } else {
445         if (params[0] < 0) {
446             throw customException ("For squareWell, sigma > 0");
447         }
448         if (params[1] < 0) {
449             throw customException ("For squareWell, wellwidth > 0");
450         }
451         if (params[2] < 0) {
452             throw customException ("For squareWell, welldepth (magnitude) > 0");
453         }
454         if (int(params[3]) < 1) {
455             throw customException ("For squareWell, total expanded ensemble states, Mtot >= 1");
456         }
457 
458         useTailCorrection = false;
459 
460         // use a "constant volume" scheme to distribute the stages
461         sigmaM_\&.resize(int(params[3]), 0);
462         rangeM_\&.resize(int(params[3]), 0);
463         for (int i = 0; i < sigmaM_\&.size(); ++i) {
464             if (i == 0) {
465                 // fully inserted
466                 sigmaM_[i] = params[0];
467                 rangeM_[i] = params[0] + params[1];
468             } else {
469                 // use volume scaling so each stage is separated from its neighbors by the same dV
470                 double lastSigma = 0;
471                 if (i == 1) {
472                     lastSigma = 0;
473                 } else {
474                     lastSigma = sigmaM_[i-1];
475                 }
476                 sigmaM_[i] = pow(params[0]*params[0]*params[0]/(8\&.0*int(params[3])) + lastSigma*lastSigma*lastSigma, 1\&./3\&.);
477                 rangeM_[i] = sigmaM_[i] + params[1];
478             }
479         }
480 
481         // scale energy linearly across the stages
482         epsM_\&.resize(int(params[3]), 0);
483         for (int i = 0; i < epsM_\&.size(); ++i) {
484             if (i == 0) {
485                 // fully inserted
486                 epsM_[i] = -params[2];
487             } else {
488                 epsM_[i] = -i*(params[2]/int(params[3]));
489             }
490         }
491 
492         // save parameters as sigma, (sigma+wellWidth), -wellDepth to speed up energy calculation
493         params_ = params;
494         params_[1] = params[0] + params[1]; // max rcut
495         params_[2] = -params[2];
496         paramsAreSet_ = true;
497     }
498 }
.fi
.SS "double squareWell::tailCorrection (const doublerhoBath)\fC [virtual]\fP"

.PP
Tail correction for a square well potential always returns 0\&. 
.PP
\fBParameters:\fP
.RS 4
\fINumber\fP density of the surrounding fluid
.RE
.PP
\fBReturns:\fP
.RS 4
U_tail 
.RE
.PP

.PP
Implements \fBpairPotential\fP\&.
.PP
Definition at line 540 of file potentials\&.cpp\&.
.PP
.nf
540                                                       {
541     return 0\&.0;
542 }
.fi


.SH "Author"
.PP 
Generated automatically by Doxygen for Flat-Histogram Monte Carlo Simulation from the source code\&.
