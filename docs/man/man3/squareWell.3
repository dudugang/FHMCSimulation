.TH "squareWell" 3 "Fri Dec 30 2016" "Version v0.1.0" "Flat-Histogram Monte Carlo Simulation" \" -*- nroff -*-
.ad l
.nh
.SH NAME
squareWell \- 
.PP
Square-well potential Parameters should be specified in the following order: { sigma, wellwidth, welldepth, Mtot }\&.  

.SH SYNOPSIS
.br
.PP
.PP
\fC#include <potentials\&.h>\fP
.PP
Inherits \fBpairPotential\fP\&.
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fB~squareWell\fP ()"
.br
.ti -1c
.RI "void \fBsetParameters\fP (const std::vector< double > params)"
.br
.RI "\fISet the parameters in the square-well equation\&. \fP"
.ti -1c
.RI "double \fBenergy\fP (const \fBatom\fP *a1, const \fBatom\fP *a2, const std::vector< double > &box)"
.br
.RI "\fIReturn the energy of two particles\&. \fP"
.ti -1c
.RI "double \fBtailCorrection\fP (const double rhoBath)"
.br
.RI "\fITail correction for a square well potential always returns 0\&. \fP"
.ti -1c
.RI "double \fBrcut\fP ()"
.br
.RI "\fIReturn the value of r_{cut} for this potential\&. \fP"
.in -1c
.SS "Additional Inherited Members"
.SH "Detailed Description"
.PP 
Square-well potential Parameters should be specified in the following order: { sigma, wellwidth, welldepth, Mtot }\&. 
.PP
Definition at line 96 of file potentials\&.h\&.
.SH "Constructor & Destructor Documentation"
.PP 
.SS "squareWell::~squareWell ()\fC [inline]\fP"

.PP
Definition at line 98 of file potentials\&.h\&.
.PP
.nf
98 {;}
.fi
.SH "Member Function Documentation"
.PP 
.SS "double squareWell::energy (const \fBatom\fP *a1, const \fBatom\fP *a2, const std::vector< double > &box)\fC [virtual]\fP"

.PP
Return the energy of two particles\&. 
.PP
\fBParameters:\fP
.RS 4
\fIa1\fP Atom 1 
.br
\fIa2\fP Atom 2 
.br
\fIbox\fP Simulation box dimensions
.RE
.PP
\fBReturns:\fP
.RS 4
U(r) 
.RE
.PP

.PP
Implements \fBpairPotential\fP\&.
.PP
Definition at line 511 of file potentials\&.cpp\&.
.PP
References atom::mState, NUM_INFINITY, pairPotential::paramsAreSet_, pbcDist2(), and atom::pos\&.
.PP
.nf
511                                                                                           {
512     if (!paramsAreSet_) {
513         throw customException ("For squareWell parameters not set");
514     }
515 
516     const double r = sqrt(pbcDist2(a1->pos, a2->pos, box));
517 
518     int mState = 0;
519     if (a1->mState != 0) {
520         mState = a1->mState;
521     }
522     if (a2->mState != 0) {
523         mState = a2->mState;
524     }
525 
526     if (r < sigmaM_[mState]) {
527         return NUM_INFINITY;
528     } else if (r < rangeM_[mState]) {
529         return epsM_[mState];
530     } else {
531         return 0\&.0;
532     }
533 }
.fi
.SS "double squareWell::rcut ()\fC [virtual]\fP"

.PP
Return the value of r_{cut} for this potential\&. 
.PP
\fBReturns:\fP
.RS 4
r_cut 
.RE
.PP

.PP
Implements \fBpairPotential\fP\&.
.PP
Definition at line 551 of file potentials\&.cpp\&.
.PP
References pairPotential::params_, and pairPotential::paramsAreSet_\&.
.PP
.nf
551                          {
552     if (!paramsAreSet_) {
553         throw customException ("For squareWell parameters not set");
554     } else {
555         return (params_[1]);
556     }
557 }
.fi
.SS "void squareWell::setParameters (const std::vector< double >params)\fC [virtual]\fP"

.PP
Set the parameters in the square-well equation\&. 
.PP
\fBParameters:\fP
.RS 4
\fIparams\fP Vector of inputs: {sigma, width, epsilon, Mtot} 
.RE
.PP

.PP
Implements \fBpairPotential\fP\&.
.PP
Definition at line 443 of file potentials\&.cpp\&.
.PP
References pairPotential::params_, pairPotential::paramsAreSet_, and pairPotential::useTailCorrection\&.
.PP
.nf
443                                                                  {
444     if (params\&.size() != 4) {
445         throw customException ("For squareWell must specify 4 parameters: sigma, width, epsilon, Mtot");
446     } else {
447         if (params[0] < 0) {
448             throw customException ("For squareWell, sigma >= 0");
449         }
450         if (params[1] < 0) {
451             throw customException ("For squareWell, width >= 0");
452         }
453         if (params[2] < 0) {
454             throw customException ("For squareWell, epsilon >= 0");
455         }
456         if (int(params[3]) < 1) {
457             throw customException ("For squareWell, total expanded ensemble states, Mtot >= 1");
458         }
459 
460         useTailCorrection = false;
461 
462         // use a "constant volume" scheme to distribute the stages
463         sigmaM_\&.resize(int(params[3]), 0);
464         rangeM_\&.resize(int(params[3]), 0);
465         for (int i = 0; i < sigmaM_\&.size(); ++i) {
466             if (i == 0) {
467                 // fully inserted
468                 sigmaM_[i] = params[0];
469                 rangeM_[i] = params[0] + params[1];
470             } else {
471                 // use volume scaling so each stage is separated from its neighbors by the same dV
472                 double lastSigma = 0;
473                 if (i == 1) {
474                     lastSigma = 0;
475                 } else {
476                     lastSigma = sigmaM_[i-1];
477                 }
478                 sigmaM_[i] = pow(params[0]*params[0]*params[0]/(8\&.0*int(params[3])) + lastSigma*lastSigma*lastSigma, 1\&./3\&.);
479                 rangeM_[i] = sigmaM_[i] + params[1];
480             }
481         }
482 
483         // scale energy linearly across the stages
484         epsM_\&.resize(int(params[3]), 0);
485         for (int i = 0; i < epsM_\&.size(); ++i) {
486             if (i == 0) {
487                 // fully inserted
488                 epsM_[i] = -params[2];
489             } else {
490                 epsM_[i] = -i*(params[2]/int(params[3]));
491             }
492         }
493 
494         // save parameters as sigma, (sigma+wellWidth), -wellDepth to speed up energy calculation
495         params_ = params;
496         params_[1] = params[0] + params[1]; // max rcut
497         params_[2] = -params[2];
498         paramsAreSet_ = true;
499     }
500 }
.fi
.SS "double squareWell::tailCorrection (const doublerhoBath)\fC [virtual]\fP"

.PP
Tail correction for a square well potential always returns 0\&. 
.PP
\fBParameters:\fP
.RS 4
\fINumber\fP density of the surrounding fluid
.RE
.PP
\fBReturns:\fP
.RS 4
U_tail 
.RE
.PP

.PP
Implements \fBpairPotential\fP\&.
.PP
Definition at line 542 of file potentials\&.cpp\&.
.PP
.nf
542                                                       {
543     return 0\&.0;
544 }
.fi


.SH "Author"
.PP 
Generated automatically by Doxygen for Flat-Histogram Monte Carlo Simulation from the source code\&.
