.TH "moves" 3 "Fri Dec 30 2016" "Version v0.1.0" "Flat-Histogram Monte Carlo Simulation" \" -*- nroff -*-
.ad l
.nh
.SH NAME
moves \- 
.PP
Class that tracks and decides which moves whould be made\&.  

.SH SYNOPSIS
.br
.PP
.PP
\fC#include <mover\&.h>\fP
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBmoves\fP (const int M=1)"
.br
.RI "\fIInstantiate moves class\&. \fP"
.ti -1c
.RI "\fB~moves\fP ()"
.br
.RI "\fIDestructor for moves class\&. \fP"
.ti -1c
.RI "void \fBclearAll\fP ()"
.br
.RI "\fIClear all moves and related information from the class, but leaves M intact\&. \fP"
.ti -1c
.RI "void \fBmakeMove\fP (\fBsimSystem\fP &sys)"
.br
.RI "\fIChoose a move to make\&. \fP"
.ti -1c
.RI "void \fBprint\fP (const std::string filename)"
.br
.RI "\fIPrint move information to file\&. \fP"
.ti -1c
.RI "void \fBaddInsert\fP (const int index, const double prob)"
.br
.RI "\fIAdd insertion move\&. \fP"
.ti -1c
.RI "void \fBaddDelete\fP (const int index, const double prob)"
.br
.RI "\fIAdd deletion move\&. \fP"
.ti -1c
.RI "void \fBaddSwap\fP (const int index1, const int index2, const double prob)"
.br
.RI "\fIAdd swap move\&. \fP"
.ti -1c
.RI "void \fBaddTranslate\fP (const int index, const double prob, const double maxD, const std::vector< double > &box)"
.br
.RI "\fIAdd translate move\&. \fP"
.ti -1c
.RI "void \fBsetM\fP (const int M)"
.br
.RI "\fISet the value of M\&. \fP"
.ti -1c
.RI "int \fBgetM\fP ()"
.br
.ti -1c
.RI "std::vector< std::vector
.br
< double > > \fBreportMoveStatistics\fP ()"
.br
.RI "\fIReport the statistics on the success/failure of each move made so far\&. \fP"
.ti -1c
.RI "std::vector< double > \fBreportProbabilities\fP ()"
.br
.RI "\fIEcho the normalized probabilities of each move in the object\&. \fP"
.in -1c
.SH "Detailed Description"
.PP 
Class that tracks and decides which moves whould be made\&. 

However, it does NOT store the moves themselves so they should be fixed in memory elsewhere\&. 
.PP
Definition at line 20 of file mover\&.h\&.
.SH "Constructor & Destructor Documentation"
.PP 
.SS "moves::moves (const intM = \fC1\fP)"

.PP
Instantiate moves class\&. 
.PP
\fBParameters:\fP
.RS 4
\fIin\fP M Number of expanded ensemble stages for insert/delete moves 
.RE
.PP

.PP
Definition at line 8 of file mover\&.cpp\&.
.PP
References sendErr(), setM(), SYS_FAILURE, and customException::what()\&.
.PP
.nf
8                          {
9     try {
10         setM (M);
11     } catch (customException &ce) {
12         sendErr(ce\&.what());
13         exit(SYS_FAILURE);
14     }
15 }
.fi
.SS "moves::~moves ()"

.PP
Destructor for moves class\&. 
.PP
Definition at line 20 of file mover\&.cpp\&.
.PP
.nf
20                {
21     ;
22 }
.fi
.SH "Member Function Documentation"
.PP 
.SS "void moves::addDelete (const intindex, const doubleprob)"

.PP
Add deletion move\&. 
.PP
\fBParameters:\fP
.RS 4
\fIindex\fP Particle index to operate on 
.br
\fIprob\fP Probability 
.RE
.PP

.PP
Definition at line 95 of file mover\&.cpp\&.
.PP
References numToStr()\&.
.PP
Referenced by setMoves()\&.
.PP
.nf
95                                                          {
96     auto om = std::make_shared < deleteParticle > (index, "delete");
97     ownedMoves_\&.push_back(om);
98     try {
99         addOn_(ownedMoves_\&.back()->changeN(), prob);
100     } catch (std::exception &ex) {
101         const std::string msg = ex\&.what();
102         throw customException ("Cannot add deletion move for species "+numToStr(index+1)+" : "+msg);
103     }
104 }
.fi
.SS "void moves::addInsert (const intindex, const doubleprob)"

.PP
Add insertion move\&. 
.PP
\fBParameters:\fP
.RS 4
\fIindex\fP Particle index to operate on 
.br
\fIprob\fP Probability 
.RE
.PP

.PP
Definition at line 78 of file mover\&.cpp\&.
.PP
References numToStr()\&.
.PP
Referenced by setConfig(), and setMoves()\&.
.PP
.nf
78                                                          {
79     auto om = std::make_shared < insertParticle > (index, "insert");
80     ownedMoves_\&.push_back(om);
81     try {
82         addOn_(ownedMoves_\&.back()->changeN(), prob);
83     } catch (std::exception &ex) {
84         const std::string msg = ex\&.what();
85         throw customException ("Cannot add insertion move for species "+numToStr(index+1)+" : "+msg);
86     }
87 }
.fi
.SS "void moves::addSwap (const intindex1, const intindex2, const doubleprob)"

.PP
Add swap move\&. 
.PP
\fBParameters:\fP
.RS 4
\fIindex1\fP Particle index 1 to operate on 
.br
\fIindex2\fP Particle index 2 to operate on 
.br
\fIprob\fP Probability 
.RE
.PP

.PP
Definition at line 113 of file mover\&.cpp\&.
.PP
References numToStr()\&.
.PP
Referenced by setMoves()\&.
.PP
.nf
113                                                                           {
114     auto om = std::make_shared < swapParticles > (index1, index2, "swap");
115     ownedMoves_\&.push_back(om);
116     try {
117         addOn_(ownedMoves_\&.back()->changeN(), prob);
118     } catch (std::exception &ex) {
119         const std::string msg = ex\&.what();
120         throw customException ("Cannot add swap move for species pair ("+numToStr(index1+1)+","+numToStr(index2+1)+") : "+msg);
121     }
122 }
.fi
.SS "void moves::addTranslate (const intindex, const doubleprob, const doublemaxD, const std::vector< double > &box)"

.PP
Add translate move\&. 
.PP
\fBParameters:\fP
.RS 4
\fIindex\fP Particle index to operate on 
.br
\fIprob\fP Probability 
.br
\fImaxD\fP Maximium translation 
.br
\fIbox\fP Box dimensions 
.RE
.PP

.PP
Definition at line 132 of file mover\&.cpp\&.
.PP
References numToStr()\&.
.PP
Referenced by setMoves()\&.
.PP
.nf
132                                                                                                                 {
133     auto om = std::make_shared < translateParticle > (index, "translate");
134     try {
135         om->setMaxTranslation (maxD, box);
136         ownedMoves_\&.push_back(om);
137         addOn_(ownedMoves_\&.back()->changeN(), prob);
138     } catch (std::exception &ex) {
139         const std::string msg = ex\&.what();
140         throw customException ("Cannot add translation move for species "+numToStr(index+1)+" : "+msg);
141     }
142 }
.fi
.SS "void moves::clearAll ()"

.PP
Clear all moves and related information from the class, but leaves M intact\&. 
.PP
Definition at line 27 of file mover\&.cpp\&.
.PP
Referenced by setMoves()\&.
.PP
.nf
27                       {
28     normProbabilities_\&.clear();
29     rawProbabilities_\&.clear();
30     succeeded_\&.clear();
31     attempted_\&.clear();
32     ownedMoves_\&.clear();
33 }
.fi
.SS "int moves::getM ()\fC [inline]\fP"

.PP
Definition at line 33 of file mover\&.h\&.
.PP
.nf
33 { return M_; }
.fi
.SS "void moves::makeMove (\fBsimSystem\fP &sys)"

.PP
Choose a move to make\&. If in an expanded ensemble, will restrict moves which change the number of particles to the atom type that is currently on partially in the system\&.
.PP
\fBParameters:\fP
.RS 4
\fIsys\fP \fBsimSystem\fP object to make a move in\&. 
.RE
.PP

.PP
Definition at line 191 of file mover\&.cpp\&.
.PP
References simSystem::getCurrentM(), simSystem::getFractionalAtomType(), simSystem::getTotalM(), rng(), RNG_SEED, and customException::what()\&.
.PP
Referenced by performCrossover(), performTMMC(), and performWALA()\&.
.PP
.nf
191                                     {
192     if (sys\&.getTotalM() != M_) {
193         throw customException ("Error, M in system different from M in moves class operating on the system");
194     }
195     int moveChosen = -1, succ = 0, mIndex = 0;
196     bool done = false;
197     while (!done) {
198         const double ran = rng (&RNG_SEED);
199         for (unsigned int i = 0; i < normProbabilities_\&.size(); ++i) {
200             if (ran < normProbabilities_[i]) {
201                 if (sys\&.getTotalM() > 1) {
202                     // expanded ensemble has to check the moves because have to only work on the partially inserted atom
203                     if ((ownedMoves_[i]->changeN() == true) && (ownedMoves_[i]->whatType() != sys\&.getFractionalAtomType()) && (sys\&.getCurrentM() > 0)) {
204                         // reject this choice because we must only insert/delete the type that is already partially inserted IFF we are *already* in a partially inserted state
205                         // choose a new move
206                         done = false;
207                         break;
208                     } else {
209                         // get M before move happens which can change the state of the system
210                         if (ownedMoves_[i]->changeN()) {
211                             mIndex = sys\&.getCurrentM();
212                         }
213                         try {
214                             succ = ownedMoves_[i]->make(sys);
215                         } catch (customException &ce) {
216                             std::string a = "Failed to make a move properly: ";
217                             std::string b = ce\&.what();
218                             throw customException(a+b);
219                         }
220                         done = true;
221                         moveChosen = i;
222                         break;
223                     }
224                 } else {
225                     // without expanded ensemble, inserts/deletes can proceed unchecked
226                     try {
227                         succ = ownedMoves_[i]->make(sys);
228                     } catch (customException &ce) {
229                         std::string a = "Failed to make a move properly: ";
230                         std::string b = ce\&.what();
231                         throw customException(a+b);
232                     }
233                     done = true;
234                     moveChosen = i;
235                     mIndex = 0;
236                     break;
237                 }
238             }
239         }
240     }
241 
242     if (moveChosen < 0) {
243         throw customException("Failed to choose a move properly");
244     }
245 
246     attempted_[moveChosen][mIndex] += 1\&.0;
247     succeeded_[moveChosen][mIndex] += succ;
248 }
.fi
.SS "void moves::print (const std::stringfilename)"

.PP
Print move information to file\&. Appends by default\&.
.PP
\fBParameters:\fP
.RS 4
\fIfilename\fP Name of file to print to\&. 
.RE
.PP

.PP
Definition at line 53 of file mover\&.cpp\&.
.PP
References getTimeStamp(), and reportMoveStatistics()\&.
.PP
Referenced by performCrossover(), performTMMC(), and performWALA()\&.
.PP
.nf
53                                            {
54     std::ofstream statFile (filename\&.c_str(), std::ofstream::out | std::ofstream::app);
55     std::vector < std::vector < double > > stats = reportMoveStatistics();
56     statFile << "Time: " << getTimeStamp() << std::endl;
57     statFile << "---------- Move Statistics --------- " << std::endl << "Move\t\% Success" << std::endl;
58     for (unsigned int i = 0; i < stats\&.size(); ++i) {
59         double prod = 1\&.0;
60         for (unsigned int j = 0; j < stats[i]\&.size(); ++j) {
61             prod *= stats[i][j];
62             statFile << ownedMoves_[i]->myName() << " (from M = " << j << ")\t" << stats[i][j]*100\&.0 << std::endl;
63         }
64         if (stats[i]\&.size() > 1) {
65             statFile << "-------------------------------------\nProduct of percentages (%) = " << prod*100 << "\n-------------------------------------" << std::endl;
66         }
67     }
68     statFile << "------------------------------------ " << std::endl;
69     statFile\&.close();
70 }
.fi
.SS "std::vector< std::vector< double > > moves::reportMoveStatistics ()"

.PP
Report the statistics on the success/failure of each move made so far\&. If the move changes total number of particles in the system, there is a column for each expanded state it traverses\&.
.PP
\fBReturns:\fP
.RS 4
ans Number of Success / Total Attempts for each move 
.RE
.PP

.PP
Definition at line 256 of file mover\&.cpp\&.
.PP
Referenced by print()\&.
.PP
.nf
256                                                                 {
257     std::vector < std::vector < double > > ans = succeeded_;
258     if (attempted_\&.begin() == attempted_\&.end()) {
259         throw customException ("No moves added to system");
260     }
261     for (unsigned int i = 0; i < attempted_\&.size(); ++i) {
262         for (unsigned int j = 0; j < attempted_[i]\&.size(); ++j) {
263             ans[i][j] /= attempted_[i][j];
264         }
265     }
266     return ans;
267 }
.fi
.SS "std::vector< double > moves::reportProbabilities ()\fC [inline]\fP"

.PP
Echo the normalized probabilities of each move in the object\&. 
.PP
Definition at line 35 of file mover\&.h\&.
.SS "void moves::setM (const intM)"

.PP
Set the value of M\&. 
.PP
\fBParameters:\fP
.RS 4
\fIin\fP M Number of expanded ensemble stages for insert/delete moves 
.RE
.PP

.PP
Definition at line 40 of file mover\&.cpp\&.
.PP
Referenced by moves(), and setMoves()\&.
.PP
.nf
40                              {
41     if (M > 0) {
42         M_ = M;
43     } else {
44         throw customException ("Error, number of expanded ensemble stages must be > 0");
45     }
46 }
.fi


.SH "Author"
.PP 
Generated automatically by Doxygen for Flat-Histogram Monte Carlo Simulation from the source code\&.
