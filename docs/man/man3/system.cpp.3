.TH "/home/nam4/Desktop/sandbox/FHMCSimulation/src/system.cpp" 3 "Wed Dec 28 2016" "Version v0.1.0" "Flat-Histogram Monte Carlo Simulation" \" -*- nroff -*-
.ad l
.nh
.SH NAME
/home/nam4/Desktop/sandbox/FHMCSimulation/src/system.cpp \- 
.SH SYNOPSIS
.br
.PP
\fC#include 'system\&.h'\fP
.br

.SS "Functions"

.in +1c
.ti -1c
.RI "const double \fBcalculateBias\fP (\fBsimSystem\fP &sys, const int nTotFinal, const int mFinal)"
.br
.RI "\fICalculate the bias based on a systems current state and the next state being proposed\&. \fP"
.in -1c
.SH "Function Documentation"
.PP 
.SS "const double calculateBias (\fBsimSystem\fP &sys, const intnTotFinal, const intmFinal)"

.PP
Calculate the bias based on a systems current state and the next state being proposed\&. 
.PP
\fBParameters:\fP
.RS 4
\fIsys\fP System object containing the current state of the system\&. 
.br
\fInTotFinal\fP Total atoms in the proposed final state\&. 
.br
\fImFinal\fP Final value of the expanded ensemble state of the system\&. 
.br
\fIp_u\fP Ratio of the system's partition in the final and initial state (e\&.g\&. unbiased p_acc = min(1, p_u))\&.
.RE
.PP
\fBReturns:\fP
.RS 4
rel_bias The value of the relative bias to apply in the metropolis criteria during sampling 
.RE
.PP

.PP
Definition at line 1769 of file system\&.cpp\&.
.PP
References __BIAS_INT_TYPE__, tmmc::getAddress(), wala::getAddress(), tmmc::getBias(), wala::getBias(), simSystem::getCurrentM(), simSystem::getTotN(), simSystem::tmmcBias, simSystem::useTMMC, simSystem::useWALA, and simSystem::wlBias\&.
.PP
Referenced by aggVolBias3::make(), translateParticle::make(), deleteParticle::make(), insertParticle::make(), and swapParticles::make()\&.
.PP
.nf
1769                                                                                    {
1770     double rel_bias = 1\&.0;
1771 
1772     if (sys\&.useTMMC && !sys\&.useWALA) {
1773         // TMMC biasing
1774         const __BIAS_INT_TYPE__ address1 = sys\&.tmmcBias->getAddress(sys\&.getTotN(), sys\&.getCurrentM()), address2 = sys\&.tmmcBias->getAddress(nTotFinal, mFinal);
1775         const double b1 = sys\&.tmmcBias->getBias (address1), b2 = sys\&.tmmcBias->getBias (address2);
1776         rel_bias = exp(b2-b1);
1777     } else if (!sys\&.useTMMC && sys\&.useWALA) {
1778         // Wang-Landau Biasing
1779         const __BIAS_INT_TYPE__ address1 = sys\&.wlBias->getAddress(sys\&.getTotN(), sys\&.getCurrentM()), address2 = sys\&.wlBias->getAddress(nTotFinal, mFinal);
1780         const double b1 = sys\&.wlBias->getBias (address1), b2 = sys\&.wlBias->getBias (address2);
1781         rel_bias = exp(b2-b1);
1782     } else if (sys\&.useTMMC && sys\&.useWALA) {
1783         // Crossover phase where we use WL but update TMMC collection matrix
1784         const int address1 = sys\&.wlBias->getAddress(sys\&.getTotN(), sys\&.getCurrentM()), address2 = sys\&.wlBias->getAddress(nTotFinal, mFinal);
1785         const double b1 = sys\&.wlBias->getBias (address1), b2 = sys\&.wlBias->getBias (address2);
1786         rel_bias = exp(b2-b1);
1787     } else {
1788         // No biasing
1789         rel_bias = 1\&.0;
1790     }
1791 
1792     return rel_bias;
1793 }
.fi
.SH "Author"
.PP 
Generated automatically by Doxygen for Flat-Histogram Monte Carlo Simulation from the source code\&.
