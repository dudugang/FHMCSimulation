.TH "/home/nam4/Desktop/sandbox/FHMCSimulation/src/crossover.h" 3 "Wed Jan 4 2017" "Version v0.1.0" "Flat-Histogram Monte Carlo Simulation" \" -*- nroff -*-
.ad l
.nh
.SH NAME
/home/nam4/Desktop/sandbox/FHMCSimulation/src/crossover.h \- 
.SH SYNOPSIS
.br
.PP
\fC#include <string>\fP
.br
\fC#include <memory>\fP
.br
\fC#include 'system\&.h'\fP
.br
\fC#include 'checkpoint\&.h'\fP
.br
\fC#include 'utilities\&.h'\fP
.br
\fC#include 'mover\&.h'\fP
.br
\fC#include 'sanity\&.h'\fP
.br

.SS "Functions"

.in +1c
.ti -1c
.RI "void \fBperformCrossover\fP (\fBsimSystem\fP &sys, \fBcheckpoint\fP &res, \fBmoves\fP *usedMovesEq)"
.br
.RI "\fIPerform crossover from Wang-Landau stage of simulation to TMMC\&. \fP"
.in -1c
.SH "Function Documentation"
.PP 
.SS "void performCrossover (\fBsimSystem\fP &sys, \fBcheckpoint\fP &res, \fBmoves\fP *usedMovesEq)"

.PP
Perform crossover from Wang-Landau stage of simulation to TMMC\&. 
.PP
\fBParameters:\fP
.RS 4
\fIsys\fP System to simulate 
.br
\fIres\fP Restart/checkpoint information 
.br
\fIusedMovesEq\fP Move class to use 
.RE
.PP

.PP
Definition at line 10 of file crossover\&.cpp\&.
.PP
References tmmc::calculatePI(), checkpoint::check(), simSystem::checkEnergyHistogramBounds(), tmmc::checkFullyVisited(), checkpoint::crossoverDone, simSystem::crossoverTotalStepCounter, tmmc::dumpVisited(), wala::evaluateFlatness(), simSystem::getCurrentM(), simSystem::getTMMCBias(), simSystem::getTotalM(), simSystem::getWALABias(), tmmc::iterateForward(), wala::iterateForward(), wala::lnF(), moves::makeMove(), checkpoint::moveCounter, simSystem::nCrossoverVisits, tmmc::numSweeps(), numToStr(), moves::print(), tmmc::print(), simSystem::reInitializeEnergyHistogram(), checkpoint::resFromCross, sanityChecks(), sendErr(), sendMsg(), simSystem::startTMMC(), simSystem::stopWALA(), checkpoint::sweepCounter, SYS_FAILURE, simSystem::tmmcSweepSize, simSystem::useWALA, simSystem::walaTotalStepCounter, customException::what(), and simSystem::wlSweepSize\&.
.PP
.nf
10                                                                             {
11     if (res\&.crossoverDone) {
12         throw customException ("Checkpoint indicates crossover already finished");
13     }
14     sendMsg("Crossing over to build TMMC matrix");
15 
16     res\&.crossoverDone = false;
17     long long int timesFullyVisited = 0, moveStart = 0;
18     if (!res\&.resFromCross) {
19         if (!sys\&.useWALA) {
20             throw customException ("WALA not configured, cannot proceeed with crossover");
21         }
22         sys\&.startTMMC (sys\&.tmmcSweepSize, sys\&.getTotalM());
23     } else {
24         timesFullyVisited = res\&.sweepCounter;
25         moveStart = res\&.moveCounter;
26     }
27 
28     sendMsg("Starting from lnF = "+numToStr(sys\&.getWALABias()->lnF()));
29     sendMsg("Starting from "+numToStr(moveStart)+" moves in current sweep");
30     sendMsg("Starting from "+numToStr(timesFullyVisited)+" out of "+numToStr(sys\&.nCrossoverVisits)+" sweeps");
31 
32     while (timesFullyVisited < sys\&.nCrossoverVisits) {
33         for (long long int move = moveStart; move < sys\&.wlSweepSize; ++move) {
34             try {
35                 usedMovesEq->makeMove(sys);
36                 sys\&.crossoverTotalStepCounter += 1\&.0;
37             } catch (customException &ce) {
38                 sendErr(ce\&.what());
39                 exit(SYS_FAILURE);
40             }
41             if (sys\&.getCurrentM() == 0) {
42                 sys\&.checkEnergyHistogramBounds ();
43             }
44             res\&.check(sys, move, timesFullyVisited, false);
45         }
46 
47         if (sys\&.getTMMCBias()->checkFullyVisited()) {
48             try {
49                 sys\&.getTMMCBias()->calculatePI();
50             } catch (customException &ce) {
51                 sendErr(ce\&.what());
52                 sys\&.getTMMCBias()->print("tmmc-crossover-fail", true);
53                 sys\&.getTMMCBias()->dumpVisited("tmmc-crossover-fail-visited");
54                 exit(SYS_FAILURE);
55             }
56             sys\&.getTMMCBias()->iterateForward (); // Reset the counting matrix and increment total sweep number
57             timesFullyVisited = sys\&.getTMMCBias()->numSweeps();
58             sendMsg("Times C fully visited = "+numToStr(timesFullyVisited));
59             usedMovesEq->print("crossover\&.stats");
60         }
61 
62         // Check if bias has flattened out, just for continuous improvement
63         bool flat = sys\&.getWALABias()->evaluateFlatness();
64         if (flat) {
65             sys\&.getWALABias()->iterateForward(); // If flat, need to reset H and reduce lnF
66             sendMsg("Wang-Landau is now flat, new lnF = "+numToStr(sys\&.getWALABias()->lnF()));
67         }
68     }
69 
70     // Switch over to TMMC completely
71     sendMsg("Switching over to TMMC completely, ending Wang-Landau");
72     sys\&.stopWALA();
73     try {
74         sys\&.getTMMCBias()->calculatePI();
75     } catch (customException &ce) {
76         sendErr(ce\&.what());
77         sys\&.getTMMCBias()->print("tmmc-beginning-fail", true);
78         sys\&.getTMMCBias()->dumpVisited("tmmc-beginning-fail-visited");
79         exit(SYS_FAILURE);
80     }
81 
82     sys\&.reInitializeEnergyHistogram(); // If doing initial WL "equilibration" re-initialize the histogram using bounds
83     sanityChecks(sys);
84     res\&.crossoverDone = true; // Do not need to dump a checkpoint
85     sendMsg("Completed "+numToStr(sys\&.crossoverTotalStepCounter)+" total MC steps as part of crossover stage");
86     sendMsg("Total MC steps taken in simulation: "+numToStr(sys\&.walaTotalStepCounter+sys\&.crossoverTotalStepCounter));
87 }
.fi
.SH "Author"
.PP 
Generated automatically by Doxygen for Flat-Histogram Monte Carlo Simulation from the source code\&.
