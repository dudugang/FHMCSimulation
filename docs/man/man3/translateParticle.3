.TH "translateParticle" 3 "Wed Jan 4 2017" "Version v0.1.0" "Flat-Histogram Monte Carlo Simulation" \" -*- nroff -*-
.ad l
.nh
.SH NAME
translateParticle \- 
.SH SYNOPSIS
.br
.PP
.PP
\fC#include <translate\&.h>\fP
.PP
Inherits \fBmcMove\fP\&.
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBtranslateParticle\fP ()"
.br
.ti -1c
.RI "\fBtranslateParticle\fP (const int typeIndex, const std::string tag)"
.br
.RI "\fIInstantiate a new move, also give a name which is the combination of auser-defined tag + the particle index it operates on\&. \fP"
.ti -1c
.RI "int \fBmake\fP (\fBsimSystem\fP &sys)"
.br
.RI "\fITranslate a particle in the system\&. \fP"
.ti -1c
.RI "void \fBsetMaxTranslation\fP (const double maxD, const std::vector< double > &box)"
.br
.RI "\fISet the maximum translation in any single move\&. \fP"
.ti -1c
.RI "const double \fBgetMaxTranslation\fP ()"
.br
.RI "\fIReturn the max translation allowed in a single move\&. \fP"
.in -1c
.SS "Additional Inherited Members"
.SH "Detailed Description"
.PP 
Definition at line 13 of file translate\&.h\&.
.SH "Constructor & Destructor Documentation"
.PP 
.SS "translateParticle::translateParticle ()\fC [inline]\fP"

.PP
Definition at line 15 of file translate\&.h\&.
.PP
References mcMove::changeN_\&.
.PP
.nf
15 { changeN_ = false; }
.fi
.SS "translateParticle::translateParticle (const inttypeIndex, const std::stringtag)\fC [inline]\fP"

.PP
Instantiate a new move, also give a name which is the combination of auser-defined tag + the particle index it operates on\&. 
.PP
Definition at line 16 of file translate\&.h\&.
.PP
References mcMove::changeN_, mcMove::name_, and mcMove::typeIndex_\&.
.SH "Member Function Documentation"
.PP 
.SS "const double translateParticle::getMaxTranslation ()\fC [inline]\fP"

.PP
Return the max translation allowed in a single move\&. 
.PP
Definition at line 19 of file translate\&.h\&.
.SS "int translateParticle::make (\fBsimSystem\fP &sys)\fC [virtual]\fP"

.PP
Translate a particle in the system\&. All other information is stored in the \fBsimSystem\fP object\&.
.PP
\fBParameters:\fP
.RS 4
\fIsys\fP System object to attempt to remove a particle from\&.
.RE
.PP
\fBReturns:\fP
.RS 4
MOVE_SUCCESS if translated a particle, otherwise MOVE_FAILURE if did not\&. Will throw exceptions if there was an error\&. 
.RE
.PP

.PP
Implements \fBmcMove\fP\&.
.PP
Definition at line 10 of file translate\&.cpp\&.
.PP
References simSystem::atoms, simSystem::beta(), simSystem::box(), calculateBias(), simSystem::getCurrentM(), simSystem::getFractionalAtom(), simSystem::getFractionalAtomType(), simSystem::getNeighborAtoms(), simSystem::getTotN(), simSystem::getWALABias(), simSystem::incrementEnergy(), MOVE_FAILURE, MOVE_SUCCESS, simSystem::nSpecies(), NUM_INFINITY, simSystem::numSpecies, simSystem::ppot, rng(), RNG_SEED, simSystem::speciesBarriers, simSystem::tmmcBias, simSystem::translateAtom(), mcMove::typeIndex_, wala::update(), tmmc::updateC(), simSystem::useTMMC, simSystem::useWALA, and customException::what()\&.
.PP
.nf
10                                            {
11     bool earlyReject = false;
12 
13     // Check if any exist to be translated
14     if (sys\&.getFractionalAtomType() == typeIndex_) {
15         if (sys\&.numSpecies[typeIndex_] == 0 && sys\&.getCurrentM() == 0) {
16             earlyReject = true;
17         }
18     } else {
19         if (sys\&.numSpecies[typeIndex_] == 0) {
20             earlyReject = true;
21         }
22     }
23 
24     // Updates to biasing functions must be done even if at bounds
25     if (earlyReject) {
26         if (sys\&.useWALA) {
27             sys\&.getWALABias()->update(sys\&.getTotN(), sys\&.getCurrentM());
28         }
29         if (sys\&.useTMMC) {
30             sys\&.tmmcBias->updateC (sys\&.getTotN(), sys\&.getTotN(), sys\&.getCurrentM(), sys\&.getCurrentM(), 0\&.0);
31         }
32         return MOVE_FAILURE;
33     }
34 
35     // Choose a random particle of that type
36     int chosenAtom = 0;
37     if (sys\&.getCurrentM() > 0 && sys\&.getFractionalAtomType() == typeIndex_) {
38         // We are moving a species that has a partially inserted atom, so account for that in the choice
39         chosenAtom = (int) floor(rng (&RNG_SEED) * (sys\&.numSpecies[typeIndex_]+1));
40     } else {
41         // All atoms of this type are fully inserted
42         chosenAtom = (int) floor(rng (&RNG_SEED) * sys\&.numSpecies[typeIndex_]);
43     }
44 
45     // Attempt to translate that one
46     const std::vector < double > box = sys\&.box();
47     double V = 1\&.0;
48     for (unsigned int i = 0; i < box\&.size(); ++i) {
49         V *= box[i];
50     }
51 
52     double oldEnergy = 0\&.0;
53     for (unsigned int spec = 0; spec < sys\&.nSpecies(); ++spec) {
54         // Get positions of neighboring atoms around chosenAtom
55         std::vector < atom* > neighborAtoms = sys\&.getNeighborAtoms(spec, typeIndex_, &sys\&.atoms[typeIndex_][chosenAtom]);
56         for (unsigned int i = 0; i < neighborAtoms\&.size(); ++i) {
57             try {
58                 oldEnergy += sys\&.ppot[spec][typeIndex_]->energy(neighborAtoms[i], &sys\&.atoms[typeIndex_][chosenAtom], box);
59             } catch (customException& ce) {
60                 std::string a = "Cannot translate because of energy error: ", b = ce\&.what();
61                 throw customException (a+b);
62             }
63         }
64 
65         // Add tail correction to potential energy
66 #ifdef FLUID_PHASE_SIMULATIONS
67         if (sys\&.ppot[spec][typeIndex_]->useTailCorrection) {
68             if (!(sys\&.getCurrentM() > 0 && sys\&.getFractionalAtom () == &sys\&.atoms[typeIndex_][chosenAtom])) {
69                 // Then chosenAtom is not a partially inserted particle and tail interactions must be included
70                 if (spec == typeIndex_) {
71                     if (sys\&.numSpecies[spec]-1 > 0) {
72                         oldEnergy += sys\&.ppot[spec][typeIndex_]->tailCorrection((sys\&.numSpecies[spec]-1)/V);
73                     }
74                 } else {
75                     if (sys\&.numSpecies[spec] > 0) {
76                         oldEnergy += sys\&.ppot[spec][typeIndex_]->tailCorrection(sys\&.numSpecies[spec]/V);
77                     }
78                 }
79             }
80         }
81 #endif
82     }
83 
84     // Account for wall or barrier interactions
85     oldEnergy += sys\&.speciesBarriers[typeIndex_]\&.energy(&sys\&.atoms[typeIndex_][chosenAtom], box);
86 
87     // Store old position and move particle along random direction in interval [-maxD_:maxD_]
88     std::vector<double> oldPos = sys\&.atoms[typeIndex_][chosenAtom]\&.pos;
89     for (unsigned int i = 0; i< sys\&.atoms[typeIndex_][chosenAtom]\&.pos\&.size(); ++i) {
90         sys\&.atoms[typeIndex_][chosenAtom]\&.pos[i] += 2\&.0*maxD_*(0\&.5-rng (&RNG_SEED));
91 
92         // Apply periodic boundary conditions
93         if (sys\&.atoms[typeIndex_][chosenAtom]\&.pos[i] >= box[i]) {
94             sys\&.atoms[typeIndex_][chosenAtom]\&.pos[i] -= box[i];
95         } else if (sys\&.atoms[typeIndex_][chosenAtom]\&.pos[i] < 0) {
96             sys\&.atoms[typeIndex_][chosenAtom]\&.pos[i] += box[i];
97         }
98     }
99 
100     // Calculate energy at new position
101     double newEnergy = 0\&.0;
102     double dU = 0\&.0;
103 
104     // Account for wall or barrier interactions first to be more efficient
105     dU = sys\&.speciesBarriers[typeIndex_]\&.energy(&sys\&.atoms[typeIndex_][chosenAtom], box);
106     if (dU < NUM_INFINITY) {
107         newEnergy += dU;
108     } else {
109         newEnergy = NUM_INFINITY;
110     }
111 
112     if (newEnergy < NUM_INFINITY) {
113         for (unsigned int spec = 0; spec < sys\&.nSpecies(); ++spec) {
114             // Get positions of neighboring atoms around chosenAtom
115             std::vector< atom* > neighborAtoms = sys\&.getNeighborAtoms(spec, typeIndex_, &sys\&.atoms[typeIndex_][chosenAtom]);
116             for (unsigned int i = 0; i < neighborAtoms\&.size(); ++i) {
117                 try {
118                     dU = sys\&.ppot[spec][typeIndex_]->energy(neighborAtoms[i], &sys\&.atoms[typeIndex_][chosenAtom], box);
119                 } catch (customException& ce) {
120                     std::string a = "Cannot delete because of energy error: ", b = ce\&.what();
121                     throw customException (a+b);
122                 }
123                 if (dU < NUM_INFINITY) {
124                     newEnergy += dU;
125                 } else {
126                     newEnergy = NUM_INFINITY;
127                     break;
128                 }
129             }
130             if (newEnergy == NUM_INFINITY) break; // Don't add anything if "infinite" already
131 
132             // Add tail correction to potential energy
133     #ifdef FLUID_PHASE_SIMULATIONS
134             if (sys\&.ppot[spec][typeIndex_]->useTailCorrection) {
135                 if (!(sys\&.getCurrentM() > 0 && sys\&.getFractionalAtom () == &sys\&.atoms[typeIndex_][chosenAtom])) {
136                     // Then chosenAtom is not a partially inserted particle and tail interactions must be included
137                     if (spec == typeIndex_) {
138                         if (sys\&.numSpecies[spec]-1 > 0) {
139                             newEnergy += sys\&.ppot[spec][typeIndex_]->tailCorrection((sys\&.numSpecies[spec]-1)/V); // Never infinite
140                         }
141                     } else {
142                         if (sys\&.numSpecies[spec] > 0) {
143                             newEnergy += sys\&.ppot[spec][typeIndex_]->tailCorrection(sys\&.numSpecies[spec]/V); // Never infinite
144                         }
145                     }
146                 }
147             }
148     #endif
149         }
150     }
151 
152     // Biasing
153     double p_u = 0\&.0;
154     if (newEnergy < NUM_INFINITY) {
155         p_u = exp(-sys\&.beta()*(newEnergy - oldEnergy));
156     }
157     double bias = calculateBias(sys, sys\&.getTotN(), sys\&.getCurrentM()); // N_tot doesn't change throughout this move
158 
159     // TMMC gets updated the same way, regardless of whether the move gets accepted
160     if (sys\&.useTMMC) {
161         sys\&.tmmcBias->updateC (sys\&.getTotN(), sys\&.getTotN(), sys\&.getCurrentM(), sys\&.getCurrentM(), std::min(1\&.0, p_u)); // Since the total number of atoms isn't changing, can use getTotN() as both initial and final states
162     }
163 
164     if (rng (&RNG_SEED) < p_u*bias) {
165         try {
166             sys\&.translateAtom(typeIndex_, chosenAtom, oldPos);
167         } catch (customException &ce) {
168             std::string a = "Failed to translate atom: ", b = ce\&.what();
169             throw customException (a+b);
170         }
171         sys\&.incrementEnergy(newEnergy - oldEnergy);
172 
173         // Update Wang-Landau bias, if used
174         if (sys\&.useWALA) {
175             sys\&.getWALABias()->update(sys\&.getTotN(), sys\&.getCurrentM());
176         }
177         return MOVE_SUCCESS;
178     }
179 
180     // If move failed, reset position
181     for (unsigned int i = 0; i < sys\&.atoms[typeIndex_][chosenAtom]\&.pos\&.size(); ++i) {
182         sys\&.atoms[typeIndex_][chosenAtom]\&.pos[i] = oldPos[i];
183     }
184 
185     // Update Wang-Landau bias (even if moved failed), if used
186     if (sys\&.useWALA) {
187         sys\&.getWALABias()->update(sys\&.getTotN(), sys\&.getCurrentM());
188     }
189     return MOVE_FAILURE;
190 }
.fi
.SS "void translateParticle::setMaxTranslation (const doublemaxD, const std::vector< double > &box)"

.PP
Set the maximum translation in any single move\&. Should be postive number lss than half the box size\&.
.PP
\fBParameters:\fP
.RS 4
\fImaxD\fP Maximium translation 
.br
\fIbox\fP Box dimensions 
.RE
.PP

.PP
Definition at line 198 of file translate\&.cpp\&.
.PP
.nf
198                                                                                              {
199     for (unsigned int i = 0; i < box\&.size(); ++i) {
200         if (maxD >= box[i]/2\&.) {
201             throw customException ("Max translation too large");
202         }
203     }
204     if (maxD > 0) {
205         maxD_ = maxD;
206     } else {
207         throw customException ("Max translation must be positive");
208     }
209 }
.fi


.SH "Author"
.PP 
Generated automatically by Doxygen for Flat-Histogram Monte Carlo Simulation from the source code\&.
