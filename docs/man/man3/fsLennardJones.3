.TH "fsLennardJones" 3 "Fri Dec 30 2016" "Version v0.1.0" "Flat-Histogram Monte Carlo Simulation" \" -*- nroff -*-
.ad l
.nh
.SH NAME
fsLennardJones \- 
.PP
Force-Shifted Lennard-Jones Potential Parameters should be specified in the following order: { epsilon, sigma, r_cut, Mtot }\&.  

.SH SYNOPSIS
.br
.PP
.PP
\fC#include <potentials\&.h>\fP
.PP
Inherits \fBpairPotential\fP\&.
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fB~fsLennardJones\fP ()"
.br
.ti -1c
.RI "void \fBsetParameters\fP (const std::vector< double > params)"
.br
.RI "\fISet the parameters in the Force-Shift Lennard-Jones equation\&. \fP"
.ti -1c
.RI "double \fBenergy\fP (const \fBatom\fP *a1, const \fBatom\fP *a2, const std::vector< double > &box)"
.br
.RI "\fIReturn the energy of two particles\&. \fP"
.ti -1c
.RI "double \fBtailCorrection\fP (const double rhoBath)"
.br
.RI "\fITail correction for Force-Shifted Lennard-Jones is, by definition, zero always\&. \fP"
.ti -1c
.RI "double \fBrcut\fP ()"
.br
.RI "\fIReturn the value of r_{cut} for this potential\&. \fP"
.in -1c
.SS "Additional Inherited Members"
.SH "Detailed Description"
.PP 
Force-Shifted Lennard-Jones Potential Parameters should be specified in the following order: { epsilon, sigma, r_cut, Mtot }\&. 
.PP
Definition at line 60 of file potentials\&.h\&.
.SH "Constructor & Destructor Documentation"
.PP 
.SS "fsLennardJones::~fsLennardJones ()\fC [inline]\fP"

.PP
Definition at line 62 of file potentials\&.h\&.
.PP
.nf
62 {;}
.fi
.SH "Member Function Documentation"
.PP 
.SS "double fsLennardJones::energy (const \fBatom\fP *a1, const \fBatom\fP *a2, const std::vector< double > &box)\fC [virtual]\fP"

.PP
Return the energy of two particles\&. \[ U(r) = U_{LJ}(r) - \frac{\del U_{LJ}(r_{cut})}{\del r}(r - r_{cut}) - U_{LJ}(r_{cut}) \quad r < r_{cut} \]
.PP
\fBParameters:\fP
.RS 4
\fIa1\fP Atom 1 
.br
\fIa2\fP Atom 2 
.br
\fIbox\fP Simulation box dimensions
.RE
.PP
\fBReturns:\fP
.RS 4
U(r) 
.RE
.PP

.PP
Implements \fBpairPotential\fP\&.
.PP
Definition at line 101 of file potentials\&.cpp\&.
.PP
References atom::mState, pairPotential::params_, pairPotential::paramsAreSet_, pbcDist2(), and atom::pos\&.
.PP
.nf
101                                                                                               {
102     if (!paramsAreSet_) {
103         throw customException ("For fsLennardJones parameters not set");
104     }
105 
106     const double r_sq = pbcDist2(a1->pos, a2->pos, box);
107 
108     // only one of these atoms (at most) should be "partially" inserted
109     int mState = 0;
110     if (a1->mState != 0) {
111         mState = a1->mState;
112     }
113     if (a2->mState != 0) {
114         mState = a2->mState;
115     }
116 
117     const double r2 = (sigmaM_[mState]*sigmaM_[mState]/r_sq), r6 = r2*r2*r2, r12 = r6*r6;
118     const double r2c = (sigmaM_[mState]*sigmaM_[mState]/(params_[2]*params_[2])), r6c = r2c*r2c*r2c, r12c = r6c*r6c;
119     if (r_sq < params_[2]*params_[2]) {
120         return 4\&.0*epsM_[mState]*(r12 - r6) - 4\&.0*epsM_[mState]*(r12c - r6c) - (sqrt(r_sq) - params_[2])*(-24\&.0*epsM_[mState]/params_[2]*(2\&.0*r12c - r6c));
121     } else {
122         return 0\&.0;
123     }
124 }
.fi
.SS "double fsLennardJones::rcut ()\fC [virtual]\fP"

.PP
Return the value of r_{cut} for this potential\&. 
.PP
\fBReturns:\fP
.RS 4
rcut 
.RE
.PP

.PP
Implements \fBpairPotential\fP\&.
.PP
Definition at line 142 of file potentials\&.cpp\&.
.PP
References pairPotential::params_, and pairPotential::paramsAreSet_\&.
.PP
.nf
142                              {
143     if (!paramsAreSet_) {
144         throw customException ("For fsLennardJones parameters not set");
145     } else {
146         return params_[2];
147     }
148 }
.fi
.SS "void fsLennardJones::setParameters (const std::vector< double >params)\fC [virtual]\fP"

.PP
Set the parameters in the Force-Shift Lennard-Jones equation\&. 
.PP
\fBParameters:\fP
.RS 4
\fIparams\fP Vector of inputs: {epsilon, sigma, r_cut, Mtot} 
.RE
.PP

.PP
Implements \fBpairPotential\fP\&.
.PP
Definition at line 37 of file potentials\&.cpp\&.
.PP
References pairPotential::params_, pairPotential::paramsAreSet_, and pairPotential::useTailCorrection\&.
.PP
.nf
37                                                                      {
38     if (params\&.size() != 4) {
39         throw customException ("For fsLennardJones must specify 4 parameters: epsilon, sigma, r_cut, Mtot");
40     } else {
41         if (params[0] < 0) {
42             throw customException ("For fsLennardJones, epsilon >= 0");
43         }
44         if (params[1] < 0) {
45             throw customException ("For fsLennardJones, sigma >= 0");
46         }
47         if (params[2] < 0) {
48             throw customException ("For fsLennardJones, r_cut >= 0");
49         }
50         if (int(params[3]) < 1) {
51             throw customException ("For fsLennardJones, total expanded ensemble states, Mtot >= 1");
52         }
53 
54         paramsAreSet_ = true;
55         params_ = params;
56 
57         useTailCorrection = false;
58 
59         // use a "constant volume" scheme to distribute the stages
60         sigmaM_\&.resize(int(params[3]), 0);
61         for (int i = 0; i < sigmaM_\&.size(); ++i) {
62             if (i == 0) {
63                 // fully inserted
64                 sigmaM_[i] = params[1];
65             } else {
66                 // use volume scaling so each stage is separated from its neighbors by the same dV
67                 double lastSigma = 0;
68                 if (i == 1) {
69                     lastSigma = 0;
70                 } else {
71                     lastSigma = sigmaM_[i-1];
72                 }
73                 sigmaM_[i] = pow(params[1]*params[1]*params[1]/(8\&.0*int(params[3])) + lastSigma*lastSigma*lastSigma, 1\&./3\&.);
74             }
75         }
76 
77         // scale energy linearly across the stages
78         epsM_\&.resize(int(params[3]), 0);
79         for (int i = 0; i < epsM_\&.size(); ++i) {
80             if (i == 0) {
81                 // fully inserted
82                 epsM_[i] = params[0];
83             } else {
84                 epsM_[i] = i*(params[0]/int(params[3]));
85             }
86         }
87     }
88 }
.fi
.SS "double fsLennardJones::tailCorrection (const doublerhoBath)\fC [virtual]\fP"

.PP
Tail correction for Force-Shifted Lennard-Jones is, by definition, zero always\&. 
.PP
\fBParameters:\fP
.RS 4
\fIrhoBath\fP Number density of the surrounding fluid
.RE
.PP
\fBReturns:\fP
.RS 4
U_tail 
.RE
.PP

.PP
Implements \fBpairPotential\fP\&.
.PP
Definition at line 133 of file potentials\&.cpp\&.
.PP
.nf
133                                                           {
134     return 0\&.0;
135 }
.fi


.SH "Author"
.PP 
Generated automatically by Doxygen for Flat-Histogram Monte Carlo Simulation from the source code\&.
