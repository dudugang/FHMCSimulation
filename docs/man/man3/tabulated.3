.TH "tabulated" 3 "Wed Jan 4 2017" "Version v0.1.0" "Flat-Histogram Monte Carlo Simulation" \" -*- nroff -*-
.ad l
.nh
.SH NAME
tabulated \- 
.PP
Tabulated Potential Parameters should be specified in the following order: { r_cut, r_shift, u_shift, u_infinity, Mtot }\&.  

.SH SYNOPSIS
.br
.PP
.PP
\fC#include <potentials\&.h>\fP
.PP
Inherits \fBpairPotential\fP\&.
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fB~tabulated\fP ()"
.br
.ti -1c
.RI "void \fBsetParameters\fP (const std::vector< double > params)"
.br
.RI "\fISet the parameters in the tabulated potential\&. \fP"
.ti -1c
.RI "void \fBloadPotential\fP (std::string filename)"
.br
.RI "\fILoad a tabulated potential from an external file and store it internally\&. \fP"
.ti -1c
.RI "double \fBenergy\fP (const \fBatom\fP *a1, const \fBatom\fP *a2, const std::vector< double > &box)"
.br
.RI "\fIReturn the energy of two particles\&. \fP"
.ti -1c
.RI "double \fBtailCorrection\fP (const double rhoBath)"
.br
.RI "\fITail correction for a tabulated potential always returns 0 since no information about what the potential is after its cutoff radius\&. \fP"
.ti -1c
.RI "double \fBrcut\fP ()"
.br
.RI "\fIReturn the value of r_{cut} for this potential\&. \fP"
.in -1c
.SS "Additional Inherited Members"
.SH "Detailed Description"
.PP 
Tabulated Potential Parameters should be specified in the following order: { r_cut, r_shift, u_shift, u_infinity, Mtot }\&. 
.PP
Definition at line 77 of file potentials\&.h\&.
.SH "Constructor & Destructor Documentation"
.PP 
.SS "tabulated::~tabulated ()\fC [inline]\fP"

.PP
Definition at line 79 of file potentials\&.h\&.
.PP
.nf
79 {;}
.fi
.SH "Member Function Documentation"
.PP 
.SS "double tabulated::energy (const \fBatom\fP *a1, const \fBatom\fP *a2, const std::vector< double > &box)\fC [virtual]\fP"

.PP
Return the energy of two particles\&. Use linear interpolation to calculate energy from tabulated values
.PP
\fBParameters:\fP
.RS 4
\fIa1\fP Atom 1 
.br
\fIa2\fP Atom 2 
.br
\fIbox\fP Simulation box dimensions
.RE
.PP
\fBReturns:\fP
.RS 4
U(r) 
.RE
.PP

.PP
Implements \fBpairPotential\fP\&.
.PP
Definition at line 381 of file potentials\&.cpp\&.
.PP
References atom::mState, numToStr(), pairPotential::params_, pairPotential::paramsAreSet_, pbcDist2(), atom::pos, and sendErr()\&.
.PP
.nf
381                                                                                          {
382     if (!paramsAreSet_) {
383         throw customException ("For tabulated parameters not set");
384     }
385 
386     const double r = sqrt(pbcDist2(a1->pos, a2->pos, box));
387     double en = 0\&.0;
388 
389     // only one of these atoms (at most) should be "partially" inserted
390     int mState = 0;
391     if (a1->mState != 0) {
392         mState = a1->mState;
393     }
394     if (a2->mState != 0) {
395         mState = a2->mState;
396     }
397 
398     if (r < params_[1]) {
399         sendErr("Distance r too small in energy calculation in tabulated potential\&. Returning value at r = "+numToStr(start));
400         en = table[0];
401     } else if (r > params_[0]) {
402         en = params_[3];
403     } else {
404         const unsigned int lowerIndex = floor((r-params_[1])/dr);
405         const unsigned int upperIndex = ceil((r-params_[1])/dr);
406         const double upperFraction = (r-params_[1])/dr-lowerIndex;
407         const double lowerFraction = 1\&.0-upperFraction;
408         en = (lowerFraction*table[lowerIndex] + upperFraction*table[upperIndex] + params_[2])*mScale[mState];
409     }
410 
411     return en;
412 }
.fi
.SS "void tabulated::loadPotential (std::stringfilename)"

.PP
Load a tabulated potential from an external file and store it internally\&. 
.PP
\fBParameters:\fP
.RS 4
\fIfilename\fP Name of ASCII file to read (r, U(r)) from 
.RE
.PP

.PP
Definition at line 324 of file potentials\&.cpp\&.
.PP
References fileExists(), numToStr(), pairPotential::params_, pairPotential::paramsAreSet_, and sendMsg()\&.
.PP
.nf
324                                                 {
325     sendMsg("Loading pair potential from "+filename);
326 
327     // first check, if file exists
328     if (fileExists(filename)) {
329         sendMsg("File found, processing");
330         table\&.clear();
331         double r, pot;
332         unsigned int lineCounter = 0;
333 
334         std::ifstream inputData(filename\&.c_str());
335         while (inputData >> r >> pot) {
336             if (lineCounter == 0) {
337                 start = r;
338             }
339             else if (lineCounter == 1) {
340                 dr = r - start;
341             }
342 
343             table\&.push_back(pot);
344             lineCounter++;
345         }
346         inputData\&.close();
347 
348         if (lineCounter < 2) {
349             paramsAreSet_ = false;
350             throw customException ("Tabulated potential "+numToStr(filename)+" needs at least 2 entries, cannot setup potential");
351             /*sendErr("Tabulated potential "+numToStr(filename)+" needs at least 2 entries, cannot setup potential");
352             return;*/
353         }
354 
355         // If parameters are not set, set default parameters
356         if (!paramsAreSet_) {
357             params_\&.assign(4, 0\&.0);
358             params_[0] = start + (table\&.size()-1)*dr;
359             params_[1] = start;
360             params_[2] = 0\&.0;
361             params_[3] = 0\&.0;
362             paramsAreSet_ = true;
363         }
364     } else {
365         throw customException ("File "+numToStr(filename)+" not found, cannot setup potential");
366         /*sendErr("File "+numToStr(filename)+" not found, cannot setup potential");
367         paramsAreSet_ = false;*/
368     }
369 }
.fi
.SS "double tabulated::rcut ()\fC [virtual]\fP"

.PP
Return the value of r_{cut} for this potential\&. 
.PP
\fBReturns:\fP
.RS 4
rcut 
.RE
.PP

.PP
Implements \fBpairPotential\fP\&.
.PP
Definition at line 430 of file potentials\&.cpp\&.
.PP
References pairPotential::params_, and pairPotential::paramsAreSet_\&.
.PP
.nf
430                         {
431     if (!paramsAreSet_) {
432         throw customException ("For tabulated parameters not set");
433     } else {
434         return params_[0];
435     }
436 }
.fi
.SS "void tabulated::setParameters (const std::vector< double >params)\fC [virtual]\fP"

.PP
Set the parameters in the tabulated potential\&. 
.PP
\fBParameters:\fP
.RS 4
\fIparams\fP Vector of inputs: {r_cut, r_shift, u_shift, u_infinity, Mtot} 
.RE
.PP

.PP
Implements \fBpairPotential\fP\&.
.PP
Definition at line 291 of file potentials\&.cpp\&.
.PP
References pairPotential::params_, pairPotential::paramsAreSet_, and pairPotential::useTailCorrection\&.
.PP
.nf
291                                                                 {
292     if (params\&.size() != 5) {
293         throw customException ("For tabulated must specify 5 parameters: r_cut, r_shift, u_shift, u_infinity, Mtot");
294     } else {
295         if (params[0] < 0) {
296             throw customException ("For tabulated, r_cut >= 0");
297         }
298         if (int(params[4]) < 1) {
299             throw customException ("For tabulated, total expanded ensemble states, Mtot >= 1");
300         }
301 
302         paramsAreSet_ = true;
303         params_ = params;
304 
305         useTailCorrection = false;
306 
307         // scale energy by a constant factor
308         mScale\&.resize(int(params[4]), 0);
309         for (int i = 0; i < mScale\&.size(); ++i) {
310             if (i == 0) {
311                 mScale[i] = 1\&.0;
312             } else {
313                 mScale[i] = 1\&.0/int(params[4])*i;
314             }
315         }
316     }
317 }
.fi
.SS "double tabulated::tailCorrection (const doublerhoBath)\fC [virtual]\fP"

.PP
Tail correction for a tabulated potential always returns 0 since no information about what the potential is after its cutoff radius\&. 
.PP
\fBParameters:\fP
.RS 4
\fINumber\fP density of the surrounding fluid
.RE
.PP
\fBReturns:\fP
.RS 4
U_tail 
.RE
.PP

.PP
Implements \fBpairPotential\fP\&.
.PP
Definition at line 421 of file potentials\&.cpp\&.
.PP
.nf
421                                                      {
422     return 0\&.0;
423 }
.fi


.SH "Author"
.PP 
Generated automatically by Doxygen for Flat-Histogram Monte Carlo Simulation from the source code\&.
