.TH "/home/nam4/Desktop/sandbox/FHMCSimulation/src/input.cpp" 3 "Wed Jan 4 2017" "Version v0.1.0" "Flat-Histogram Monte Carlo Simulation" \" -*- nroff -*-
.ad l
.nh
.SH NAME
/home/nam4/Desktop/sandbox/FHMCSimulation/src/input.cpp \- 
.SH SYNOPSIS
.br
.PP
\fC#include 'input\&.h'\fP
.br

.SS "Functions"

.in +1c
.ti -1c
.RI "void \fBcheckBounds\fP (\fBsimSystem\fP &sys)"
.br
.RI "\fICheck the following bounds on system\&. \fP"
.ti -1c
.RI "\fBsimSystem\fP \fBinitialize\fP (const std::string filename, \fBmoves\fP *usedMovesEq, \fBmoves\fP *usedMovesPr)"
.br
.RI "\fIParse a json input file and initialize system object accordingly\&. \fP"
.ti -1c
.RI "void \fBsetMoves\fP (\fBsimSystem\fP &sys, const rapidjson::Document &doc, \fBmoves\fP *usedMovesEq, \fBmoves\fP *usedMovesPr)"
.br
.RI "\fIAssign the Monte Carlo moves based on the JSON input file\&. \fP"
.ti -1c
.RI "void \fBsetPairPotentials\fP (\fBsimSystem\fP &sys, const rapidjson::Document &doc)"
.br
.RI "\fIAssign the pair potentials based on the JSON input file\&. \fP"
.ti -1c
.RI "void \fBsetConfig\fP (\fBsimSystem\fP &sys, const std::string filename)"
.br
.RI "\fISetup a system's initial configuration as necessary\&. \fP"
.ti -1c
.RI "void \fBsetBarriers\fP (\fBsimSystem\fP &sys, const rapidjson::Document &doc)"
.br
.RI "\fIInitialize the barriers in a system by parsing the input document\&. \fP"
.in -1c
.SH "Function Documentation"
.PP 
.SS "void checkBounds (\fBsimSystem\fP &sys)"

.PP
Check the following bounds on system\&. If any fail, an emergency exit is performed\&.
.IP "1." 4
Check all pair potentials are set\&.
.IP "2." 4
Check that rcut < L/2 for all potentials
.PP
.PP
\fBParameters:\fP
.RS 4
\fIsys\fP System to check bounds on 
.RE
.PP

.PP
Definition at line 10 of file input\&.cpp\&.
.PP
References simSystem::box(), simSystem::nSpecies(), numToStr(), simSystem::potentialIsSet(), simSystem::ppot, sendErr(), and SYS_FAILURE\&.
.PP
Referenced by initialize()\&.
.PP
.nf
10                                   {
11     // check all pair potentials have been set and all r_cut < L/2
12     double minL = sys\&.box()[0];
13     for (unsigned int i = 1; i < 3; ++i) {
14         minL = std::min(minL, sys\&.box()[i]);
15     }
16     for (unsigned int i = 0; i < sys\&.nSpecies(); ++i) {
17         for (unsigned int j = 0; j < sys\&.nSpecies(); ++j) {
18             if (!sys\&.potentialIsSet(i, j)) {
19                 sendErr("Not all pair potentials are set");
20                 exit(SYS_FAILURE);
21             }
22             if (!(sys\&.ppot[i][j]->rcut() < minL/2\&.0)) {
23                 sendErr("Pair potential r_cut for species "+numToStr(i)+", "+numToStr(j)+" is > L/2");
24                 exit(SYS_FAILURE);
25             }
26         }
27     }
28 }
.fi
.SS "\fBsimSystem\fP initialize (const std::stringfilename, \fBmoves\fP *usedMovesEq, \fBmoves\fP *usedMovesPr)"

.PP
Parse a json input file and initialize system object accordingly\&. [in] filename Input JSON document's filename  [in] usedMovesEq Pointer to move object that will be used during 'equilibration' (WL)  [in] usedMovesPr Pointer to move object that will be used during 'production' (TMMC) 
.PP
Definition at line 37 of file input\&.cpp\&.
.PP
References simSystem::addKECorrection(), checkBounds(), simSystem::gcmcEqSteps, simSystem::gcmcPrSteps, simSystem::gcmcSnapFreq, simSystem::gcmcThermoFreq, simSystem::lnF_end, simSystem::lnF_start, simSystem::nCrossoverVisits, numToStr(), parseJson(), simSystem::restartFromTMMC, simSystem::restartFromTMMCFile, simSystem::restartFromWALA, simSystem::restartFromWALAFile, RNG_SEED, sendErr(), sendMsg(), setBarriers(), setMoves(), setPairPotentials(), simSystem::setTotNBounds(), SYS_FAILURE, simSystem::tmmcSweepSize, simSystem::toggleKE(), simSystem::totalTMMCSweeps, simSystem::wala_g, simSystem::wala_s, and simSystem::wlSweepSize\&.
.PP
.nf
37                                                                                         {
38     rapidjson::Document doc;
39     try {
40         parseJson (filename, doc);
41     } catch (std::exception &ex) {
42         throw customException (ex\&.what());
43     }
44 
45     // Check each member exists and is in the correct format
46     if (!doc\&.HasMember("num_species")) throw customException("\"num_species\" is not specified in "+filename);
47     if (!doc["num_species"]\&.IsInt()) throw customException("\"num_species\" is not an integer in "+filename);
48 
49     if (!doc\&.HasMember("beta")) throw customException("\"beta\" is not specified in "+filename);
50     if (!doc["beta"]\&.IsNumber()) throw customException("\"beta\" is not a number in "+filename);
51 
52     if (!doc\&.HasMember("box")) throw customException("\"box\" is not specified in "+filename);
53     if (!doc["box"]\&.IsArray()) throw customException("\"box\" is not an array in "+filename);
54     if (doc["box"]\&.Size() != 3) throw customException("\"box\" is not a length 3 array in "+filename);
55     std::vector < double > sysBox (3, 0);
56     for (rapidjson::SizeType i = 0; i < doc["box"]\&.Size(); ++i) {
57         if (!doc["box"][i]\&.IsNumber()) throw customException("box index "+numToStr(i)+" is not a number in "+filename);
58         sysBox[i] = doc["box"][i]\&.GetDouble();
59     }
60 
61     double duh = 10\&.0; // Default
62     if (doc\&.HasMember("delta_u_hist")) {
63         if (!doc["delta_u_hist"]\&.IsNumber()) throw customException("\"delta_u_hist\" is not a number in "+filename);
64         duh = doc["delta_u_hist"]\&.GetDouble();
65     }
66 
67     int maxOrder = 2; // Default
68     if (doc\&.HasMember("max_order")) {
69         if (!doc["max_order"]\&.IsInt()) throw customException("\"max_order\" is not an integer in "+filename);
70         maxOrder = doc["max_order"]\&.GetInt();
71     }
72 
73     bool useKe = false; // Default
74     if (doc\&.HasMember("use_ke")) {
75         if (!doc["use_ke"]\&.IsBool()) throw customException("\"use_ke\" is not a boolean in "+filename);
76         useKe = doc["use_ke"]\&.GetBool();
77     }
78 
79     if (!doc\&.HasMember("mu")) throw customException("\"mu\" is not specified in "+filename);
80     if (!doc["mu"]\&.IsArray()) throw customException("\"mu\" is not an array in "+filename);
81     if (doc["mu"]\&.Size() != doc["num_species"]\&.GetInt()) throw customException("\"mu\" is not specified for each species in "+filename);
82     std::vector < double > sysMu (doc["mu"]\&.Size(), 0);
83     for (rapidjson::SizeType i = 0; i < doc["mu"]\&.Size(); ++i) {
84         if (!doc["mu"][i]\&.IsNumber()) throw customException("\"mu\" for species "+numToStr(i+1)+" is not a number in "+filename);
85         sysMu[i] = doc["mu"][i]\&.GetDouble();
86     }
87 
88     RNG_SEED = -10; // Default
89     if (doc\&.HasMember("seed")) {
90         if (!doc["seed"]\&.IsInt()) throw customException("\"seed\" is not an integer in "+filename);
91         RNG_SEED = doc["seed"]\&.GetInt();
92     }
93 
94     if (!doc\&.HasMember("max_N")) throw customException("\"max_N\" is not specified in "+filename);
95     if (!doc["max_N"]\&.IsArray()) throw customException("\"max_N\" is not an array in "+filename);
96     if (doc["max_N"]\&.Size() != doc["num_species"]\&.GetInt()) throw customException("\"max_N\" is not specified for each species in "+filename);
97     std::vector < int > sysMax (doc["max_N"]\&.Size(), 0);
98     for (rapidjson::SizeType i = 0; i < doc["max_N"]\&.Size(); ++i) {
99         if (!doc["max_N"][i]\&.IsInt()) throw customException("\"max_N\" of species "+numToStr(i+1)+" is not an integer in "+filename);
100         sysMax[i] = doc["max_N"][i]\&.GetInt();
101     }
102 
103     if (!doc\&.HasMember("min_N")) throw customException("\"min_N\" is not specified in "+filename);
104     if (!doc["min_N"]\&.IsArray()) throw customException("\"min_N\" is not an array in "+filename);
105     if (doc["min_N"]\&.Size() != doc["num_species"]\&.GetInt()) throw customException("\"min_N\" is not specified for each species in "+filename);
106     std::vector < int > sysMin (doc["min_N"]\&.Size(), 0);
107     for (rapidjson::SizeType i = 0; i < doc["min_N"]\&.Size(); ++i) {
108         if (!doc["min_N"][i]\&.IsInt()) throw customException("\"min_N\" of species "+numToStr(i+1)+" is not an integer in "+filename);
109         sysMin[i] = doc["min_N"][i]\&.GetInt();
110     }
111 
112     int Mtot = 1; // Default
113     if (doc\&.HasMember("num_expanded_states")) {
114         if (!doc["num_expanded_states"]\&.IsInt()) throw customException("\"num_expanded_states\" is not an integer in "+filename);
115         Mtot = doc["num_expanded_states"]\&.GetInt();
116     }
117 
118     simSystem sys (doc["num_species"]\&.GetInt(), doc["beta"]\&.GetDouble(), sysBox, sysMu, sysMax, sysMin, Mtot, duh, maxOrder);
119     if (useKe) {
120         sys\&.toggleKE();
121         if (sys\&.addKECorrection() == false) throw customException ("Unable to set KE flag");
122     }
123 
124     std::vector < int > sysWindow;
125     if (doc\&.HasMember("window")) { // Window defaults to sum of individual species' min and max
126         if (!doc["window"]\&.IsArray()) throw customException("\"window\" is not an array in "+filename);
127         if (doc["window"]\&.Size() != 2) throw customException("\"window\" should have 2 entries (min,max) in "+filename);
128         sysWindow\&.resize(2, 0);
129         if (!doc["window"][0]\&.IsInt()) throw customException("\"window\" min is not an integer in "+filename);
130         if (!doc["window"][1]\&.IsInt()) throw customException("\"window\" max is not an integer in "+filename);
131         sysWindow[0] = doc["window"][0]\&.GetInt();
132         sysWindow[1] = doc["window"][1]\&.GetInt();
133     }
134     if (sysWindow\&.begin() != sysWindow\&.end()) {
135         sys\&.setTotNBounds(sysWindow);
136     }
137 
138     /* ---------- Begin exclusively WL-TMMC block ---------- */
139 
140     sys\&.tmmcSweepSize = 0; // Default
141     if (doc\&.HasMember("tmmc_sweep_size")) {
142         if (!doc["tmmc_sweep_size"]\&.IsNumber()) throw customException("\"tmmc_sweep_size\" is not a number in "+filename);
143         double tmpT = doc["tmmc_sweep_size"]\&.GetDouble(); // Possibly in scientific notation
144         if (tmpT > std::numeric_limits<long long int>::max()) throw customException ("tmmc_sweep_size exceeds maximum possible value");
145         sys\&.tmmcSweepSize = tmpT; // Convert
146     }
147 
148     sys\&.totalTMMCSweeps = 0; // Default
149     if (doc\&.HasMember("total_tmmc_sweeps")) {
150         if (!doc["total_tmmc_sweeps"]\&.IsNumber()) throw customException("\"total_tmmc_sweeps\" is not a number in "+filename);
151         double tmpS = doc["total_tmmc_sweeps"]\&.GetDouble(); // Possibly in scientific notation
152         if (tmpS > std::numeric_limits<long long int>::max()) throw customException ("total_tmmc_sweeps exceeds maximum possible value");
153         sys\&.totalTMMCSweeps = tmpS; // Convert
154     }
155 
156     sys\&.wlSweepSize = 0; // Default
157     if (doc\&.HasMember("wala_sweep_size")) {
158         if (!doc["wala_sweep_size"]\&.IsNumber()) throw customException("\"wala_sweep_size\" is not a number in "+filename);
159         double tmpW = doc["wala_sweep_size"]\&.GetDouble(); // Possibly in scientific notation
160         if (tmpW > std::numeric_limits<long long int>::max()) throw customException ("wala_sweep_size exceeds maximum possible value");
161         sys\&.wlSweepSize = tmpW; // Convert
162     }
163 
164     sys\&.wala_g = 0\&.5; // Default
165     if (doc\&.HasMember("wala_g")) {
166         if (!doc["wala_g"]\&.IsNumber()) throw customException("\"wala_g\" is not a number in "+filename);
167         sys\&.wala_g = doc["wala_g"]\&.GetDouble();
168     }
169 
170     sys\&.wala_s = 0\&.8; // Default
171     if (doc\&.HasMember("wala_s")) {
172         if (!doc["wala_s"]\&.IsNumber()) throw customException("\"wala_s\" is not a number in "+filename);
173         sys\&.wala_s = doc["wala_s"]\&.GetDouble();
174     }
175 
176     sys\&.lnF_start = 1\&.0; // Default
177     if (doc\&.HasMember("lnF_start")) {
178         if (!doc["lnF_start"]\&.IsNumber()) throw customException("\"lnF_start\" is not a number in "+filename);
179         sys\&.lnF_start = doc["lnF_start"]\&.GetDouble(); // Bounds are checked later
180     }
181 
182     sys\&.lnF_end = 1\&.0e-8; // Default
183     if (doc\&.HasMember("lnF_end")) {
184         if (!doc["lnF_end"]\&.IsNumber()) throw customException("\"lnF_end\" is not a number in "+filename);
185         sys\&.lnF_end = doc["lnF_end"]\&.GetDouble();
186         if (sys\&.lnF_end >= 1\&.0) {
187             sendErr("Terminal lnF factor for Wang-Landau must be < 1");
188             exit(SYS_FAILURE);
189         }
190         if (sys\&.lnF_end <= 0\&.0) {
191             sendErr("Terminal lnF factor for Wang-Landau must be a positive number");
192             exit(SYS_FAILURE);
193         }
194     }
195     if (sys\&.lnF_end >= sys\&.lnF_start) {
196         sendErr("lnF_end must be < lnF_start for Wang-Landau to proceed forward");
197         exit(SYS_FAILURE);
198     }
199 
200     sys\&.restartFromWALA = false;
201     sys\&.restartFromWALAFile = "";
202     if (doc\&.HasMember("restart_from_wala_lnPI")) {
203         if (!doc["restart_from_wala_lnPI"]\&.IsString()) throw customException("\"restart_from_wala_lnPI\" filename is not a string in "+filename);
204         sys\&.restartFromWALAFile = doc["restart_from_wala_lnPI"]\&.GetString();
205         if (sys\&.restartFromWALAFile != "") {
206             sys\&.restartFromWALA = true;
207         }
208     }
209 
210     // Restarting from TMMC overrides WL by skipping that portion altogether
211     sys\&.restartFromTMMC = false;
212     sys\&.restartFromTMMCFile = "";
213     if (doc\&.HasMember("restart_from_tmmc_C")) {
214         if (!doc["restart_from_tmmc_C"]\&.IsString()) throw customException("\"restart_from_tmmc_C\" filename is not a string in "+filename);
215         sys\&.restartFromTMMCFile = doc["restart_from_tmmc_C"]\&.GetString();
216         if (sys\&.restartFromTMMCFile != "") {
217             sys\&.restartFromTMMC = true;
218         }
219     }
220 
221     // Number of times the TMMC C matrix has to be traversed during the WALA --> TMMC crossover
222     sys\&.nCrossoverVisits = 0;
223     if (doc\&.HasMember("num_crossover_visits")) {
224         if (!doc["num_crossover_visits"]\&.IsNumber()) throw customException("\"num_crossover_visits\" is not a number in "+filename);
225         double tmpC = doc["num_crossover_visits"]\&.GetDouble();
226         if (tmpC > std::numeric_limits<long long int>::max()) throw customException ("num_crossover_visits exceeds maximum possible value");
227         sys\&.nCrossoverVisits = tmpC;
228         if (sys\&.nCrossoverVisits < 1) {
229             sendErr("Must allow the collection matrix to be traversed at least once in the crossover from Wang-Landau to TMMC");
230             exit(SYS_FAILURE);
231         }
232     }
233 
234     /* ---------- End exclusively WL-TMMC block ---------- */
235 
236     /* ---------- Begin exclusively GCMC block ---------- */
237 
238     sys\&.gcmcEqSteps = 0;
239     if (doc\&.HasMember("gcmc_eq_steps")) {
240         if (!doc["gcmc_eq_steps"]\&.IsNumber()) throw customException ("\"gcmc_eq_steps\" is not a number in "+filename);
241         sys\&.gcmcEqSteps = doc["gcmc_eq_steps"]\&.GetDouble();
242     }
243 
244     sys\&.gcmcPrSteps = 0;
245     if (doc\&.HasMember("gcmc_pr_steps")) {
246         if (!doc["gcmc_pr_steps"]\&.IsNumber()) throw customException ("\"gcmc_pr_steps\" is not a number in "+filename);
247         sys\&.gcmcPrSteps = doc["gcmc_pr_steps"]\&.GetDouble();
248     }
249 
250     sys\&.gcmcSnapFreq = std::max(sys\&.gcmcPrSteps/100, 1\&.0);
251     if (doc\&.HasMember("gcmc_snap_freq")) {
252         if (!doc["gcmc_snap_freq"]\&.IsNumber()) throw customException ("\"gcmc_snap_freq\" is not a number in "+filename);
253         sys\&.gcmcSnapFreq = doc["gcmc_snap_freq"]\&.GetDouble();
254     }
255 
256     sys\&.gcmcThermoFreq = std::max(sys\&.gcmcPrSteps/100, 1\&.0);
257     if (doc\&.HasMember("gcmc_thermo_freq")) {
258         if (!doc["gcmc_thermo_freq"]\&.IsNumber()) throw customException ("\"gcmc_thermo_freq\" is not a number in "+filename);
259         sys\&.gcmcThermoFreq = doc["gcmc_thermo_freq"]\&.GetDouble();
260     }
261 
262     /* ---------- End exclusively GCMC block ---------- */
263 
264     setMoves (sys, doc, usedMovesEq, usedMovesPr);
265     setPairPotentials (sys, doc);
266 
267     checkBounds (sys);
268     sendMsg("System from "+filename+" passed bounds checks");
269 
270     setBarriers (sys, doc);
271 
272     sendMsg("Successfully read valid parameters from "+filename);
273     return sys;
274 }
.fi
.SS "void setBarriers (\fBsimSystem\fP &sys, const rapidjson::Document &doc)"

.PP
Initialize the barriers in a system by parsing the input document\&. Clears any existing information and will overwrite with information from doc\&.
.PP
[in, out] sys System to initialize with barriers  [in] doc Input JSON document 
.PP
Definition at line 662 of file input\&.cpp\&.
.PP
References simSystem::box(), simSystem::getTotalM(), simSystem::nSpecies(), sendMsg(), simSystem::speciesBarriers, and customException::what()\&.
.PP
Referenced by initialize(), and setConfig()\&.
.PP
.nf
662                                                                 {
663     const int Mtot = sys\&.getTotalM();
664 
665     if (doc\&.HasMember("barriers")) {
666         // Clear any existing barriers
667         for (unsigned int i = 0; i < sys\&.nSpecies(); ++i) {
668             sys\&.speciesBarriers[i]\&.clearAll();
669         }
670 
671         // Iterate over all barriers specified for this species
672         for (rapidjson::Value::ConstMemberIterator itr = doc["barriers"]\&.MemberBegin(); itr != doc["barriers"]\&.MemberEnd(); ++itr) {
673             // Get barrier type and name
674             std::string barrName = itr->name\&.GetString();
675             if (!itr->value\&.IsObject()) throw customException ("Barrier "+barrName+" is not in a valid json document");
676             if (!itr->value\&.HasMember("type")) throw customException ("Barrier "+barrName+" does not specify a type");
677             if (!itr->value["type"]\&.IsString()) throw customException ("Barrier "+barrName+" type is not a string");
678             std::string barrType = itr->value["type"]\&.GetString();
679 
680             // Get the species this barrier interacts with
681             if (!itr->value\&.HasMember("species")) throw customException ("Barrier "+barrName+" does not specify a species to interact with");
682             if (!itr->value["species"]\&.IsInt()) throw customException ("Barrier "+barrName+" species is not an integer");
683             const int species = itr->value["species"]\&.GetInt();
684             if (species < 1 || species > sys\&.nSpecies()) throw customException ("Barrier "+barrName+" species is not valid for this system");
685 
686             // Depending on barrier type, read parameters and initialize
687             if (barrType == "hard_wall_z") {
688                 // Expects lb, ub, sigma
689                 if (!itr->value\&.HasMember("lb")) throw customException (barrName+" does not contain \"lb\" parameter");
690                 if (!itr->value\&.HasMember("ub")) throw customException (barrName+" does not contain \"ub\" parameter");
691                 if (!itr->value\&.HasMember("sigma")) throw customException (barrName+" does not contain \"sigma\" parameter");
692 
693                 if (!itr->value["lb"]\&.IsNumber()) throw customException ("\"lb\" for "+barrName+" is not a number");
694                 if (!itr->value["ub"]\&.IsNumber()) throw customException ("\"ub\" for "+barrName+" is not a number");
695                 if (!itr->value["sigma"]\&.IsNumber()) throw customException ("\"sigma\" for "+barrName+" is not a number");
696 
697                 const double lbBarr = itr->value["lb"]\&.GetDouble();
698                 const double ubBarr = itr->value["ub"]\&.GetDouble();
699                 const double sigmaBarr = itr->value["sigma"]\&.GetDouble();
700 
701                 try {
702                     sys\&.speciesBarriers[species-1]\&.addHardWallZ (lbBarr, ubBarr, sigmaBarr, Mtot);
703                 } catch (customException &ce) {
704                     const std::string msg = ce\&.what();
705                     throw customException ("Cannot initialize barrier "+barrName+" : "+msg);
706                 }
707             } else if (barrType == "square_well_wall_z") {
708                 // Expect lb, ub, sigma, range, epsilon
709                 if (!itr->value\&.HasMember("lb")) throw customException (barrName+" does not contain \"lb\" parameter");
710                 if (!itr->value\&.HasMember("ub")) throw customException (barrName+" does not contain \"ub\" parameter");
711                 if (!itr->value\&.HasMember("sigma")) throw customException (barrName+" does not contain \"sigma\" parameter");
712                 if (!itr->value\&.HasMember("range")) throw customException (barrName+" does not contain \"range\" parameter");
713                 if (!itr->value\&.HasMember("epsilon")) throw customException (barrName+" does not contain \"epsilon\" parameter");
714 
715                 if (!itr->value["lb"]\&.IsNumber()) throw customException ("\"lb\" for "+barrName+" is not a number");
716                 if (!itr->value["ub"]\&.IsNumber()) throw customException ("\"ub\" for "+barrName+" is not a number");
717                 if (!itr->value["sigma"]\&.IsNumber()) throw customException ("\"sigma\" for "+barrName+" is not a number");
718                 if (!itr->value["range"]\&.IsNumber()) throw customException ("\"range\" for "+barrName+" is not a number");
719                 if (!itr->value["epsilon"]\&.IsNumber()) throw customException ("\"epsilon\" for "+barrName+" is not a number");
720 
721                 const double lbBarr = itr->value["lb"]\&.GetDouble();
722                 const double ubBarr = itr->value["ub"]\&.GetDouble();
723                 const double sigmaBarr = itr->value["sigma"]\&.GetDouble();
724                 const double rangeBarr = itr->value["range"]\&.GetDouble();
725                 const double epsBarr = itr->value["epsilon"]\&.GetDouble();
726 
727                 try {
728                     sys\&.speciesBarriers[species-1]\&.addSquareWellWallZ (lbBarr, ubBarr, sigmaBarr, rangeBarr, epsBarr, Mtot);
729                 } catch (customException &ce) {
730                     const std::string msg = ce\&.what();
731                     throw customException ("Cannot initialize barrier "+barrName+" : "+msg);
732                 }
733             } else if (barrType == "cylinder_z") {
734                 // Expect x, y, radius, width, sigma, epsilon
735                 if (!itr->value\&.HasMember("x")) throw customException (barrName+" does not contain \"x\" parameter");
736                 if (!itr->value\&.HasMember("y")) throw customException (barrName+" does not contain \"y\" parameter");
737                 if (!itr->value\&.HasMember("radius")) throw customException (barrName+" does not contain \"radius\" parameter");
738                 if (!itr->value\&.HasMember("width")) throw customException (barrName+" does not contain \"width\" parameter");
739                 if (!itr->value\&.HasMember("sigma")) throw customException (barrName+" does not contain \"sigma\" parameter");
740                 if (!itr->value\&.HasMember("epsilon")) throw customException (barrName+" does not contain \"epsilon\" parameter");
741 
742                 if (!itr->value["x"]\&.IsNumber()) throw customException ("\"x\" for "+barrName+" is not a number");
743                 if (!itr->value["y"]\&.IsNumber()) throw customException ("\"y\" for "+barrName+" is not a number");
744                 if (!itr->value["radius"]\&.IsNumber()) throw customException ("\"radius\" for "+barrName+" is not a number");
745                 if (!itr->value["width"]\&.IsNumber()) throw customException ("\"width\" for "+barrName+" is not a number");
746                 if (!itr->value["sigma"]\&.IsNumber()) throw customException ("\"sigma\" for "+barrName+" is not a number");
747                 if (!itr->value["epsilon"]\&.IsNumber()) throw customException ("\"epsilon\" for "+barrName+" is not a number");
748 
749                 const double xBarr = itr->value["x"]\&.GetDouble();
750                 const double yBarr = itr->value["y"]\&.GetDouble();
751                 const double radiusBarr = itr->value["radius"]\&.GetDouble();
752                 const double widthBarr = itr->value["width"]\&.GetDouble();
753                 const double sigmaBarr = itr->value["sigma"]\&.GetDouble();
754                 const double epsBarr = itr->value["epsilon"]\&.GetDouble();
755 
756                 try {
757                     sys\&.speciesBarriers[species-1]\&.addCylinderZ (xBarr, yBarr, radiusBarr, widthBarr, sigmaBarr, epsBarr, Mtot);
758                 } catch (customException &ce) {
759                     const std::string msg = ce\&.what();
760                     throw customException ("Cannot initialize barrier "+barrName+" : "+msg);
761                 }
762             } else if (barrType == "right_triangle_xz") {
763                 // Expect parameters width, theta, lamW, epsilon, sigma, sep, offset, zbase, top
764                 if (!itr->value\&.HasMember("width")) throw customException (barrName+" does not contain \"width\" parameter");
765                 if (!itr->value\&.HasMember("theta")) throw customException (barrName+" does not contain \"theta\" parameter");
766                 if (!itr->value\&.HasMember("lamW")) throw customException (barrName+" does not contain \"lamW\" parameter");
767                 if (!itr->value\&.HasMember("epsilon")) throw customException (barrName+" does not contain \"epsilon\" parameter");
768                 if (!itr->value\&.HasMember("sigma")) throw customException (barrName+" does not contain \"sigma\" parameter");
769                 if (!itr->value\&.HasMember("sep")) throw customException (barrName+" does not contain \"sep\" parameter");
770                 if (!itr->value\&.HasMember("offset")) throw customException (barrName+" does not contain \"offset\" parameter");
771                 if (!itr->value\&.HasMember("zbase")) throw customException (barrName+" does not contain \"zbase\" parameter");
772                 if (!itr->value\&.HasMember("top")) throw customException (barrName+" does not contain \"top\" parameter");
773 
774                 if (!itr->value["width"]\&.IsNumber()) throw customException ("\"width\" for "+barrName+" is not a number");
775                 if (!itr->value["theta"]\&.IsNumber()) throw customException ("\"theta\" for "+barrName+" is not a number");
776                 if (!itr->value["lamW"]\&.IsNumber()) throw customException ("\"lamW\" for "+barrName+" is not a number");
777                 if (!itr->value["epsilon"]\&.IsNumber()) throw customException ("\"epsilon\" for "+barrName+" is not a number");
778                 if (!itr->value["sigma"]\&.IsNumber()) throw customException ("\"sigma\" for "+barrName+" is not a number");
779                 if (!itr->value["sep"]\&.IsNumber()) throw customException ("\"sep\" for "+barrName+" is not a number");
780                 if (!itr->value["offset"]\&.IsNumber()) throw customException ("\"offset\" for "+barrName+" is not a number");
781                 if (!itr->value["zbase"]\&.IsNumber()) throw customException ("\"zbase\" for "+barrName+" is not a number");
782                 if (!itr->value["top"]\&.IsBool()) throw customException ("\"top\" for "+barrName+" is not a boolean");
783 
784                 const double widthBarr = itr->value["width"]\&.GetDouble();
785                 const double thetaBarr = itr->value["theta"]\&.GetDouble();
786                 const double lamwBarr = itr->value["lamW"]\&.GetDouble();
787                 const double epsBarr = itr->value["epsilon"]\&.GetDouble();
788                 const double sigmaBarr = itr->value["sigma"]\&.GetDouble();
789                 const double sepBarr = itr->value["sep"]\&.GetDouble();
790                 const double offsetBarr = itr->value["offset"]\&.GetDouble();
791                 const double zbaseBarr = itr->value["zbase"]\&.GetDouble();
792                 const double topBarr = itr->value["top"]\&.GetBool();
793 
794                 try {
795                     sys\&.speciesBarriers[species-1]\&.addRightTriangleXZ (widthBarr, thetaBarr, lamwBarr, epsBarr, sigmaBarr, sepBarr, offsetBarr, sys\&.box(), zbaseBarr, topBarr, Mtot);
796                 } catch (customException &ce) {
797                     const std::string msg = ce\&.what();
798                     throw customException ("Cannot initialize barrier "+barrName+" : "+msg);
799                 }
800             } else {
801                 throw customException ("Unrecognized barrier type "+barrType+" from barrier "+barrName);
802             }
803         }
804         sendMsg("Initialized barriers");
805     } else {
806         sendMsg("No barriers to initialize");
807     }
808 }
.fi
.SS "void setConfig (\fBsimSystem\fP &sys, const std::stringfilename)"

.PP
Setup a system's initial configuration as necessary\&. Will empty a system if there are currently any particles present and overwrite with new information\&.
.IP "1." 4
If 'restart_file' in input json file, read initial config from there\&.
.IP "2." 4
In not, randomly generate initial configuration\&.
.PP
.PP
\fBParameters:\fP
.RS 4
\fIsys\fP System to initialize 
.br
\fIfilename\fP Input JSON filename 
.RE
.PP

.PP
Definition at line 506 of file input\&.cpp\&.
.PP
References moves::addInsert(), simSystem::addKECorrection(), simSystem::box(), simSystem::getMaxOrder(), simSystem::getTotalM(), simSystem::nSpecies(), simSystem::numSpecies, numToStr(), parseJson(), simSystem::printSnapshot(), simSystem::readConfig(), sendErr(), sendMsg(), setBarriers(), setPairPotentials(), SYS_FAILURE, simSystem::toggleKE(), simSystem::totNMin(), and customException::what()\&.
.PP
.nf
506                                                           {
507     rapidjson::Document doc;
508     parseJson (filename, doc);
509 
510     // Get a few things from file not easily accessible from system object
511     std::string restart_file = "";
512     if (doc\&.HasMember("restart_file")) {
513         restart_file = doc["restart_file"]\&.GetString();
514     }
515 
516     std::vector < int > sysMax (doc["max_N"]\&.Size(), 0);
517     for (rapidjson::SizeType i = 0; i < doc["max_N"]\&.Size(); ++i) {
518         sysMax[i] = doc["max_N"][i]\&.GetInt();
519     }
520     std::vector < int > sysMin (doc["min_N"]\&.Size(), 0);
521     for (rapidjson::SizeType i = 0; i < doc["min_N"]\&.Size(); ++i) {
522         sysMin[i] = doc["min_N"][i]\&.GetInt();
523     }
524 
525     // Rest from existing system
526     const int Mtot = sys\&.getTotalM();
527     const int maxOrder = sys\&.getMaxOrder();
528     const bool useKe = sys\&.addKECorrection();
529     const double duh = 10\&.0;
530     const std::vector < double > sysBox = sys\&.box();
531 
532     // Read from restart file if specified
533     if (restart_file != "") {
534         try {
535             sys\&.readConfig(restart_file);
536         } catch (customException &ce) {
537             sendErr(ce\&.what());
538         }
539     } else if (restart_file == "" && sys\&.totNMin() > 0) {
540         sendMsg("Automatically generating the initial configuration");
541 
542         // Have to generate initial configuration manually - start with mu = INF
543         std::vector < double > initMu (doc["num_species"]\&.GetInt(), 1\&.0e2);
544 
545         simSystem initSys (doc["num_species"]\&.GetInt(), doc["beta"]\&.GetDouble()/100\&.0, sysBox, initMu, sysMax, sysMin, Mtot, duh, maxOrder); // beta =  1/T, so low beta to have high T
546         if (useKe) {
547             initSys\&.toggleKE();
548             if (initSys\&.addKECorrection() == false) {
549                 throw customException ("Unable to set KE flag");
550             }
551         }
552 
553         // Add the same potentials
554         setPairPotentials (initSys, doc);
555         setBarriers (initSys, doc);
556 
557         std::vector < int > initialization_order (sys\&.nSpecies(), 0), check_init (sys\&.nSpecies(), 0);
558         std::vector < double > init_frac (sys\&.nSpecies(), 1\&.0);
559         double sum = 0\&.0;
560         for (unsigned int i = 0; i < sys\&.nSpecies(); ++i) {
561             initialization_order[i] = i;
562             if (i > 0) init_frac[i] = 0\&.0;
563             sum += init_frac[i];
564         }
565         if (doc\&.HasMember("init_order")) {
566             if (!doc["init_order"]\&.IsArray()) throw customException("\"init_order\" is not an array in "+filename);
567             if (doc["init_order"]\&.Size() != doc["num_species"]\&.GetInt()) throw customException("\"init_order\" not specified for each species in "+filename);
568 
569             for (rapidjson::SizeType i = 0; i < doc["init_order"]\&.Size(); ++i) {
570                 if (!doc["init_order"][i]\&.IsInt()) throw customException("\"init_order\" is not an integer for species "+numToStr(i+1)+" in "+filename);
571                 initialization_order[i] = doc["init_order"][i]\&.GetInt();
572                 if (initialization_order[i] < 0 || initialization_order[i] >= sys\&.nSpecies()) {
573                     throw customException ("Order of initialization goes out of bounds, should include 0 <= i < nSpec");
574                 }
575                 if (check_init[initialization_order[i]] != 0) {
576                     throw customException ("Order of initialization repeats itself");
577                 } else {
578                     check_init[initialization_order[i]] = 1;
579                 }
580             }
581         }
582         if (doc\&.HasMember("init_frac")) {
583             if (!doc["init_frac"]\&.IsArray()) throw customException("\"init_frac\" is not an array in "+filename);
584             if (doc["init_frac"]\&.Size() != doc["num_species"]\&.GetInt()) throw customException("\"init_frac\" not specified for each species in "+filename);
585 
586             sum = 0\&.0;
587             for (rapidjson::SizeType i = 0; i < doc["init_frac"]\&.Size(); ++i) {
588                 if (!doc["init_frac"][i]\&.IsNumber()) throw customException("\"init_frac\" is not a number for species "+numToStr(i+1)+" in "+filename);
589                 init_frac[i] = doc["init_frac"][i]\&.GetDouble();
590                 if (init_frac[i] < 0 || init_frac[i] >= 1\&.0) {
591                     throw customException  ("Initialization fraction out of bounds");
592                 }
593                 sum += init_frac[i];
594             }
595         }
596         for (unsigned int i = 0; i < sys\&.nSpecies(); ++i) {
597             init_frac[i] /= sum;
598         }
599 
600         // Iteratively add each individual species, assume we want an equimolar mixture to start from
601         int added = 0;
602         for (unsigned int idx = 0; idx < sys\&.nSpecies(); ++idx) {
603             unsigned int i = initialization_order[idx];
604             sendMsg("Initializing species "+numToStr(i)+" configurations");
605 
606             // Insert this species i
607             moves initMove (initSys\&.getTotalM());
608             initMove\&.addInsert(i, 1\&.0);
609 
610             // Also add translation moves for all species present
611             for (unsigned int j = 0; j <= idx; ++j) {
612                 sendMsg("Added translation moves for initialization of species "+numToStr(initialization_order[j]));
613                 initMove\&.addTranslate(initialization_order[j], 2\&.0, 1\&.0, initSys\&.box());
614             }
615 
616             // Now do simuation until within proper range
617             int targetNum = sys\&.totNMin()*init_frac[idx];
618             if (idx == sys\&.nSpecies() - 1) {
619                 // To account for integer rounding
620                 targetNum = sys\&.totNMin() - added;
621             }
622             added += targetNum;
623 
624             sendMsg("Target number = "+numToStr(targetNum)+" for species "+numToStr(i+1));
625             int tmpCounter = 0, statusPrint = 10e6;
626             while (initSys\&.numSpecies[i] < targetNum) {
627                 try {
628                     initMove\&.makeMove(initSys);
629                 } catch (customException &ce) {
630                     std::string msg = ce\&.what();
631                     sendErr("Failed to create an initial configuration : "+msg);
632                     exit(SYS_FAILURE);
633                 }
634                 tmpCounter++;
635                 if (tmpCounter%statusPrint == 0) {
636                     tmpCounter = 0;
637                     sendMsg("Grew "+numToStr(initSys\&.numSpecies[i])+" atoms of type "+numToStr(i)+" so far");
638                 }
639             }
640         }
641 
642         // Print snapshot from Reading initial configuration
643         initSys\&.printSnapshot("auto-init\&.xyz", "auto-generated initial configuration");
644 
645         // Read into sys
646         try {
647             sys\&.readConfig("auto-init\&.xyz");
648         } catch (customException &ce) {
649             std::string msg = ce\&.what();
650             throw customException ("Failed to read auto-generated initialization file : "+msg);
651         }
652     }
653 }
.fi
.SS "void setMoves (\fBsimSystem\fP &sys, const rapidjson::Document &doc, \fBmoves\fP *usedMovesEq, \fBmoves\fP *usedMovesPr)"

.PP
Assign the Monte Carlo moves based on the JSON input file\&. Uses same information to specify 'production' and 'equilibration' phases\&. Clears any existing information and will overwrite with information from doc\&.
.PP
\fBParameters:\fP
.RS 4
\fIsys\fP Simulation system that has been initialized 
.br
\fIdoc\fP JSON document corresponding to input file  [in] usedMovesEq Pointer to move object that will be used during 'equilibration' (WL + Crossover)  [in] usedMovesPr Pointer to move object that will be used during 'production' (TMMC) 
.RE
.PP

.PP
Definition at line 285 of file input\&.cpp\&.
.PP
References moves::addDelete(), moves::addInsert(), moves::addSwap(), moves::addTranslate(), simSystem::box(), moves::clearAll(), simSystem::getTotalM(), simSystem::nSpecies(), numToStr(), sendErr(), moves::setM(), and SYS_FAILURE\&.
.PP
Referenced by initialize()\&.
.PP
.nf
285                                                                                                      {
286     usedMovesEq->clearAll();
287     usedMovesPr->clearAll();
288 
289     std::vector < double > ref (sys\&.nSpecies(), 0);
290     std::vector < std::vector < double > > probPrSwap (sys\&.nSpecies(), ref);
291     std::vector < double > probPrInsDel (sys\&.nSpecies(), 0), probPrDisp (sys\&.nSpecies(), 0), maxPrD (sys\&.nSpecies(), 0);
292 
293     if (!doc\&.HasMember("moves")) throw customException("Input file does not have Monte Carlo moves specified");
294     if (!doc["moves"]\&.IsObject()) throw customException("Input file does not have Monte Carlo moves specified as correct JSON document");
295 
296     // Insert/Delete moves
297     for (unsigned int i = 0; i < sys\&.nSpecies(); ++i) {
298         std::string dummy = "ins_del_" + numToStr(i+1);
299         if (!doc["moves"]\&.HasMember(dummy\&.c_str())) throw customException("Input file does not have insert/delete move specified for species "+numToStr(i+1));
300         if (!doc["moves"][dummy\&.c_str()]\&.IsNumber()) throw customException("Input file does not correctly specify insert/delete move probability for species "+numToStr(i+1));
301         probPrInsDel[i] = doc["moves"][dummy\&.c_str()]\&.GetDouble();
302     }
303 
304     // Translation moves
305     for (unsigned int i = 0; i < sys\&.nSpecies(); ++i) {
306         std::string dummy = "translate_" + numToStr(i+1);
307         if (!doc["moves"]\&.HasMember(dummy\&.c_str())) throw customException("Input file does not have translation move specified for species "+numToStr(i+1));
308         if (!doc["moves"][dummy\&.c_str()]\&.IsNumber()) throw customException("Input file does not correctly specify translation move probability for species "+numToStr(i+1));
309         probPrDisp[i] = doc["moves"][dummy\&.c_str()]\&.GetDouble();
310 
311         dummy = "max_translation_" + numToStr(i+1);
312         if (!doc["moves"]\&.HasMember(dummy\&.c_str())) throw customException("Input file does not have translation magnitude specified for species "+numToStr(i+1));
313         if (!doc["moves"][dummy\&.c_str()]\&.IsNumber()) throw customException("Input file does not correctly specify translation move magnitude for species "+numToStr(i+1));
314         maxPrD[i] = doc["moves"][dummy\&.c_str()]\&.GetDouble();
315     }
316 
317     // Swap moves
318     for (unsigned int i = 0; i < sys\&.nSpecies(); ++i) {
319         for (unsigned int j = i+1; j < sys\&.nSpecies(); ++j) {
320             std::string name1 = "swap_"+numToStr(i+1)+"_"+numToStr(j+1);
321             std::string name2 = "swap_"+numToStr(j+1)+"_"+numToStr(i+1);
322             std::string moveName = "";
323             bool foundIJ = false;
324 
325             if (doc["moves"]\&.HasMember(name1\&.c_str())) {
326                 moveName = name1;
327                 foundIJ = true;
328             } else if (doc["moves"]\&.HasMember(name2\&.c_str()) && !foundIJ) {
329                 moveName = name2;
330                 foundIJ = true;
331             } else if (doc["moves"]\&.HasMember(name2\&.c_str()) && foundIJ) {
332                 sendErr("Input file doubly specifies production swap move probability for species pair ("+numToStr(i+1)+", "+numToStr(j+1)+")");
333                 exit(SYS_FAILURE);
334             } else {
335                 sendErr("Input file does not specify production swap move probability for species pair ("+numToStr(i+1)+", "+numToStr(j+1)+")");
336                 exit(SYS_FAILURE);
337             }
338 
339             if (!doc["moves"][moveName\&.c_str()]\&.IsNumber()) throw customException("Input file does not correctly specify swap move probability for species pair ("+numToStr(i+1)+", "+numToStr(j+1)+")");
340             probPrSwap[i][j] = doc["moves"][moveName\&.c_str()]\&.GetDouble();
341             probPrSwap[j][i] = doc["moves"][moveName\&.c_str()]\&.GetDouble();
342         }
343     }
344 
345     usedMovesEq->setM(sys\&.getTotalM());
346     usedMovesPr->setM(sys\&.getTotalM());
347     for (unsigned int i = 0; i < sys\&.nSpecies(); ++i) {
348         usedMovesEq->addInsert(i, probPrInsDel[i]);
349         usedMovesPr->addInsert(i, probPrInsDel[i]);
350 
351         usedMovesEq->addDelete(i, probPrInsDel[i]);
352         usedMovesPr->addDelete(i, probPrInsDel[i]);
353 
354         usedMovesEq->addTranslate(i, probPrDisp[i], maxPrD[i], sys\&.box());
355         usedMovesPr->addTranslate(i, probPrDisp[i], maxPrD[i], sys\&.box());
356 
357         for (unsigned int j = i+1; j < sys\&.nSpecies(); ++j) {
358             usedMovesEq->addSwap(i, j, probPrSwap[i][j]);
359             usedMovesPr->addSwap(i, j, probPrSwap[i][j]);
360         }
361     }
362 }
.fi
.SS "void setPairPotentials (\fBsimSystem\fP &sys, const rapidjson::Document &doc)"

.PP
Assign the pair potentials based on the JSON input file\&. Overwrites any existing pair potential information with new settings from doc\&.
.PP
\fBParameters:\fP
.RS 4
\fIsys\fP Simulation system that has been initialized 
.br
\fIdoc\fP JSON document corresponding to input file 
.RE
.PP

.PP
Definition at line 371 of file input\&.cpp\&.
.PP
References simSystem::addPotential(), simSystem::getTotalM(), simSystem::nSpecies(), numToStr(), and simSystem::ppot\&.
.PP
Referenced by initialize(), and setConfig()\&.
.PP
.nf
371                                                                       {
372     const int Mtot = sys\&.getTotalM();
373     if (doc\&.HasMember("num_expanded_states")) {
374         if (Mtot != doc["num_expanded_states"]\&.GetInt()) throw customException ("Mtot in JSON document not same as in system, cannot set pair potentials");
375     }
376 
377     std::vector < std::string > ppotType (sys\&.nSpecies()*(sys\&.nSpecies()-1)/2 + sys\&.nSpecies());
378     int ppotTypeIndex = 0;
379     for (unsigned int i = 0; i < sys\&.nSpecies(); ++i) {
380         for (unsigned int j = i; j < sys\&.nSpecies(); ++j) {
381             std::string name1 = "ppot_"+std::to_string(i+1)+"_"+std::to_string(j+1), name2 = "ppot_"+std::to_string(j+1)+"_"+std::to_string(i+1);
382             std::string ppotName = "", dummy = "", tabFile = "";
383             bool foundIJ = false;
384             if (doc\&.HasMember(name1\&.c_str())) {
385                 ppotName = name1;
386                 foundIJ = true;
387             } else if (doc\&.HasMember(name2\&.c_str()) && !foundIJ) {
388                 ppotName = name2;
389                 foundIJ = true;
390             } else if (doc\&.HasMember(name2\&.c_str()) && foundIJ) {
391                 throw customException("Input file doubly specifies pair potential for species pair ("+numToStr(i+1)+", "+numToStr(j+1)+")");
392             } else {
393                 throw customException("Input file does not specify pair potential for species pair ("+numToStr(i+1)+", "+numToStr(j+1)+")");
394             }
395 
396             if (!doc[ppotName\&.c_str()]\&.IsString()) throw customException ("Pair potential is not a name for ("+numToStr(i+1)+","+numToStr(j+1)+")");
397             ppotType[ppotTypeIndex] = doc[ppotName\&.c_str()]\&.GetString();
398             dummy = ppotName+"_params";
399             if (!doc\&.HasMember(dummy\&.c_str())) throw customException ("Input file missing pair potential parameters for ("+numToStr(i+1)+","+numToStr(j+1)+")");
400             if (!doc[dummy\&.c_str()]\&.IsObject()) throw customException ("Pair potential's parameters are not valid json document");
401 
402             std::vector < double > params;
403 
404             bool useCellList = false; // Default
405             if (doc[dummy\&.c_str()]\&.HasMember("cell_list")) {
406                 useCellList = doc[dummy\&.c_str()]["cell_list"]\&.GetBool();
407             }
408 
409             if (ppotType[ppotTypeIndex] == "square_well") {
410                 // Expects sigma, width, epsilon, cell_list
411                 if (!doc[dummy\&.c_str()]\&.HasMember("sigma")) throw customException ("Pair potential parameters for ("+numToStr(i+1)+","+numToStr(j+1)+") is missing \"sigma\"");
412                 if (!doc[dummy\&.c_str()]\&.HasMember("width")) throw customException ("Pair potential parameters for ("+numToStr(i+1)+","+numToStr(j+1)+") is missing \"width\"");
413                 if (!doc[dummy\&.c_str()]\&.HasMember("epsilon")) throw customException ("Pair potential parameters for ("+numToStr(i+1)+","+numToStr(j+1)+") is missing \"epsilon\"");
414 
415                 if (!doc[dummy\&.c_str()]["sigma"]\&.IsNumber()) throw customException ("Pair potential parameters for ("+numToStr(i+1)+","+numToStr(j+1)+") parameter \"sigma\" is not a number");
416                 if (!doc[dummy\&.c_str()]["width"]\&.IsNumber()) throw customException ("Pair potential parameters for ("+numToStr(i+1)+","+numToStr(j+1)+") parameter \"width\" is not a number");
417                 if (!doc[dummy\&.c_str()]["epsilon"]\&.IsNumber()) throw customException ("Pair potential parameters for ("+numToStr(i+1)+","+numToStr(j+1)+") parameter \"epsilon\" is not a number");
418 
419                 params\&.push_back(doc[dummy\&.c_str()]["sigma"]\&.GetDouble());
420                 params\&.push_back(doc[dummy\&.c_str()]["width"]\&.GetDouble());
421                 params\&.push_back(doc[dummy\&.c_str()]["epsilon"]\&.GetDouble());
422             } else if (ppotType[ppotTypeIndex] == "lennard_jones") {
423                 // Expects epsilon, sigma, r_cut, u_shift
424                 if (!doc[dummy\&.c_str()]\&.HasMember("epsilon")) throw customException ("Pair potential parameters for ("+numToStr(i+1)+","+numToStr(j+1)+") is missing \"epsilon\"");
425                 if (!doc[dummy\&.c_str()]\&.HasMember("sigma")) throw customException ("Pair potential parameters for ("+numToStr(i+1)+","+numToStr(j+1)+") is missing \"sigma\"");
426                 if (!doc[dummy\&.c_str()]\&.HasMember("r_cut")) throw customException ("Pair potential parameters for ("+numToStr(i+1)+","+numToStr(j+1)+") is missing \"r_cut\"");
427                 if (!doc[dummy\&.c_str()]\&.HasMember("u_shift")) throw customException ("Pair potential parameters for ("+numToStr(i+1)+","+numToStr(j+1)+") is missing \"u_shift\"");
428 
429                 if (!doc[dummy\&.c_str()]["epsilon"]\&.IsNumber()) throw customException ("Pair potential parameters for ("+numToStr(i+1)+","+numToStr(j+1)+") parameter \"epsilon\" is not a number");
430                 if (!doc[dummy\&.c_str()]["sigma"]\&.IsNumber()) throw customException ("Pair potential parameters for ("+numToStr(i+1)+","+numToStr(j+1)+") parameter \"sigma\" is not a number");
431                 if (!doc[dummy\&.c_str()]["r_cut"]\&.IsNumber()) throw customException ("Pair potential parameters for ("+numToStr(i+1)+","+numToStr(j+1)+") parameter \"r_cut\" is not a number");
432                 if (!doc[dummy\&.c_str()]["u_shift"]\&.IsNumber()) throw customException ("Pair potential parameters for ("+numToStr(i+1)+","+numToStr(j+1)+") parameter \"u_shift\" is not a number");
433 
434                 params\&.push_back(doc[dummy\&.c_str()]["epsilon"]\&.GetDouble());
435                 params\&.push_back(doc[dummy\&.c_str()]["sigma"]\&.GetDouble());
436                 params\&.push_back(doc[dummy\&.c_str()]["r_cut"]\&.GetDouble());
437                 params\&.push_back(doc[dummy\&.c_str()]["u_shift"]\&.GetDouble());
438             } else if (ppotType[ppotTypeIndex] == "fs_lennard_jones") {
439                 // Expects epsilon, sigma, r_cut
440                 if (!doc[dummy\&.c_str()]\&.HasMember("epsilon")) throw customException ("Pair potential parameters for ("+numToStr(i+1)+","+numToStr(j+1)+") is missing \"epsilon\"");
441                 if (!doc[dummy\&.c_str()]\&.HasMember("sigma")) throw customException ("Pair potential parameters for ("+numToStr(i+1)+","+numToStr(j+1)+") is missing \"sigma\"");
442                 if (!doc[dummy\&.c_str()]\&.HasMember("r_cut")) throw customException ("Pair potential parameters for ("+numToStr(i+1)+","+numToStr(j+1)+") is missing \"r_cut\"");
443 
444                 if (!doc[dummy\&.c_str()]["epsilon"]\&.IsNumber()) throw customException ("Pair potential parameters for ("+numToStr(i+1)+","+numToStr(j+1)+") parameter \"epsilon\" is not a number");
445                 if (!doc[dummy\&.c_str()]["sigma"]\&.IsNumber()) throw customException ("Pair potential parameters for ("+numToStr(i+1)+","+numToStr(j+1)+") parameter \"sigma\" is not a number");
446                 if (!doc[dummy\&.c_str()]["r_cut"]\&.IsNumber()) throw customException ("Pair potential parameters for ("+numToStr(i+1)+","+numToStr(j+1)+") parameter \"r_cut\" is not a number");
447 
448                 params\&.push_back(doc[dummy\&.c_str()]["epsilon"]\&.GetDouble());
449                 params\&.push_back(doc[dummy\&.c_str()]["sigma"]\&.GetDouble());
450                 params\&.push_back(doc[dummy\&.c_str()]["r_cut"]\&.GetDouble());
451             } else if (ppotType[ppotTypeIndex] == "hard_sphere") {
452                 // Expects sigma
453                 if (!doc[dummy\&.c_str()]\&.HasMember("sigma")) throw customException ("Pair potential parameters for ("+numToStr(i+1)+","+numToStr(j+1)+") is missing \"sigma\"");
454 
455                 if (!doc[dummy\&.c_str()]["sigma"]\&.IsNumber()) throw customException ("Pair potential parameters for ("+numToStr(i+1)+","+numToStr(j+1)+") parameter \"sigma\" is not a number");
456 
457                 params\&.push_back(doc[dummy\&.c_str()]["sigma"]\&.GetDouble());
458             } else if (ppotType[ppotTypeIndex] == "tabulated") {
459                 // Expects r_cut, r_shift, u_shift, u_infinity
460                 // Also must specify file to load potential from
461                 if (!doc[dummy\&.c_str()]\&.HasMember("r_cut")) throw customException ("Pair potential parameters for ("+numToStr(i+1)+","+numToStr(j+1)+") is missing \"r_cut\"");
462                 if (!doc[dummy\&.c_str()]\&.HasMember("r_shift")) throw customException ("Pair potential parameters for ("+numToStr(i+1)+","+numToStr(j+1)+") is missing \"r_shift\"");
463                 if (!doc[dummy\&.c_str()]\&.HasMember("u_shift")) throw customException ("Pair potential parameters for ("+numToStr(i+1)+","+numToStr(j+1)+") is missing \"u_shift\"");
464                 if (!doc[dummy\&.c_str()]\&.HasMember("u_infinity")) throw customException ("Pair potential parameters for ("+numToStr(i+1)+","+numToStr(j+1)+") is missing \"u_infinity\"");
465                 if (!doc[dummy\&.c_str()]\&.HasMember("filename")) throw customException ("Pair potential parameters for ("+numToStr(i+1)+","+numToStr(j+1)+") is missing \"filename\"");
466 
467                 if (!doc[dummy\&.c_str()]["r_cut"]\&.IsNumber()) throw customException ("Pair potential parameters for ("+numToStr(i+1)+","+numToStr(j+1)+") parameter \"r_cut\" is not a number");
468                 if (!doc[dummy\&.c_str()]["r_shift"]\&.IsNumber()) throw customException ("Pair potential parameters for ("+numToStr(i+1)+","+numToStr(j+1)+") parameter \"r_shift\" is not a number");
469                 if (!doc[dummy\&.c_str()]["u_shift"]\&.IsNumber()) throw customException ("Pair potential parameters for ("+numToStr(i+1)+","+numToStr(j+1)+") parameter \"u_shift\" is not a number");
470                 if (!doc[dummy\&.c_str()]["u_infinity"]\&.IsNumber()) throw customException ("Pair potential parameters for ("+numToStr(i+1)+","+numToStr(j+1)+") parameter \"u_infinity\" is not a number");
471                 if (!doc[dummy\&.c_str()]["filename"]\&.IsString()) throw customException ("Pair potential parameters for ("+numToStr(i+1)+","+numToStr(j+1)+") parameter \"filename\" is not a string");
472 
473                 params\&.push_back(doc[dummy\&.c_str()]["r_cut"]\&.GetDouble());
474                 params\&.push_back(doc[dummy\&.c_str()]["r_shift"]\&.GetDouble());
475                 params\&.push_back(doc[dummy\&.c_str()]["u_shift"]\&.GetDouble());
476                 params\&.push_back(doc[dummy\&.c_str()]["u_infinity"]\&.GetDouble());
477                 tabFile = doc[dummy\&.c_str()]["filename"]\&.GetString();
478             } else {
479                 throw customException ("Unrecognized pair potential "+ppotType[ppotTypeIndex]);
480             }
481 
482             params\&.push_back(Mtot);
483 
484             try {
485                 sys\&.addPotential(i, j, ppotType[ppotTypeIndex], params, useCellList, tabFile);
486                 sys\&.ppot[i][j]->savePotential(ppotName+"\&.dat", 0\&.01, 0\&.01);
487             } catch (std::exception &ex) {
488                 const std::string msg = ex\&.what();
489                 throw customException ("Unable to add potential "+ppotType[ppotTypeIndex]+" for species pair ("+numToStr(i+1)+","+numToStr(j+1)+") : "+msg);
490             }
491 
492             ppotTypeIndex++;
493         }
494     }
495 }
.fi
.SH "Author"
.PP 
Generated automatically by Doxygen for Flat-Histogram Monte Carlo Simulation from the source code\&.
